
BDS5_OSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800b570  0800b570  0001b570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba54  0800ba54  00020614  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba54  0800ba54  0001ba54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba5c  0800ba5c  00020614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba5c  0800ba5c  0001ba5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba60  0800ba60  0001ba60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000614  20000000  0800ba64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c5c  20000614  0800c078  00020614  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001270  0800c078  00021270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020614  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013954  00000000  00000000  00020644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba8  00000000  00000000  00033f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00036b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  00037ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023361  00000000  00000000  00038968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012afe  00000000  00000000  0005bcc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cee92  00000000  00000000  0006e7c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013d659  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d4  00000000  00000000  0013d6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000614 	.word	0x20000614
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b558 	.word	0x0800b558

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000618 	.word	0x20000618
 80001cc:	0800b558 	.word	0x0800b558

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_DMA_Init+0x3c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <MX_DMA_Init+0x3c>)
 8000ffc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_DMA_Init+0x3c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2011      	movs	r0, #17
 8001014:	f001 ff23 	bl	8002e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001018:	2011      	movs	r0, #17
 800101a:	f001 ff3c 	bl	8002e96 <HAL_NVIC_EnableIRQ>

}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800

0800102c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08c      	sub	sp, #48	; 0x30
 8001030:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
 8001046:	4b72      	ldr	r3, [pc, #456]	; (8001210 <MX_GPIO_Init+0x1e4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a71      	ldr	r2, [pc, #452]	; (8001210 <MX_GPIO_Init+0x1e4>)
 800104c:	f043 0310 	orr.w	r3, r3, #16
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b6f      	ldr	r3, [pc, #444]	; (8001210 <MX_GPIO_Init+0x1e4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	61bb      	str	r3, [r7, #24]
 800105c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	4b6b      	ldr	r3, [pc, #428]	; (8001210 <MX_GPIO_Init+0x1e4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a6a      	ldr	r2, [pc, #424]	; (8001210 <MX_GPIO_Init+0x1e4>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b68      	ldr	r3, [pc, #416]	; (8001210 <MX_GPIO_Init+0x1e4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	4b64      	ldr	r3, [pc, #400]	; (8001210 <MX_GPIO_Init+0x1e4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a63      	ldr	r2, [pc, #396]	; (8001210 <MX_GPIO_Init+0x1e4>)
 8001084:	f043 0320 	orr.w	r3, r3, #32
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b61      	ldr	r3, [pc, #388]	; (8001210 <MX_GPIO_Init+0x1e4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0320 	and.w	r3, r3, #32
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <MX_GPIO_Init+0x1e4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a5c      	ldr	r2, [pc, #368]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b5a      	ldr	r3, [pc, #360]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	4b56      	ldr	r3, [pc, #344]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a55      	ldr	r2, [pc, #340]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b53      	ldr	r3, [pc, #332]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	4b4f      	ldr	r3, [pc, #316]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a4e      	ldr	r2, [pc, #312]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b4c      	ldr	r3, [pc, #304]	; (8001210 <MX_GPIO_Init+0x1e4>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f0:	4848      	ldr	r0, [pc, #288]	; (8001214 <MX_GPIO_Init+0x1e8>)
 80010f2:	f002 fc89 	bl	8003a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin|LED2_Pin|TDIN_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80010fc:	4846      	ldr	r0, [pc, #280]	; (8001218 <MX_GPIO_Init+0x1ec>)
 80010fe:	f002 fc83 	bl	8003a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	2102      	movs	r1, #2
 8001106:	4843      	ldr	r0, [pc, #268]	; (8001214 <MX_GPIO_Init+0x1e8>)
 8001108:	f002 fc7e 	bl	8003a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TCLK_Pin|IIC_SCL_Pin|IIC_SDA_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f240 3101 	movw	r1, #769	; 0x301
 8001112:	4842      	ldr	r0, [pc, #264]	; (800121c <MX_GPIO_Init+0x1f0>)
 8001114:	f002 fc78 	bl	8003a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111e:	4840      	ldr	r0, [pc, #256]	; (8001220 <MX_GPIO_Init+0x1f4>)
 8001120:	f002 fc72 	bl	8003a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin|KEY2_Pin;
 8001124:	231c      	movs	r3, #28
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800112c:	2301      	movs	r3, #1
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	483b      	ldr	r0, [pc, #236]	; (8001224 <MX_GPIO_Init+0x1f8>)
 8001138:	f002 faca 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800113c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	482f      	ldr	r0, [pc, #188]	; (8001214 <MX_GPIO_Init+0x1e8>)
 8001156:	f002 fabb 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 800115a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001164:	2301      	movs	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	4829      	ldr	r0, [pc, #164]	; (8001218 <MX_GPIO_Init+0x1ec>)
 8001174:	f002 faac 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001178:	2302      	movs	r3, #2
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	4821      	ldr	r0, [pc, #132]	; (8001214 <MX_GPIO_Init+0x1e8>)
 8001190:	f002 fa9e 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TCLK_Pin|IIC_SCL_Pin|IIC_SDA_Pin;
 8001194:	f240 3301 	movw	r3, #769	; 0x301
 8001198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119e:	2301      	movs	r3, #1
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	4619      	mov	r1, r3
 80011ac:	481b      	ldr	r0, [pc, #108]	; (800121c <MX_GPIO_Init+0x1f0>)
 80011ae:	f002 fa8f 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PEN_Pin|DOUT_Pin;
 80011b2:	2306      	movs	r3, #6
 80011b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	4815      	ldr	r0, [pc, #84]	; (800121c <MX_GPIO_Init+0x1f0>)
 80011c6:	f002 fa83 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TDIN_Pin;
 80011ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TDIN_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	480d      	ldr	r0, [pc, #52]	; (8001218 <MX_GPIO_Init+0x1ec>)
 80011e4:	f002 fa74 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80011e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	4807      	ldr	r0, [pc, #28]	; (8001220 <MX_GPIO_Init+0x1f4>)
 8001202:	f002 fa65 	bl	80036d0 <HAL_GPIO_Init>

}
 8001206:	bf00      	nop
 8001208:	3730      	adds	r7, #48	; 0x30
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40020800 	.word	0x40020800
 8001218:	40021400 	.word	0x40021400
 800121c:	40020400 	.word	0x40020400
 8001220:	40020000 	.word	0x40020000
 8001224:	40021000 	.word	0x40021000

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration---- ----------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122c:	f001 fca6 	bl	8002b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001230:	f000 f85a 	bl	80012e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(200);
 8001234:	20c8      	movs	r0, #200	; 0xc8
 8001236:	f001 fd13 	bl	8002c60 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123a:	f7ff fef7 	bl	800102c <MX_GPIO_Init>
  MX_DMA_Init();
 800123e:	f7ff fed5 	bl	8000fec <MX_DMA_Init>
  MX_TIM2_Init();
 8001242:	f000 ffbf 	bl	80021c4 <MX_TIM2_Init>
  MX_SPI3_Init();
 8001246:	f000 fd65 	bl	8001d14 <MX_SPI3_Init>
  MX_TIM5_Init();
 800124a:	f001 f893 	bl	8002374 <MX_TIM5_Init>
  MX_TIM3_Init();
 800124e:	f001 f843 	bl	80022d8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001252:	f001 fa47 	bl	80026e4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001256:	f001 fa1b 	bl	8002690 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800125a:	4818      	ldr	r0, [pc, #96]	; (80012bc <main+0x94>)
 800125c:	f003 fbce 	bl	80049fc <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_DMA(&htim2,TIM_CHANNEL_1,&ch1_period,1);
 8001260:	2301      	movs	r3, #1
 8001262:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <main+0x98>)
 8001264:	2100      	movs	r1, #0
 8001266:	4815      	ldr	r0, [pc, #84]	; (80012bc <main+0x94>)
 8001268:	f003 fd28 	bl	8004cbc <HAL_TIM_IC_Start_DMA>
  htim2.State = HAL_TIM_STATE_READY;
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <main+0x94>)
 800126e:	2201      	movs	r2, #1
 8001270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  HAL_TIM_Base_Start(&htim5);
 8001274:	4813      	ldr	r0, [pc, #76]	; (80012c4 <main+0x9c>)
 8001276:	f003 fbc1 	bl	80049fc <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_DMA(&htim5,TIM_CHANNEL_2,&ch2_period,1);
 800127a:	2301      	movs	r3, #1
 800127c:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <main+0xa0>)
 800127e:	2104      	movs	r1, #4
 8001280:	4810      	ldr	r0, [pc, #64]	; (80012c4 <main+0x9c>)
 8001282:	f003 fd1b 	bl	8004cbc <HAL_TIM_IC_Start_DMA>
  htim5.State = HAL_TIM_STATE_READY;
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <main+0x9c>)
 8001288:	2201      	movs	r2, #1
 800128a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  //HAL_TIM_IC_Start_DMA(&htim2,TIM_CHANNEL_2,&ch1_duty,1);

  ADS8688_Init(&ads, &hspi3, SPI3_CS_GPIO_Port, SPI3_CS_Pin);
 800128e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <main+0xa4>)
 8001294:	490e      	ldr	r1, [pc, #56]	; (80012d0 <main+0xa8>)
 8001296:	480f      	ldr	r0, [pc, #60]	; (80012d4 <main+0xac>)
 8001298:	f001 fb3f 	bl	800291a <ADS8688_Init>
  HAL_Delay(500);
 800129c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a0:	f001 fcde 	bl	8002c60 <HAL_Delay>
  //ADS_Read_All_Raw(&ads, ads_data);
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&R_onedata, 1);
 80012a4:	2201      	movs	r2, #1
 80012a6:	490c      	ldr	r1, [pc, #48]	; (80012d8 <main+0xb0>)
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <main+0xb4>)
 80012aa:	f004 feb3 	bl	8006014 <HAL_UART_Receive_IT>
  //HAL_UART_Transmit_IT(&huart2, ch_showall, 828);
  TIM3->PSC=99;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <main+0xb8>)
 80012b0:	2263      	movs	r2, #99	; 0x63
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_TIM_Base_Start_IT(&htim3);
 80012b4:	480b      	ldr	r0, [pc, #44]	; (80012e4 <main+0xbc>)
 80012b6:	f003 fc09 	bl	8004acc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <main+0x92>
 80012bc:	2000112c 	.word	0x2000112c
 80012c0:	2000063c 	.word	0x2000063c
 80012c4:	2000103c 	.word	0x2000103c
 80012c8:	20000f6c 	.word	0x20000f6c
 80012cc:	40020000 	.word	0x40020000
 80012d0:	20000f84 	.word	0x20000f84
 80012d4:	20000f74 	.word	0x20000f74
 80012d8:	2000076e 	.word	0x2000076e
 80012dc:	200011d4 	.word	0x200011d4
 80012e0:	40000400 	.word	0x40000400
 80012e4:	20001084 	.word	0x20001084

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	; 0x50
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2230      	movs	r2, #48	; 0x30
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f005 fd02 	bl	8006d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <SystemClock_Config+0xd0>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a28      	ldr	r2, [pc, #160]	; (80013b8 <SystemClock_Config+0xd0>)
 8001316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <SystemClock_Config+0xd0>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <SystemClock_Config+0xd4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a22      	ldr	r2, [pc, #136]	; (80013bc <SystemClock_Config+0xd4>)
 8001332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <SystemClock_Config+0xd4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001344:	2301      	movs	r3, #1
 8001346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134e:	2302      	movs	r3, #2
 8001350:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001352:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001358:	2304      	movs	r3, #4
 800135a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800135c:	23a8      	movs	r3, #168	; 0xa8
 800135e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001360:	2302      	movs	r3, #2
 8001362:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001364:	2304      	movs	r3, #4
 8001366:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001368:	f107 0320 	add.w	r3, r7, #32
 800136c:	4618      	mov	r0, r3
 800136e:	f002 fb65 	bl	8003a3c <HAL_RCC_OscConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001378:	f000 fcc4 	bl	8001d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137c:	230f      	movs	r3, #15
 800137e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001380:	2302      	movs	r3, #2
 8001382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001388:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800138c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800138e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001392:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	2105      	movs	r1, #5
 800139a:	4618      	mov	r0, r3
 800139c:	f002 fdc6 	bl	8003f2c <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013a6:	f000 fcad 	bl	8001d04 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80013aa:	f002 fea5 	bl	80040f8 <HAL_RCC_EnableCSS>
}
 80013ae:	bf00      	nop
 80013b0:	3750      	adds	r7, #80	; 0x50
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40007000 	.word	0x40007000

080013c0 <FinishCount>:

/* USER CODE BEGIN 4 */
//计数完后处理数据的函�???????????????????????????????
void FinishCount(){
 80013c0:	b5b0      	push	{r4, r5, r7, lr}
 80013c2:	af00      	add	r7, sp, #0
//	if(++count1ms<5 && shuiping_scale==0)
//	{
//		return;
//	}
//	count1ms=0;
	if(chuizhi_scale==1)
 80013c4:	4b3c      	ldr	r3, [pc, #240]	; (80014b8 <FinishCount+0xf8>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d131      	bne.n	8001430 <FinishCount+0x70>
	{
		for(i=0;i<=402;i++)
 80013cc:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <FinishCount+0xfc>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e028      	b.n	8001426 <FinishCount+0x66>
			{
			ch1_values[i]=(uint16_t)((short int)ch1_values[i]-32768)*10+32768;
 80013d4:	4b39      	ldr	r3, [pc, #228]	; (80014bc <FinishCount+0xfc>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a39      	ldr	r2, [pc, #228]	; (80014c0 <FinishCount+0x100>)
 80013da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013de:	461a      	mov	r2, r3
 80013e0:	0092      	lsls	r2, r2, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	4b34      	ldr	r3, [pc, #208]	; (80014bc <FinishCount+0xfc>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 80013f0:	b291      	uxth	r1, r2
 80013f2:	4a33      	ldr	r2, [pc, #204]	; (80014c0 <FinishCount+0x100>)
 80013f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ch2_values[i]=(uint16_t)((short int)ch2_values[i]-32768)*10+32768;
 80013f8:	4b30      	ldr	r3, [pc, #192]	; (80014bc <FinishCount+0xfc>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a31      	ldr	r2, [pc, #196]	; (80014c4 <FinishCount+0x104>)
 80013fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001402:	461a      	mov	r2, r3
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	4413      	add	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	b29a      	uxth	r2, r3
 800140c:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <FinishCount+0xfc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 8001414:	b291      	uxth	r1, r2
 8001416:	4a2b      	ldr	r2, [pc, #172]	; (80014c4 <FinishCount+0x104>)
 8001418:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0;i<=402;i++)
 800141c:	4b27      	ldr	r3, [pc, #156]	; (80014bc <FinishCount+0xfc>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3301      	adds	r3, #1
 8001422:	4a26      	ldr	r2, [pc, #152]	; (80014bc <FinishCount+0xfc>)
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b25      	ldr	r3, [pc, #148]	; (80014bc <FinishCount+0xfc>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f5b3 7fc9 	cmp.w	r3, #402	; 0x192
 800142e:	ddd1      	ble.n	80013d4 <FinishCount+0x14>
			}
	}
	if(chuizhi_scale==0)
 8001430:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <FinishCount+0xf8>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d13b      	bne.n	80014b0 <FinishCount+0xf0>
	{
		for(i=0;i<=402;i++)
 8001438:	4b20      	ldr	r3, [pc, #128]	; (80014bc <FinishCount+0xfc>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e032      	b.n	80014a6 <FinishCount+0xe6>
			{
				ch1_values[i]=(uint16_t)((short int)ch1_values[i]-32768)*100+32768;
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <FinishCount+0xfc>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <FinishCount+0x100>)
 8001446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800144a:	461a      	mov	r2, r3
 800144c:	0092      	lsls	r2, r2, #2
 800144e:	4413      	add	r3, r2
 8001450:	461a      	mov	r2, r3
 8001452:	0091      	lsls	r1, r2, #2
 8001454:	461a      	mov	r2, r3
 8001456:	460b      	mov	r3, r1
 8001458:	4413      	add	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	b29a      	uxth	r2, r3
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <FinishCount+0xfc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 8001466:	b291      	uxth	r1, r2
 8001468:	4a15      	ldr	r2, [pc, #84]	; (80014c0 <FinishCount+0x100>)
 800146a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				ch2_values[i]=(uint16_t)((short int)ch2_values[i]-32768)*100+32768;
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <FinishCount+0xfc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <FinishCount+0x104>)
 8001474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001478:	461a      	mov	r2, r3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4413      	add	r3, r2
 800147e:	461a      	mov	r2, r3
 8001480:	0091      	lsls	r1, r2, #2
 8001482:	461a      	mov	r2, r3
 8001484:	460b      	mov	r3, r1
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <FinishCount+0xfc>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 8001494:	b291      	uxth	r1, r2
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <FinishCount+0x104>)
 8001498:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0;i<=402;i++)
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <FinishCount+0xfc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	4a06      	ldr	r2, [pc, #24]	; (80014bc <FinishCount+0xfc>)
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <FinishCount+0xfc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f5b3 7fc9 	cmp.w	r3, #402	; 0x192
 80014ae:	ddc7      	ble.n	8001440 <FinishCount+0x80>
			}
	}
	for(i=0;i<=402;i++)
 80014b0:	4b02      	ldr	r3, [pc, #8]	; (80014bc <FinishCount+0xfc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	e03a      	b.n	800152e <FinishCount+0x16e>
 80014b8:	2000007c 	.word	0x2000007c
 80014bc:	20000768 	.word	0x20000768
 80014c0:	20000b60 	.word	0x20000b60
 80014c4:	20000774 	.word	0x20000774
	{
			  ch1_values[i]=(uint16_t)(ch1_values[i]<<8|ch1_values[i]>>8);
 80014c8:	4bc1      	ldr	r3, [pc, #772]	; (80017d0 <FinishCount+0x410>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4ac1      	ldr	r2, [pc, #772]	; (80017d4 <FinishCount+0x414>)
 80014ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	4bbe      	ldr	r3, [pc, #760]	; (80017d0 <FinishCount+0x410>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	49be      	ldr	r1, [pc, #760]	; (80017d4 <FinishCount+0x414>)
 80014dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	4bb9      	ldr	r3, [pc, #740]	; (80017d0 <FinishCount+0x410>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	b291      	uxth	r1, r2
 80014f0:	4ab8      	ldr	r2, [pc, #736]	; (80017d4 <FinishCount+0x414>)
 80014f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  ch2_values[i]=(uint16_t)(ch2_values[i]<<8|ch2_values[i]>>8);
 80014f6:	4bb6      	ldr	r3, [pc, #728]	; (80017d0 <FinishCount+0x410>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4ab7      	ldr	r2, [pc, #732]	; (80017d8 <FinishCount+0x418>)
 80014fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	b21a      	sxth	r2, r3
 8001504:	4bb2      	ldr	r3, [pc, #712]	; (80017d0 <FinishCount+0x410>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	49b3      	ldr	r1, [pc, #716]	; (80017d8 <FinishCount+0x418>)
 800150a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800150e:	0a1b      	lsrs	r3, r3, #8
 8001510:	b29b      	uxth	r3, r3
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	b21a      	sxth	r2, r3
 8001518:	4bad      	ldr	r3, [pc, #692]	; (80017d0 <FinishCount+0x410>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	b291      	uxth	r1, r2
 800151e:	4aae      	ldr	r2, [pc, #696]	; (80017d8 <FinishCount+0x418>)
 8001520:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0;i<=402;i++)
 8001524:	4baa      	ldr	r3, [pc, #680]	; (80017d0 <FinishCount+0x410>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	4aa9      	ldr	r2, [pc, #676]	; (80017d0 <FinishCount+0x410>)
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4ba8      	ldr	r3, [pc, #672]	; (80017d0 <FinishCount+0x410>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f5b3 7fc9 	cmp.w	r3, #402	; 0x192
 8001536:	ddc7      	ble.n	80014c8 <FinishCount+0x108>
	}

	//�??大�?�最小�?�计�??
	ch1_maxvolt=ch1_maxdata*1.0/65535*10.24-5.12;
 8001538:	4ba8      	ldr	r3, [pc, #672]	; (80017dc <FinishCount+0x41c>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fff1 	bl	8000524 <__aeabi_i2d>
 8001542:	a39b      	add	r3, pc, #620	; (adr r3, 80017b0 <FinishCount+0x3f0>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7ff f980 	bl	800084c <__aeabi_ddiv>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	a398      	add	r3, pc, #608	; (adr r3, 80017b8 <FinishCount+0x3f8>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7ff f84d 	bl	80005f8 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	a396      	add	r3, pc, #600	; (adr r3, 80017c0 <FinishCount+0x400>)
 8001568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156c:	f7fe fe8c 	bl	8000288 <__aeabi_dsub>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fb36 	bl	8000be8 <__aeabi_d2f>
 800157c:	4603      	mov	r3, r0
 800157e:	4a98      	ldr	r2, [pc, #608]	; (80017e0 <FinishCount+0x420>)
 8001580:	6013      	str	r3, [r2, #0]
	ch1_minvolt=ch1_mindata*1.0/65535*10.24-5.12;
 8001582:	4b98      	ldr	r3, [pc, #608]	; (80017e4 <FinishCount+0x424>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe ffcc 	bl	8000524 <__aeabi_i2d>
 800158c:	a388      	add	r3, pc, #544	; (adr r3, 80017b0 <FinishCount+0x3f0>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7ff f95b 	bl	800084c <__aeabi_ddiv>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	a386      	add	r3, pc, #536	; (adr r3, 80017b8 <FinishCount+0x3f8>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff f828 	bl	80005f8 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	a383      	add	r3, pc, #524	; (adr r3, 80017c0 <FinishCount+0x400>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7fe fe67 	bl	8000288 <__aeabi_dsub>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff fb11 	bl	8000be8 <__aeabi_d2f>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a87      	ldr	r2, [pc, #540]	; (80017e8 <FinishCount+0x428>)
 80015ca:	6013      	str	r3, [r2, #0]
	ch2_maxvolt=ch2_maxdata*1.0/65535*10.24-5.12;
 80015cc:	4b87      	ldr	r3, [pc, #540]	; (80017ec <FinishCount+0x42c>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffa7 	bl	8000524 <__aeabi_i2d>
 80015d6:	a376      	add	r3, pc, #472	; (adr r3, 80017b0 <FinishCount+0x3f0>)
 80015d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015dc:	f7ff f936 	bl	800084c <__aeabi_ddiv>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	a373      	add	r3, pc, #460	; (adr r3, 80017b8 <FinishCount+0x3f8>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	f7ff f803 	bl	80005f8 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	a371      	add	r3, pc, #452	; (adr r3, 80017c0 <FinishCount+0x400>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7fe fe42 	bl	8000288 <__aeabi_dsub>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff faec 	bl	8000be8 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	4a77      	ldr	r2, [pc, #476]	; (80017f0 <FinishCount+0x430>)
 8001614:	6013      	str	r3, [r2, #0]
	ch2_minvolt=ch2_mindata*1.0/65535*10.24-5.12;
 8001616:	4b77      	ldr	r3, [pc, #476]	; (80017f4 <FinishCount+0x434>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff82 	bl	8000524 <__aeabi_i2d>
 8001620:	a363      	add	r3, pc, #396	; (adr r3, 80017b0 <FinishCount+0x3f0>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7ff f911 	bl	800084c <__aeabi_ddiv>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	a361      	add	r3, pc, #388	; (adr r3, 80017b8 <FinishCount+0x3f8>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7fe ffde 	bl	80005f8 <__aeabi_dmul>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	a35e      	add	r3, pc, #376	; (adr r3, 80017c0 <FinishCount+0x400>)
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	f7fe fe1d 	bl	8000288 <__aeabi_dsub>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	f7ff fac7 	bl	8000be8 <__aeabi_d2f>
 800165a:	4603      	mov	r3, r0
 800165c:	4a66      	ldr	r2, [pc, #408]	; (80017f8 <FinishCount+0x438>)
 800165e:	6013      	str	r3, [r2, #0]
	ch1Vpp=ch1_maxvolt-ch1_minvolt;
 8001660:	4b5f      	ldr	r3, [pc, #380]	; (80017e0 <FinishCount+0x420>)
 8001662:	ed93 7a00 	vldr	s14, [r3]
 8001666:	4b60      	ldr	r3, [pc, #384]	; (80017e8 <FinishCount+0x428>)
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001670:	4b62      	ldr	r3, [pc, #392]	; (80017fc <FinishCount+0x43c>)
 8001672:	edc3 7a00 	vstr	s15, [r3]
	ch2Vpp=ch2_maxvolt-ch2_minvolt;
 8001676:	4b5e      	ldr	r3, [pc, #376]	; (80017f0 <FinishCount+0x430>)
 8001678:	ed93 7a00 	vldr	s14, [r3]
 800167c:	4b5e      	ldr	r3, [pc, #376]	; (80017f8 <FinishCount+0x438>)
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001686:	4b5e      	ldr	r3, [pc, #376]	; (8001800 <FinishCount+0x440>)
 8001688:	edc3 7a00 	vstr	s15, [r3]
	ch1_avg=(ch1_maxvolt+ch1_minvolt)/2;
 800168c:	4b54      	ldr	r3, [pc, #336]	; (80017e0 <FinishCount+0x420>)
 800168e:	ed93 7a00 	vldr	s14, [r3]
 8001692:	4b55      	ldr	r3, [pc, #340]	; (80017e8 <FinishCount+0x428>)
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	ee37 7a27 	vadd.f32	s14, s14, s15
 800169c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016a4:	4b57      	ldr	r3, [pc, #348]	; (8001804 <FinishCount+0x444>)
 80016a6:	edc3 7a00 	vstr	s15, [r3]
	ch2_avg=(ch2_maxvolt+ch2_minvolt)/2;
 80016aa:	4b51      	ldr	r3, [pc, #324]	; (80017f0 <FinishCount+0x430>)
 80016ac:	ed93 7a00 	vldr	s14, [r3]
 80016b0:	4b51      	ldr	r3, [pc, #324]	; (80017f8 <FinishCount+0x438>)
 80016b2:	edd3 7a00 	vldr	s15, [r3]
 80016b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c2:	4b51      	ldr	r3, [pc, #324]	; (8001808 <FinishCount+0x448>)
 80016c4:	edc3 7a00 	vstr	s15, [r3]

	memcpy(ch_showall+828*sizeof(uint8_t),ch1_freq_tft,sizeof(ch1_freq_tft));
 80016c8:	4a50      	ldr	r2, [pc, #320]	; (800180c <FinishCount+0x44c>)
 80016ca:	4b51      	ldr	r3, [pc, #324]	; (8001810 <FinishCount+0x450>)
 80016cc:	4615      	mov	r5, r2
 80016ce:	461c      	mov	r4, r3
 80016d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d2:	6028      	str	r0, [r5, #0]
 80016d4:	6069      	str	r1, [r5, #4]
 80016d6:	60aa      	str	r2, [r5, #8]
 80016d8:	60eb      	str	r3, [r5, #12]
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	6128      	str	r0, [r5, #16]
	memcpy(ch_showall+848*sizeof(uint8_t),ch1_vpp_tft,sizeof(ch1_vpp_tft));
 80016de:	4a4d      	ldr	r2, [pc, #308]	; (8001814 <FinishCount+0x454>)
 80016e0:	4b4d      	ldr	r3, [pc, #308]	; (8001818 <FinishCount+0x458>)
 80016e2:	4615      	mov	r5, r2
 80016e4:	461c      	mov	r4, r3
 80016e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e8:	6028      	str	r0, [r5, #0]
 80016ea:	6069      	str	r1, [r5, #4]
 80016ec:	60aa      	str	r2, [r5, #8]
 80016ee:	60eb      	str	r3, [r5, #12]
 80016f0:	6820      	ldr	r0, [r4, #0]
 80016f2:	6128      	str	r0, [r5, #16]
	memcpy(ch_showall+868*sizeof(uint8_t),ch1_avg_tft,sizeof(ch1_avg_tft));
 80016f4:	4a49      	ldr	r2, [pc, #292]	; (800181c <FinishCount+0x45c>)
 80016f6:	4b4a      	ldr	r3, [pc, #296]	; (8001820 <FinishCount+0x460>)
 80016f8:	4615      	mov	r5, r2
 80016fa:	461c      	mov	r4, r3
 80016fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fe:	6028      	str	r0, [r5, #0]
 8001700:	6069      	str	r1, [r5, #4]
 8001702:	60aa      	str	r2, [r5, #8]
 8001704:	60eb      	str	r3, [r5, #12]
 8001706:	6820      	ldr	r0, [r4, #0]
 8001708:	6128      	str	r0, [r5, #16]
	memcpy(ch_showall+888*sizeof(uint8_t),ch2_freq_tft,sizeof(ch2_freq_tft));
 800170a:	4a46      	ldr	r2, [pc, #280]	; (8001824 <FinishCount+0x464>)
 800170c:	4b46      	ldr	r3, [pc, #280]	; (8001828 <FinishCount+0x468>)
 800170e:	4615      	mov	r5, r2
 8001710:	461c      	mov	r4, r3
 8001712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001714:	6028      	str	r0, [r5, #0]
 8001716:	6069      	str	r1, [r5, #4]
 8001718:	60aa      	str	r2, [r5, #8]
 800171a:	60eb      	str	r3, [r5, #12]
 800171c:	6820      	ldr	r0, [r4, #0]
 800171e:	6128      	str	r0, [r5, #16]
	memcpy(ch_showall+908*sizeof(uint8_t),ch2_vpp_tft,sizeof(ch2_vpp_tft));
 8001720:	4a42      	ldr	r2, [pc, #264]	; (800182c <FinishCount+0x46c>)
 8001722:	4b43      	ldr	r3, [pc, #268]	; (8001830 <FinishCount+0x470>)
 8001724:	4615      	mov	r5, r2
 8001726:	461c      	mov	r4, r3
 8001728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800172a:	6028      	str	r0, [r5, #0]
 800172c:	6069      	str	r1, [r5, #4]
 800172e:	60aa      	str	r2, [r5, #8]
 8001730:	60eb      	str	r3, [r5, #12]
 8001732:	6820      	ldr	r0, [r4, #0]
 8001734:	6128      	str	r0, [r5, #16]
	memcpy(ch_showall+928*sizeof(uint8_t),ch2_avg_tft,sizeof(ch2_avg_tft));
 8001736:	4a3f      	ldr	r2, [pc, #252]	; (8001834 <FinishCount+0x474>)
 8001738:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <FinishCount+0x478>)
 800173a:	4615      	mov	r5, r2
 800173c:	461c      	mov	r4, r3
 800173e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001740:	6028      	str	r0, [r5, #0]
 8001742:	6069      	str	r1, [r5, #4]
 8001744:	60aa      	str	r2, [r5, #8]
 8001746:	60eb      	str	r3, [r5, #12]
 8001748:	6820      	ldr	r0, [r4, #0]
 800174a:	6128      	str	r0, [r5, #16]
	//计算频率
	sprintf(&ch1_freq_tft[7],"%.3f",84000000.0/ch1_period);
 800174c:	4b3b      	ldr	r3, [pc, #236]	; (800183c <FinishCount+0x47c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fed7 	bl	8000504 <__aeabi_ui2d>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	a11b      	add	r1, pc, #108	; (adr r1, 80017c8 <FinishCount+0x408>)
 800175c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001760:	f7ff f874 	bl	800084c <__aeabi_ddiv>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4935      	ldr	r1, [pc, #212]	; (8001840 <FinishCount+0x480>)
 800176a:	4836      	ldr	r0, [pc, #216]	; (8001844 <FinishCount+0x484>)
 800176c:	f006 f950 	bl	8007a10 <siprintf>
	sprintf(&ch2_freq_tft[7],"%.3f",84000000.0/ch2_period);
 8001770:	4b35      	ldr	r3, [pc, #212]	; (8001848 <FinishCount+0x488>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fec5 	bl	8000504 <__aeabi_ui2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	a112      	add	r1, pc, #72	; (adr r1, 80017c8 <FinishCount+0x408>)
 8001780:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001784:	f7ff f862 	bl	800084c <__aeabi_ddiv>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	492c      	ldr	r1, [pc, #176]	; (8001840 <FinishCount+0x480>)
 800178e:	482f      	ldr	r0, [pc, #188]	; (800184c <FinishCount+0x48c>)
 8001790:	f006 f93e 	bl	8007a10 <siprintf>

	//将发送的数据填入指令

	sprintf(&ch1_vpp_tft[7],"%.5f",ch1Vpp);
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <FinishCount+0x43c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fed5 	bl	8000548 <__aeabi_f2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	492b      	ldr	r1, [pc, #172]	; (8001850 <FinishCount+0x490>)
 80017a4:	482b      	ldr	r0, [pc, #172]	; (8001854 <FinishCount+0x494>)
 80017a6:	f006 f933 	bl	8007a10 <siprintf>
 80017aa:	e055      	b.n	8001858 <FinishCount+0x498>
 80017ac:	f3af 8000 	nop.w
 80017b0:	00000000 	.word	0x00000000
 80017b4:	40efffe0 	.word	0x40efffe0
 80017b8:	47ae147b 	.word	0x47ae147b
 80017bc:	40247ae1 	.word	0x40247ae1
 80017c0:	47ae147b 	.word	0x47ae147b
 80017c4:	40147ae1 	.word	0x40147ae1
 80017c8:	00000000 	.word	0x00000000
 80017cc:	419406f4 	.word	0x419406f4
 80017d0:	20000768 	.word	0x20000768
 80017d4:	20000b60 	.word	0x20000b60
 80017d8:	20000774 	.word	0x20000774
 80017dc:	20000770 	.word	0x20000770
 80017e0:	20000f54 	.word	0x20000f54
 80017e4:	20000f68 	.word	0x20000f68
 80017e8:	20000f58 	.word	0x20000f58
 80017ec:	2000076c 	.word	0x2000076c
 80017f0:	20000f5c 	.word	0x20000f5c
 80017f4:	2000065a 	.word	0x2000065a
 80017f8:	20000654 	.word	0x20000654
 80017fc:	20000f70 	.word	0x20000f70
 8001800:	2000065c 	.word	0x2000065c
 8001804:	20000f50 	.word	0x20000f50
 8001808:	20000f80 	.word	0x20000f80
 800180c:	200003bc 	.word	0x200003bc
 8001810:	20000000 	.word	0x20000000
 8001814:	200003d0 	.word	0x200003d0
 8001818:	20000014 	.word	0x20000014
 800181c:	200003e4 	.word	0x200003e4
 8001820:	20000028 	.word	0x20000028
 8001824:	200003f8 	.word	0x200003f8
 8001828:	2000003c 	.word	0x2000003c
 800182c:	2000040c 	.word	0x2000040c
 8001830:	20000050 	.word	0x20000050
 8001834:	20000420 	.word	0x20000420
 8001838:	20000064 	.word	0x20000064
 800183c:	2000063c 	.word	0x2000063c
 8001840:	0800b570 	.word	0x0800b570
 8001844:	20000007 	.word	0x20000007
 8001848:	20000f6c 	.word	0x20000f6c
 800184c:	20000043 	.word	0x20000043
 8001850:	0800b578 	.word	0x0800b578
 8001854:	2000001b 	.word	0x2000001b
	sprintf(&ch2_vpp_tft[7],"%.5f",ch2Vpp);
 8001858:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <FinishCount+0x5c4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe73 	bl	8000548 <__aeabi_f2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4948      	ldr	r1, [pc, #288]	; (8001988 <FinishCount+0x5c8>)
 8001868:	4848      	ldr	r0, [pc, #288]	; (800198c <FinishCount+0x5cc>)
 800186a:	f006 f8d1 	bl	8007a10 <siprintf>
//	sprintf(&ch1_avg_tft[7],"%.5f",(ch1_maxvolt+ch1_minvolt)/2);
//	sprintf(&ch2_avg_tft[7],"%.5f",(ch2_maxvolt+ch2_minvolt)/2);


	if(ch1_show==1)
 800186e:	4b48      	ldr	r3, [pc, #288]	; (8001990 <FinishCount+0x5d0>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d11a      	bne.n	80018ac <FinishCount+0x4ec>
	{
		for(i=0;i<=399;i++){
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <FinishCount+0x5d4>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	e010      	b.n	80018a0 <FinishCount+0x4e0>
			ch_showall[10+i]=(uint8_t)(ch1_values[1+i]);
 800187e:	4b45      	ldr	r3, [pc, #276]	; (8001994 <FinishCount+0x5d4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	4a44      	ldr	r2, [pc, #272]	; (8001998 <FinishCount+0x5d8>)
 8001886:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800188a:	4b42      	ldr	r3, [pc, #264]	; (8001994 <FinishCount+0x5d4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	330a      	adds	r3, #10
 8001890:	b2d1      	uxtb	r1, r2
 8001892:	4a42      	ldr	r2, [pc, #264]	; (800199c <FinishCount+0x5dc>)
 8001894:	54d1      	strb	r1, [r2, r3]
		for(i=0;i<=399;i++){
 8001896:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <FinishCount+0x5d4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	4a3d      	ldr	r2, [pc, #244]	; (8001994 <FinishCount+0x5d4>)
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b3c      	ldr	r3, [pc, #240]	; (8001994 <FinishCount+0x5d4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80018a8:	dbe9      	blt.n	800187e <FinishCount+0x4be>
 80018aa:	e013      	b.n	80018d4 <FinishCount+0x514>
		}
	}
	else
	{
		for(i=0;i<=399;i++){
 80018ac:	4b39      	ldr	r3, [pc, #228]	; (8001994 <FinishCount+0x5d4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	e00a      	b.n	80018ca <FinishCount+0x50a>
			ch_showall[10+i]=0;
 80018b4:	4b37      	ldr	r3, [pc, #220]	; (8001994 <FinishCount+0x5d4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	330a      	adds	r3, #10
 80018ba:	4a38      	ldr	r2, [pc, #224]	; (800199c <FinishCount+0x5dc>)
 80018bc:	2100      	movs	r1, #0
 80018be:	54d1      	strb	r1, [r2, r3]
		for(i=0;i<=399;i++){
 80018c0:	4b34      	ldr	r3, [pc, #208]	; (8001994 <FinishCount+0x5d4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	4a33      	ldr	r2, [pc, #204]	; (8001994 <FinishCount+0x5d4>)
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b32      	ldr	r3, [pc, #200]	; (8001994 <FinishCount+0x5d4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80018d2:	dbef      	blt.n	80018b4 <FinishCount+0x4f4>
		}
	}
	if(ch2_show==1)
 80018d4:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <FinishCount+0x5e0>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d11b      	bne.n	8001914 <FinishCount+0x554>
	{
		for(i=0;i<=399;i++){
 80018dc:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <FinishCount+0x5d4>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	e011      	b.n	8001908 <FinishCount+0x548>
		ch_showall[424+i]=(uint8_t)(ch2_values[1+i]);
 80018e4:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <FinishCount+0x5d4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	3301      	adds	r3, #1
 80018ea:	4a2e      	ldr	r2, [pc, #184]	; (80019a4 <FinishCount+0x5e4>)
 80018ec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80018f0:	4b28      	ldr	r3, [pc, #160]	; (8001994 <FinishCount+0x5d4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80018f8:	b2d1      	uxtb	r1, r2
 80018fa:	4a28      	ldr	r2, [pc, #160]	; (800199c <FinishCount+0x5dc>)
 80018fc:	54d1      	strb	r1, [r2, r3]
		for(i=0;i<=399;i++){
 80018fe:	4b25      	ldr	r3, [pc, #148]	; (8001994 <FinishCount+0x5d4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	4a23      	ldr	r2, [pc, #140]	; (8001994 <FinishCount+0x5d4>)
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b22      	ldr	r3, [pc, #136]	; (8001994 <FinishCount+0x5d4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001910:	dbe8      	blt.n	80018e4 <FinishCount+0x524>
 8001912:	e014      	b.n	800193e <FinishCount+0x57e>
		}
	}
	else
	{
		for(i=0;i<=399;i++){
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <FinishCount+0x5d4>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	e00b      	b.n	8001934 <FinishCount+0x574>
			ch_showall[424+i]=0;
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <FinishCount+0x5d4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001924:	4a1d      	ldr	r2, [pc, #116]	; (800199c <FinishCount+0x5dc>)
 8001926:	2100      	movs	r1, #0
 8001928:	54d1      	strb	r1, [r2, r3]
		for(i=0;i<=399;i++){
 800192a:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <FinishCount+0x5d4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	3301      	adds	r3, #1
 8001930:	4a18      	ldr	r2, [pc, #96]	; (8001994 <FinishCount+0x5d4>)
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b17      	ldr	r3, [pc, #92]	; (8001994 <FinishCount+0x5d4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800193c:	dbee      	blt.n	800191c <FinishCount+0x55c>
	}




	HAL_UART_Transmit_DMA(&huart2, ch_showall, 948);
 800193e:	f44f 726d 	mov.w	r2, #948	; 0x3b4
 8001942:	4916      	ldr	r1, [pc, #88]	; (800199c <FinishCount+0x5dc>)
 8001944:	4818      	ldr	r0, [pc, #96]	; (80019a8 <FinishCount+0x5e8>)
 8001946:	f004 fb95 	bl	8006074 <HAL_UART_Transmit_DMA>
	HAL_Delay(10);
 800194a:	200a      	movs	r0, #10
 800194c:	f001 f988 	bl	8002c60 <HAL_Delay>
	//huart2->State=HAL_USART_STATE_READY;
	chufazhuangtai=1;
 8001950:	4b16      	ldr	r3, [pc, #88]	; (80019ac <FinishCount+0x5ec>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
	ch1_maxdata=0;
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <FinishCount+0x5f0>)
 8001958:	2200      	movs	r2, #0
 800195a:	801a      	strh	r2, [r3, #0]
	ch1_mindata=65535;
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <FinishCount+0x5f4>)
 800195e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001962:	801a      	strh	r2, [r3, #0]
	ch2_maxdata=0;
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <FinishCount+0x5f8>)
 8001966:	2200      	movs	r2, #0
 8001968:	801a      	strh	r2, [r3, #0]
	ch2_mindata=65535;
 800196a:	4b14      	ldr	r3, [pc, #80]	; (80019bc <FinishCount+0x5fc>)
 800196c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001970:	801a      	strh	r2, [r3, #0]
	count_caiyang=0;
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <FinishCount+0x600>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
//	  htim2.State = HAL_TIM_STATE_READY;
//	  htim3.State = HAL_TIM_STATE_READY;



	HAL_TIM_Base_Start_IT(&htim3);
 8001978:	4812      	ldr	r0, [pc, #72]	; (80019c4 <FinishCount+0x604>)
 800197a:	f003 f8a7 	bl	8004acc <HAL_TIM_Base_Start_IT>

}
 800197e:	bf00      	nop
 8001980:	bdb0      	pop	{r4, r5, r7, pc}
 8001982:	bf00      	nop
 8001984:	2000065c 	.word	0x2000065c
 8001988:	0800b578 	.word	0x0800b578
 800198c:	20000057 	.word	0x20000057
 8001990:	2000007a 	.word	0x2000007a
 8001994:	20000768 	.word	0x20000768
 8001998:	20000b60 	.word	0x20000b60
 800199c:	20000080 	.word	0x20000080
 80019a0:	2000007b 	.word	0x2000007b
 80019a4:	20000774 	.word	0x20000774
 80019a8:	20001218 	.word	0x20001218
 80019ac:	20000630 	.word	0x20000630
 80019b0:	20000770 	.word	0x20000770
 80019b4:	20000f68 	.word	0x20000f68
 80019b8:	2000076c 	.word	0x2000076c
 80019bc:	2000065a 	.word	0x2000065a
 80019c0:	20000634 	.word	0x20000634
 80019c4:	20001084 	.word	0x20001084

080019c8 <Dosomething>:

int Dosomething(){
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	//如果按钮被按�?????????????
	if(R_alldata[1]==0xB1&&R_alldata[2]==0x11&&R_alldata[3]==0x00&&R_alldata[4]==0x00&&R_alldata[5]==0x00&&R_alldata[7]==0x10&&R_alldata[8]==0x01)
 80019cc:	4b8b      	ldr	r3, [pc, #556]	; (8001bfc <Dosomething+0x234>)
 80019ce:	785b      	ldrb	r3, [r3, #1]
 80019d0:	2bb1      	cmp	r3, #177	; 0xb1
 80019d2:	d15f      	bne.n	8001a94 <Dosomething+0xcc>
 80019d4:	4b89      	ldr	r3, [pc, #548]	; (8001bfc <Dosomething+0x234>)
 80019d6:	789b      	ldrb	r3, [r3, #2]
 80019d8:	2b11      	cmp	r3, #17
 80019da:	d15b      	bne.n	8001a94 <Dosomething+0xcc>
 80019dc:	4b87      	ldr	r3, [pc, #540]	; (8001bfc <Dosomething+0x234>)
 80019de:	78db      	ldrb	r3, [r3, #3]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d157      	bne.n	8001a94 <Dosomething+0xcc>
 80019e4:	4b85      	ldr	r3, [pc, #532]	; (8001bfc <Dosomething+0x234>)
 80019e6:	791b      	ldrb	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d153      	bne.n	8001a94 <Dosomething+0xcc>
 80019ec:	4b83      	ldr	r3, [pc, #524]	; (8001bfc <Dosomething+0x234>)
 80019ee:	795b      	ldrb	r3, [r3, #5]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d14f      	bne.n	8001a94 <Dosomething+0xcc>
 80019f4:	4b81      	ldr	r3, [pc, #516]	; (8001bfc <Dosomething+0x234>)
 80019f6:	79db      	ldrb	r3, [r3, #7]
 80019f8:	2b10      	cmp	r3, #16
 80019fa:	d14b      	bne.n	8001a94 <Dosomething+0xcc>
 80019fc:	4b7f      	ldr	r3, [pc, #508]	; (8001bfc <Dosomething+0x234>)
 80019fe:	7a1b      	ldrb	r3, [r3, #8]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d147      	bne.n	8001a94 <Dosomething+0xcc>
	{
		//ch1通道�?????????????启按钮按�?????????????
		if(R_alldata[6]==0x05)
 8001a04:	4b7d      	ldr	r3, [pc, #500]	; (8001bfc <Dosomething+0x234>)
 8001a06:	799b      	ldrb	r3, [r3, #6]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d113      	bne.n	8001a34 <Dosomething+0x6c>
		{
			//�?????????????启�?�道1
			if(R_alldata[9]==0x01)
 8001a0c:	4b7b      	ldr	r3, [pc, #492]	; (8001bfc <Dosomething+0x234>)
 8001a0e:	7a5b      	ldrb	r3, [r3, #9]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d105      	bne.n	8001a20 <Dosomething+0x58>
			{
				ch1_show=1;
 8001a14:	4b7a      	ldr	r3, [pc, #488]	; (8001c00 <Dosomething+0x238>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
				count_caiyang=0;
 8001a1a:	4b7a      	ldr	r3, [pc, #488]	; (8001c04 <Dosomething+0x23c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
			}
			//关闭通道1
			if(R_alldata[9]==0x00)
 8001a20:	4b76      	ldr	r3, [pc, #472]	; (8001bfc <Dosomething+0x234>)
 8001a22:	7a5b      	ldrb	r3, [r3, #9]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <Dosomething+0x6c>
			{
				ch1_show=0;
 8001a28:	4b75      	ldr	r3, [pc, #468]	; (8001c00 <Dosomething+0x238>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
				count_caiyang=0;
 8001a2e:	4b75      	ldr	r3, [pc, #468]	; (8001c04 <Dosomething+0x23c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
			}
		}
		//ch2通道�?????????????启按钮按�?????????????
		if(R_alldata[6]==0x06)
 8001a34:	4b71      	ldr	r3, [pc, #452]	; (8001bfc <Dosomething+0x234>)
 8001a36:	799b      	ldrb	r3, [r3, #6]
 8001a38:	2b06      	cmp	r3, #6
 8001a3a:	d113      	bne.n	8001a64 <Dosomething+0x9c>
		{
					//�?????????????启�?�道2
			if(R_alldata[9]==0x01)
 8001a3c:	4b6f      	ldr	r3, [pc, #444]	; (8001bfc <Dosomething+0x234>)
 8001a3e:	7a5b      	ldrb	r3, [r3, #9]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d105      	bne.n	8001a50 <Dosomething+0x88>
			{
				ch2_show=1;
 8001a44:	4b70      	ldr	r3, [pc, #448]	; (8001c08 <Dosomething+0x240>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
				count_caiyang=0;
 8001a4a:	4b6e      	ldr	r3, [pc, #440]	; (8001c04 <Dosomething+0x23c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
			}
					//关闭通道2
			if(R_alldata[9]==0x00)
 8001a50:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <Dosomething+0x234>)
 8001a52:	7a5b      	ldrb	r3, [r3, #9]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d105      	bne.n	8001a64 <Dosomething+0x9c>
			{
				ch2_show=0;
 8001a58:	4b6b      	ldr	r3, [pc, #428]	; (8001c08 <Dosomething+0x240>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
				count_caiyang=0;
 8001a5e:	4b69      	ldr	r3, [pc, #420]	; (8001c04 <Dosomething+0x23c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
			}
		}
		//触发调节通道选择按钮按下
		if(R_alldata[6]==0x0b)
 8001a64:	4b65      	ldr	r3, [pc, #404]	; (8001bfc <Dosomething+0x234>)
 8001a66:	799b      	ldrb	r3, [r3, #6]
 8001a68:	2b0b      	cmp	r3, #11
 8001a6a:	f040 80be 	bne.w	8001bea <Dosomething+0x222>
		{
			//CH1触发
			if(R_alldata[9]==0x00)
 8001a6e:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <Dosomething+0x234>)
 8001a70:	7a5b      	ldrb	r3, [r3, #9]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <Dosomething+0xb4>
			{
				count_caiyang=0;
 8001a76:	4b63      	ldr	r3, [pc, #396]	; (8001c04 <Dosomething+0x23c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
			}
			//ch2触发
			if(R_alldata[9]==0x01)
 8001a7c:	4b5f      	ldr	r3, [pc, #380]	; (8001bfc <Dosomething+0x234>)
 8001a7e:	7a5b      	ldrb	r3, [r3, #9]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	f040 80b2 	bne.w	8001bea <Dosomething+0x222>
			{
				chufa_ch=1;
 8001a86:	4b61      	ldr	r3, [pc, #388]	; (8001c0c <Dosomething+0x244>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
				count_caiyang=0;
 8001a8c:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <Dosomething+0x23c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
		if(R_alldata[6]==0x0b)
 8001a92:	e0aa      	b.n	8001bea <Dosomething+0x222>



	}
	//如果滑动选择被滑�?????????????
	else if(R_alldata[1]==0xB1&&R_alldata[2]==0x11&&R_alldata[3]==0x00&&R_alldata[4]==0x00&&R_alldata[5]==0x00&&R_alldata[7]==0x1b)
 8001a94:	4b59      	ldr	r3, [pc, #356]	; (8001bfc <Dosomething+0x234>)
 8001a96:	785b      	ldrb	r3, [r3, #1]
 8001a98:	2bb1      	cmp	r3, #177	; 0xb1
 8001a9a:	d15e      	bne.n	8001b5a <Dosomething+0x192>
 8001a9c:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <Dosomething+0x234>)
 8001a9e:	789b      	ldrb	r3, [r3, #2]
 8001aa0:	2b11      	cmp	r3, #17
 8001aa2:	d15a      	bne.n	8001b5a <Dosomething+0x192>
 8001aa4:	4b55      	ldr	r3, [pc, #340]	; (8001bfc <Dosomething+0x234>)
 8001aa6:	78db      	ldrb	r3, [r3, #3]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d156      	bne.n	8001b5a <Dosomething+0x192>
 8001aac:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <Dosomething+0x234>)
 8001aae:	791b      	ldrb	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d152      	bne.n	8001b5a <Dosomething+0x192>
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <Dosomething+0x234>)
 8001ab6:	795b      	ldrb	r3, [r3, #5]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d14e      	bne.n	8001b5a <Dosomething+0x192>
 8001abc:	4b4f      	ldr	r3, [pc, #316]	; (8001bfc <Dosomething+0x234>)
 8001abe:	79db      	ldrb	r3, [r3, #7]
 8001ac0:	2b1b      	cmp	r3, #27
 8001ac2:	d14a      	bne.n	8001b5a <Dosomething+0x192>
	{
		//幅度调节被按�?????????????
		if(R_alldata[6]==0x04)
 8001ac4:	4b4d      	ldr	r3, [pc, #308]	; (8001bfc <Dosomething+0x234>)
 8001ac6:	799b      	ldrb	r3, [r3, #6]
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d116      	bne.n	8001afa <Dosomething+0x132>
		{
			switch(R_alldata[8])
 8001acc:	4b4b      	ldr	r3, [pc, #300]	; (8001bfc <Dosomething+0x234>)
 8001ace:	7a1b      	ldrb	r3, [r3, #8]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d00e      	beq.n	8001af2 <Dosomething+0x12a>
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	dc11      	bgt.n	8001afc <Dosomething+0x134>
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <Dosomething+0x11a>
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d004      	beq.n	8001aea <Dosomething+0x122>
 8001ae0:	e00c      	b.n	8001afc <Dosomething+0x134>
			{
				case 0:chuizhi_scale=0;break;
 8001ae2:	4b4b      	ldr	r3, [pc, #300]	; (8001c10 <Dosomething+0x248>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	e008      	b.n	8001afc <Dosomething+0x134>
				case 1:chuizhi_scale=1;break;
 8001aea:	4b49      	ldr	r3, [pc, #292]	; (8001c10 <Dosomething+0x248>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
 8001af0:	e004      	b.n	8001afc <Dosomething+0x134>
				case 2:chuizhi_scale=2;break;
 8001af2:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <Dosomething+0x248>)
 8001af4:	2202      	movs	r2, #2
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	e000      	b.n	8001afc <Dosomething+0x134>
			}
		}
 8001afa:	bf00      	nop
		//时间调节被按�?????????????
		if(R_alldata[6]==0x08)
 8001afc:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <Dosomething+0x234>)
 8001afe:	799b      	ldrb	r3, [r3, #6]
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d128      	bne.n	8001b56 <Dosomething+0x18e>
		{
			switch(R_alldata[8])
 8001b04:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <Dosomething+0x234>)
 8001b06:	7a1b      	ldrb	r3, [r3, #8]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d01a      	beq.n	8001b42 <Dosomething+0x17a>
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	dc6e      	bgt.n	8001bee <Dosomething+0x226>
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <Dosomething+0x152>
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d00a      	beq.n	8001b2e <Dosomething+0x166>
		if(R_alldata[6]==0x08)
 8001b18:	e069      	b.n	8001bee <Dosomething+0x226>
			{
				case 0:shuiping_scale=0;TIM3->PSC=0;count_caiyang=0;break;
 8001b1a:	4b3e      	ldr	r3, [pc, #248]	; (8001c14 <Dosomething+0x24c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	4b3d      	ldr	r3, [pc, #244]	; (8001c18 <Dosomething+0x250>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	629a      	str	r2, [r3, #40]	; 0x28
 8001b26:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <Dosomething+0x23c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e014      	b.n	8001b58 <Dosomething+0x190>
				case 1:shuiping_scale=1;TIM3->PSC=9;count_caiyang=0;break;
 8001b2e:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <Dosomething+0x24c>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <Dosomething+0x250>)
 8001b36:	2209      	movs	r2, #9
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28
 8001b3a:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <Dosomething+0x23c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	e00a      	b.n	8001b58 <Dosomething+0x190>
				case 2:shuiping_scale=2;TIM3->PSC=99;count_caiyang=0;break;
 8001b42:	4b34      	ldr	r3, [pc, #208]	; (8001c14 <Dosomething+0x24c>)
 8001b44:	2202      	movs	r2, #2
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	4b33      	ldr	r3, [pc, #204]	; (8001c18 <Dosomething+0x250>)
 8001b4a:	2263      	movs	r2, #99	; 0x63
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <Dosomething+0x23c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	e000      	b.n	8001b58 <Dosomething+0x190>
			}
		}
 8001b56:	bf00      	nop
		if(R_alldata[6]==0x08)
 8001b58:	e049      	b.n	8001bee <Dosomething+0x226>
	}

	//如果滑动触发电平选择器被按下
	else if(R_alldata[1]==0xB1&&R_alldata[2]==0x11&&R_alldata[3]==0x00&&R_alldata[4]==0x00&&R_alldata[5]==0x00&&R_alldata[6]==0x03&&R_alldata[7]==0x13)
 8001b5a:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <Dosomething+0x234>)
 8001b5c:	785b      	ldrb	r3, [r3, #1]
 8001b5e:	2bb1      	cmp	r3, #177	; 0xb1
 8001b60:	d146      	bne.n	8001bf0 <Dosomething+0x228>
 8001b62:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <Dosomething+0x234>)
 8001b64:	789b      	ldrb	r3, [r3, #2]
 8001b66:	2b11      	cmp	r3, #17
 8001b68:	d142      	bne.n	8001bf0 <Dosomething+0x228>
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <Dosomething+0x234>)
 8001b6c:	78db      	ldrb	r3, [r3, #3]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d13e      	bne.n	8001bf0 <Dosomething+0x228>
 8001b72:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <Dosomething+0x234>)
 8001b74:	791b      	ldrb	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d13a      	bne.n	8001bf0 <Dosomething+0x228>
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <Dosomething+0x234>)
 8001b7c:	795b      	ldrb	r3, [r3, #5]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d136      	bne.n	8001bf0 <Dosomething+0x228>
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <Dosomething+0x234>)
 8001b84:	799b      	ldrb	r3, [r3, #6]
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d132      	bne.n	8001bf0 <Dosomething+0x228>
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <Dosomething+0x234>)
 8001b8c:	79db      	ldrb	r3, [r3, #7]
 8001b8e:	2b13      	cmp	r3, #19
 8001b90:	d12e      	bne.n	8001bf0 <Dosomething+0x228>
	{
		if(chuizhi_scale==2)trigger_volt=(uint16_t)R_alldata[11]*256;
 8001b92:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <Dosomething+0x248>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d106      	bne.n	8001ba8 <Dosomething+0x1e0>
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <Dosomething+0x234>)
 8001b9c:	7adb      	ldrb	r3, [r3, #11]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <Dosomething+0x254>)
 8001ba6:	801a      	strh	r2, [r3, #0]
		if(chuizhi_scale==1)trigger_volt=(uint16_t)R_alldata[11]*256/10;
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <Dosomething+0x248>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d10b      	bne.n	8001bc8 <Dosomething+0x200>
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <Dosomething+0x234>)
 8001bb2:	7adb      	ldrb	r3, [r3, #11]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	4a1a      	ldr	r2, [pc, #104]	; (8001c20 <Dosomething+0x258>)
 8001bb8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bbc:	1092      	asrs	r2, r2, #2
 8001bbe:	17db      	asrs	r3, r3, #31
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <Dosomething+0x254>)
 8001bc6:	801a      	strh	r2, [r3, #0]
		if(chuizhi_scale==0)trigger_volt=(uint16_t)R_alldata[11]*256/100;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <Dosomething+0x248>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10f      	bne.n	8001bf0 <Dosomething+0x228>
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <Dosomething+0x234>)
 8001bd2:	7adb      	ldrb	r3, [r3, #11]
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	4a13      	ldr	r2, [pc, #76]	; (8001c24 <Dosomething+0x25c>)
 8001bd8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bdc:	1152      	asrs	r2, r2, #5
 8001bde:	17db      	asrs	r3, r3, #31
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <Dosomething+0x254>)
 8001be6:	801a      	strh	r2, [r3, #0]
 8001be8:	e002      	b.n	8001bf0 <Dosomething+0x228>
		if(R_alldata[6]==0x0b)
 8001bea:	bf00      	nop
 8001bec:	e000      	b.n	8001bf0 <Dosomething+0x228>
		if(R_alldata[6]==0x08)
 8001bee:	bf00      	nop
	}




}
 8001bf0:	bf00      	nop
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	20000660 	.word	0x20000660
 8001c00:	2000007a 	.word	0x2000007a
 8001c04:	20000634 	.word	0x20000634
 8001c08:	2000007b 	.word	0x2000007b
 8001c0c:	20000638 	.word	0x20000638
 8001c10:	2000007c 	.word	0x2000007c
 8001c14:	2000007d 	.word	0x2000007d
 8001c18:	40000400 	.word	0x40000400
 8001c1c:	20000078 	.word	0x20000078
 8001c20:	66666667 	.word	0x66666667
 8001c24:	51eb851f 	.word	0x51eb851f

08001c28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	//UNUSED(huart);
	if(huart->Instance == USART1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a2e      	ldr	r2, [pc, #184]	; (8001cf0 <HAL_UART_RxCpltCallback+0xc8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d156      	bne.n	8001ce8 <HAL_UART_RxCpltCallback+0xc0>
	{
		int i;
		//int isend=0;

					R_alldata[R_place]=R_onedata;     //保存指令单元
 8001c3a:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b2d      	ldr	r3, [pc, #180]	; (8001cf8 <HAL_UART_RxCpltCallback+0xd0>)
 8001c42:	7819      	ldrb	r1, [r3, #0]
 8001c44:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <HAL_UART_RxCpltCallback+0xd4>)
 8001c46:	5499      	strb	r1, [r3, r2]
				//如果指令单元为指令头
				if(R_onedata==0xEE){
 8001c48:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <HAL_UART_RxCpltCallback+0xd0>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2bee      	cmp	r3, #238	; 0xee
 8001c4e:	d106      	bne.n	8001c5e <HAL_UART_RxCpltCallback+0x36>
					R_place++;                                      //�?????????????始获取下�?????????????个指令单�?????????????
 8001c50:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8001c5a:	801a      	strh	r2, [r3, #0]
 8001c5c:	e009      	b.n	8001c72 <HAL_UART_RxCpltCallback+0x4a>
				}
				else if(R_place>=1)R_place++;
 8001c5e:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_UART_RxCpltCallback+0x4a>
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8001c70:	801a      	strh	r2, [r3, #0]
				//超过五个指令单元后判断是否结束指�?????????????
				if(R_place>5){
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d92e      	bls.n	8001cd8 <HAL_UART_RxCpltCallback+0xb0>
						if(R_alldata[R_place-1]==0xFF&&R_alldata[R_place-2]==0xFF&&R_alldata[R_place-3]==0xFC&&R_alldata[R_place-4]==0xFF){
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	4a1e      	ldr	r2, [pc, #120]	; (8001cfc <HAL_UART_RxCpltCallback+0xd4>)
 8001c82:	5cd3      	ldrb	r3, [r2, r3]
 8001c84:	2bff      	cmp	r3, #255	; 0xff
 8001c86:	d127      	bne.n	8001cd8 <HAL_UART_RxCpltCallback+0xb0>
 8001c88:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	3b02      	subs	r3, #2
 8001c8e:	4a1b      	ldr	r2, [pc, #108]	; (8001cfc <HAL_UART_RxCpltCallback+0xd4>)
 8001c90:	5cd3      	ldrb	r3, [r2, r3]
 8001c92:	2bff      	cmp	r3, #255	; 0xff
 8001c94:	d120      	bne.n	8001cd8 <HAL_UART_RxCpltCallback+0xb0>
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	3b03      	subs	r3, #3
 8001c9c:	4a17      	ldr	r2, [pc, #92]	; (8001cfc <HAL_UART_RxCpltCallback+0xd4>)
 8001c9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ca0:	2bfc      	cmp	r3, #252	; 0xfc
 8001ca2:	d119      	bne.n	8001cd8 <HAL_UART_RxCpltCallback+0xb0>
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	3b04      	subs	r3, #4
 8001caa:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <HAL_UART_RxCpltCallback+0xd4>)
 8001cac:	5cd3      	ldrb	r3, [r2, r3]
 8001cae:	2bff      	cmp	r3, #255	; 0xff
 8001cb0:	d112      	bne.n	8001cd8 <HAL_UART_RxCpltCallback+0xb0>
							Dosomething();                            //调用指令处理函数
 8001cb2:	f7ff fe89 	bl	80019c8 <Dosomething>
							for(i=0;i<=255;i++)R_alldata[i]=0;            //指令清空
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	e007      	b.n	8001ccc <HAL_UART_RxCpltCallback+0xa4>
 8001cbc:	4a0f      	ldr	r2, [pc, #60]	; (8001cfc <HAL_UART_RxCpltCallback+0xd4>)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2bff      	cmp	r3, #255	; 0xff
 8001cd0:	ddf4      	ble.n	8001cbc <HAL_UART_RxCpltCallback+0x94>
							R_place=0;                                                  //指令位置�?????????????
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	801a      	strh	r2, [r3, #0]
						}
					}

					R_onedata = 0;                                                                             //Çå¿ÕÖ¸Áîµ¥Ôª£¬»ñÈ¡ÏÂÒ»¸öÖ¸Áîµ¥Ôª
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <HAL_UART_RxCpltCallback+0xd0>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart1, (uint8_t *)&R_onedata, 1);
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4905      	ldr	r1, [pc, #20]	; (8001cf8 <HAL_UART_RxCpltCallback+0xd0>)
 8001ce2:	4807      	ldr	r0, [pc, #28]	; (8001d00 <HAL_UART_RxCpltCallback+0xd8>)
 8001ce4:	f004 f996 	bl	8006014 <HAL_UART_Receive_IT>
	}
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40011000 	.word	0x40011000
 8001cf4:	2000063a 	.word	0x2000063a
 8001cf8:	2000076e 	.word	0x2000076e
 8001cfc:	20000660 	.word	0x20000660
 8001d00:	200011d4 	.word	0x200011d4

08001d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001d18:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <MX_SPI3_Init+0x68>)
 8001d1a:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <MX_SPI3_Init+0x6c>)
 8001d1c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <MX_SPI3_Init+0x68>)
 8001d20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d24:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <MX_SPI3_Init+0x68>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <MX_SPI3_Init+0x68>)
 8001d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d32:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <MX_SPI3_Init+0x68>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <MX_SPI3_Init+0x68>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <MX_SPI3_Init+0x68>)
 8001d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d46:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <MX_SPI3_Init+0x68>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <MX_SPI3_Init+0x68>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <MX_SPI3_Init+0x68>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <MX_SPI3_Init+0x68>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <MX_SPI3_Init+0x68>)
 8001d62:	220a      	movs	r2, #10
 8001d64:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <MX_SPI3_Init+0x68>)
 8001d68:	f002 fb03 	bl	8004372 <HAL_SPI_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001d72:	f7ff ffc7 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000f84 	.word	0x20000f84
 8001d80:	40003c00 	.word	0x40003c00

08001d84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a19      	ldr	r2, [pc, #100]	; (8001e08 <HAL_SPI_MspInit+0x84>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d12c      	bne.n	8001e00 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <HAL_SPI_MspInit+0x88>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	4a17      	ldr	r2, [pc, #92]	; (8001e0c <HAL_SPI_MspInit+0x88>)
 8001db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db4:	6413      	str	r3, [r2, #64]	; 0x40
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_SPI_MspInit+0x88>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_SPI_MspInit+0x88>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a10      	ldr	r2, [pc, #64]	; (8001e0c <HAL_SPI_MspInit+0x88>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_SPI_MspInit+0x88>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001dde:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dec:	2303      	movs	r3, #3
 8001dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001df0:	2306      	movs	r3, #6
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4805      	ldr	r0, [pc, #20]	; (8001e10 <HAL_SPI_MspInit+0x8c>)
 8001dfc:	f001 fc68 	bl	80036d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001e00:	bf00      	nop
 8001e02:	3728      	adds	r7, #40	; 0x28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40003c00 	.word	0x40003c00
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40020800 	.word	0x40020800

08001e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	603b      	str	r3, [r7, #0]
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800

08001e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001e68:	f002 fa68 	bl	800433c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <NMI_Handler+0x8>

08001e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <HardFault_Handler+0x4>

08001e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <MemManage_Handler+0x4>

08001e7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <BusFault_Handler+0x4>

08001e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <UsageFault_Handler+0x4>

08001e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb4:	f000 feb4 	bl	8002c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ec0:	4804      	ldr	r0, [pc, #16]	; (8001ed4 <DMA1_Stream6_IRQHandler+0x18>)
 8001ec2:	f001 f99b 	bl	80031fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */
  huart2.gState=HAL_UART_STATE_READY;
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <DMA1_Stream6_IRQHandler+0x1c>)
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20001174 	.word	0x20001174
 8001ed8:	20001218 	.word	0x20001218

08001edc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ee0:	483c      	ldr	r0, [pc, #240]	; (8001fd4 <TIM3_IRQHandler+0xf8>)
 8001ee2:	f003 f893 	bl	800500c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  ADS_Read_All_Raw(&ads, ads_data);
 8001ee6:	493c      	ldr	r1, [pc, #240]	; (8001fd8 <TIM3_IRQHandler+0xfc>)
 8001ee8:	483c      	ldr	r0, [pc, #240]	; (8001fdc <TIM3_IRQHandler+0x100>)
 8001eea:	f000 fe1d 	bl	8002b28 <ADS_Read_All_Raw>
  ch1_values[count_caiyang] = ads_data[0];
 8001eee:	4b3c      	ldr	r3, [pc, #240]	; (8001fe0 <TIM3_IRQHandler+0x104>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a39      	ldr	r2, [pc, #228]	; (8001fd8 <TIM3_IRQHandler+0xfc>)
 8001ef4:	8811      	ldrh	r1, [r2, #0]
 8001ef6:	4a3b      	ldr	r2, [pc, #236]	; (8001fe4 <TIM3_IRQHandler+0x108>)
 8001ef8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  ch2_values[count_caiyang] = ads_data[1];
 8001efc:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <TIM3_IRQHandler+0x104>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a35      	ldr	r2, [pc, #212]	; (8001fd8 <TIM3_IRQHandler+0xfc>)
 8001f02:	8851      	ldrh	r1, [r2, #2]
 8001f04:	4a38      	ldr	r2, [pc, #224]	; (8001fe8 <TIM3_IRQHandler+0x10c>)
 8001f06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

  if(ads_data[0]>ch1_maxdata)ch1_maxdata=ads_data[0];
 8001f0a:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <TIM3_IRQHandler+0xfc>)
 8001f0c:	881a      	ldrh	r2, [r3, #0]
 8001f0e:	4b37      	ldr	r3, [pc, #220]	; (8001fec <TIM3_IRQHandler+0x110>)
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d903      	bls.n	8001f1e <TIM3_IRQHandler+0x42>
 8001f16:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <TIM3_IRQHandler+0xfc>)
 8001f18:	881a      	ldrh	r2, [r3, #0]
 8001f1a:	4b34      	ldr	r3, [pc, #208]	; (8001fec <TIM3_IRQHandler+0x110>)
 8001f1c:	801a      	strh	r2, [r3, #0]
  if(ads_data[0]>ch2_maxdata)ch2_maxdata=ads_data[1];
 8001f1e:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <TIM3_IRQHandler+0xfc>)
 8001f20:	881a      	ldrh	r2, [r3, #0]
 8001f22:	4b33      	ldr	r3, [pc, #204]	; (8001ff0 <TIM3_IRQHandler+0x114>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d903      	bls.n	8001f32 <TIM3_IRQHandler+0x56>
 8001f2a:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <TIM3_IRQHandler+0xfc>)
 8001f2c:	885a      	ldrh	r2, [r3, #2]
 8001f2e:	4b30      	ldr	r3, [pc, #192]	; (8001ff0 <TIM3_IRQHandler+0x114>)
 8001f30:	801a      	strh	r2, [r3, #0]
  if(ads_data[0]<ch1_mindata)ch1_mindata=ads_data[0];
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <TIM3_IRQHandler+0xfc>)
 8001f34:	881a      	ldrh	r2, [r3, #0]
 8001f36:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <TIM3_IRQHandler+0x118>)
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d203      	bcs.n	8001f46 <TIM3_IRQHandler+0x6a>
 8001f3e:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <TIM3_IRQHandler+0xfc>)
 8001f40:	881a      	ldrh	r2, [r3, #0]
 8001f42:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <TIM3_IRQHandler+0x118>)
 8001f44:	801a      	strh	r2, [r3, #0]
  if(ads_data[0]<ch2_mindata)ch2_mindata=ads_data[1];
 8001f46:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <TIM3_IRQHandler+0xfc>)
 8001f48:	881a      	ldrh	r2, [r3, #0]
 8001f4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <TIM3_IRQHandler+0x11c>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d203      	bcs.n	8001f5a <TIM3_IRQHandler+0x7e>
 8001f52:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <TIM3_IRQHandler+0xfc>)
 8001f54:	885a      	ldrh	r2, [r3, #2]
 8001f56:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <TIM3_IRQHandler+0x11c>)
 8001f58:	801a      	strh	r2, [r3, #0]

  if(chufazhuangtai && ch1_values[count_caiyang]>32768 && ch1_values[count_caiyang-1]<32768)
 8001f5a:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <TIM3_IRQHandler+0x120>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d024      	beq.n	8001fac <TIM3_IRQHandler+0xd0>
 8001f62:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <TIM3_IRQHandler+0x104>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a1f      	ldr	r2, [pc, #124]	; (8001fe4 <TIM3_IRQHandler+0x108>)
 8001f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f70:	d91c      	bls.n	8001fac <TIM3_IRQHandler+0xd0>
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <TIM3_IRQHandler+0x104>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	4a1a      	ldr	r2, [pc, #104]	; (8001fe4 <TIM3_IRQHandler+0x108>)
 8001f7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db13      	blt.n	8001fac <TIM3_IRQHandler+0xd0>
  {
	  count_caiyang=0;
 8001f84:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <TIM3_IRQHandler+0x104>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
	  chufazhuangtai=0;
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <TIM3_IRQHandler+0x120>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	801a      	strh	r2, [r3, #0]
	  ch1_maxdata=0;
 8001f90:	4b16      	ldr	r3, [pc, #88]	; (8001fec <TIM3_IRQHandler+0x110>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	801a      	strh	r2, [r3, #0]
	  ch1_mindata=65535;
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <TIM3_IRQHandler+0x118>)
 8001f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f9c:	801a      	strh	r2, [r3, #0]
	  ch2_maxdata=0;
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <TIM3_IRQHandler+0x114>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	801a      	strh	r2, [r3, #0]
	  ch2_mindata=65535;
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <TIM3_IRQHandler+0x11c>)
 8001fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001faa:	801a      	strh	r2, [r3, #0]
  }


  if(++count_caiyang>=402)
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <TIM3_IRQHandler+0x104>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <TIM3_IRQHandler+0x104>)
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <TIM3_IRQHandler+0x104>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f5b3 7fc9 	cmp.w	r3, #402	; 0x192
 8001fbe:	db07      	blt.n	8001fd0 <TIM3_IRQHandler+0xf4>
  {
	  HAL_TIM_Base_Stop_IT(&htim3);
 8001fc0:	4804      	ldr	r0, [pc, #16]	; (8001fd4 <TIM3_IRQHandler+0xf8>)
 8001fc2:	f002 fdf3 	bl	8004bac <HAL_TIM_Base_Stop_IT>
	  count_caiyang=0;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <TIM3_IRQHandler+0x104>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
	  FinishCount();
 8001fcc:	f7ff f9f8 	bl	80013c0 <FinishCount>
//      	  FinishCount();
//        }


  /* USER CODE END TIM3_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20001084 	.word	0x20001084
 8001fd8:	20000760 	.word	0x20000760
 8001fdc:	20000f74 	.word	0x20000f74
 8001fe0:	20000634 	.word	0x20000634
 8001fe4:	20000b60 	.word	0x20000b60
 8001fe8:	20000774 	.word	0x20000774
 8001fec:	20000770 	.word	0x20000770
 8001ff0:	2000076c 	.word	0x2000076c
 8001ff4:	20000f68 	.word	0x20000f68
 8001ff8:	2000065a 	.word	0x2000065a
 8001ffc:	20000630 	.word	0x20000630

08002000 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <USART1_IRQHandler+0x10>)
 8002006:	f004 f8a1 	bl	800614c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200011d4 	.word	0x200011d4

08002014 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
	return 1;
 8002018:	2301      	movs	r3, #1
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <_kill>:

int _kill(int pid, int sig)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800202e:	f004 fe3d 	bl	8006cac <__errno>
 8002032:	4603      	mov	r3, r0
 8002034:	2216      	movs	r2, #22
 8002036:	601a      	str	r2, [r3, #0]
	return -1;
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_exit>:

void _exit (int status)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800204c:	f04f 31ff 	mov.w	r1, #4294967295
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ffe7 	bl	8002024 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002056:	e7fe      	b.n	8002056 <_exit+0x12>

08002058 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	e00a      	b.n	8002080 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800206a:	f3af 8000 	nop.w
 800206e:	4601      	mov	r1, r0
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	60ba      	str	r2, [r7, #8]
 8002076:	b2ca      	uxtb	r2, r1
 8002078:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3301      	adds	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	dbf0      	blt.n	800206a <_read+0x12>
	}

return len;
 8002088:	687b      	ldr	r3, [r7, #4]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	e009      	b.n	80020b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	60ba      	str	r2, [r7, #8]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 fbf9 	bl	80028a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	3301      	adds	r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	dbf1      	blt.n	80020a4 <_write+0x12>
	}
	return len;
 80020c0:	687b      	ldr	r3, [r7, #4]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <_close>:

int _close(int file)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
	return -1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020f2:	605a      	str	r2, [r3, #4]
	return 0;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <_isatty>:

int _isatty(int file)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
	return 1;
 800210a:	2301      	movs	r3, #1
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
	return 0;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <_sbrk+0x5c>)
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <_sbrk+0x60>)
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002148:	4b13      	ldr	r3, [pc, #76]	; (8002198 <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <_sbrk+0x64>)
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <_sbrk+0x68>)
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	429a      	cmp	r2, r3
 8002162:	d207      	bcs.n	8002174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002164:	f004 fda2 	bl	8006cac <__errno>
 8002168:	4603      	mov	r3, r0
 800216a:	220c      	movs	r2, #12
 800216c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	e009      	b.n	8002188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <_sbrk+0x64>)
 8002184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20020000 	.word	0x20020000
 8002194:	00000400 	.word	0x00000400
 8002198:	20000640 	.word	0x20000640
 800219c:	20001270 	.word	0x20001270

080021a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <SystemInit+0x20>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <SystemInit+0x20>)
 80021ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch1;
DMA_HandleTypeDef hdma_tim5_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b090      	sub	sp, #64	; 0x40
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021d8:	f107 031c 	add.w	r3, r7, #28
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021fe:	4b35      	ldr	r3, [pc, #212]	; (80022d4 <MX_TIM2_Init+0x110>)
 8002200:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002204:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002206:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <MX_TIM2_Init+0x110>)
 8002208:	2200      	movs	r2, #0
 800220a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <MX_TIM2_Init+0x110>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002212:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <MX_TIM2_Init+0x110>)
 8002214:	f04f 32ff 	mov.w	r2, #4294967295
 8002218:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221a:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <MX_TIM2_Init+0x110>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002220:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <MX_TIM2_Init+0x110>)
 8002222:	2200      	movs	r2, #0
 8002224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002226:	482b      	ldr	r0, [pc, #172]	; (80022d4 <MX_TIM2_Init+0x110>)
 8002228:	f002 fb98 	bl	800495c <HAL_TIM_Base_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002232:	f7ff fd67 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800223c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002240:	4619      	mov	r1, r3
 8002242:	4824      	ldr	r0, [pc, #144]	; (80022d4 <MX_TIM2_Init+0x110>)
 8002244:	f003 f87e 	bl	8005344 <HAL_TIM_ConfigClockSource>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800224e:	f7ff fd59 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002252:	4820      	ldr	r0, [pc, #128]	; (80022d4 <MX_TIM2_Init+0x110>)
 8002254:	f002 fcd9 	bl	8004c0a <HAL_TIM_IC_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800225e:	f7ff fd51 	bl	8001d04 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002262:	2304      	movs	r3, #4
 8002264:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002266:	2350      	movs	r3, #80	; 0x50
 8002268:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800226a:	2300      	movs	r3, #0
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002272:	f107 031c 	add.w	r3, r7, #28
 8002276:	4619      	mov	r1, r3
 8002278:	4816      	ldr	r0, [pc, #88]	; (80022d4 <MX_TIM2_Init+0x110>)
 800227a:	f003 f927 	bl	80054cc <HAL_TIM_SlaveConfigSynchro>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8002284:	f7ff fd3e 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	4619      	mov	r1, r3
 8002296:	480f      	ldr	r0, [pc, #60]	; (80022d4 <MX_TIM2_Init+0x110>)
 8002298:	f003 fd9a 	bl	8005dd0 <HAL_TIMEx_MasterConfigSynchronization>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80022a2:	f7ff fd2f 	bl	8001d04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022aa:	2301      	movs	r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	2200      	movs	r2, #0
 80022ba:	4619      	mov	r1, r3
 80022bc:	4805      	ldr	r0, [pc, #20]	; (80022d4 <MX_TIM2_Init+0x110>)
 80022be:	f002 ffad 	bl	800521c <HAL_TIM_IC_ConfigChannel>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 80022c8:	f7ff fd1c 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022cc:	bf00      	nop
 80022ce:	3740      	adds	r7, #64	; 0x40
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	2000112c 	.word	0x2000112c

080022d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022de:	f107 0308 	add.w	r3, r7, #8
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ec:	463b      	mov	r3, r7
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022f4:	4b1d      	ldr	r3, [pc, #116]	; (800236c <MX_TIM3_Init+0x94>)
 80022f6:	4a1e      	ldr	r2, [pc, #120]	; (8002370 <MX_TIM3_Init+0x98>)
 80022f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <MX_TIM3_Init+0x94>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <MX_TIM3_Init+0x94>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2099;
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <MX_TIM3_Init+0x94>)
 8002308:	f640 0233 	movw	r2, #2099	; 0x833
 800230c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <MX_TIM3_Init+0x94>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002314:	4b15      	ldr	r3, [pc, #84]	; (800236c <MX_TIM3_Init+0x94>)
 8002316:	2200      	movs	r2, #0
 8002318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800231a:	4814      	ldr	r0, [pc, #80]	; (800236c <MX_TIM3_Init+0x94>)
 800231c:	f002 fb1e 	bl	800495c <HAL_TIM_Base_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002326:	f7ff fced 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800232a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002330:	f107 0308 	add.w	r3, r7, #8
 8002334:	4619      	mov	r1, r3
 8002336:	480d      	ldr	r0, [pc, #52]	; (800236c <MX_TIM3_Init+0x94>)
 8002338:	f003 f804 	bl	8005344 <HAL_TIM_ConfigClockSource>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002342:	f7ff fcdf 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800234e:	463b      	mov	r3, r7
 8002350:	4619      	mov	r1, r3
 8002352:	4806      	ldr	r0, [pc, #24]	; (800236c <MX_TIM3_Init+0x94>)
 8002354:	f003 fd3c 	bl	8005dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800235e:	f7ff fcd1 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20001084 	.word	0x20001084
 8002370:	40000400 	.word	0x40000400

08002374 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b090      	sub	sp, #64	; 0x40
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800237a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023ae:	4b35      	ldr	r3, [pc, #212]	; (8002484 <MX_TIM5_Init+0x110>)
 80023b0:	4a35      	ldr	r2, [pc, #212]	; (8002488 <MX_TIM5_Init+0x114>)
 80023b2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80023b4:	4b33      	ldr	r3, [pc, #204]	; (8002484 <MX_TIM5_Init+0x110>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ba:	4b32      	ldr	r3, [pc, #200]	; (8002484 <MX_TIM5_Init+0x110>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80023c0:	4b30      	ldr	r3, [pc, #192]	; (8002484 <MX_TIM5_Init+0x110>)
 80023c2:	f04f 32ff 	mov.w	r2, #4294967295
 80023c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c8:	4b2e      	ldr	r3, [pc, #184]	; (8002484 <MX_TIM5_Init+0x110>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ce:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <MX_TIM5_Init+0x110>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80023d4:	482b      	ldr	r0, [pc, #172]	; (8002484 <MX_TIM5_Init+0x110>)
 80023d6:	f002 fac1 	bl	800495c <HAL_TIM_Base_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80023e0:	f7ff fc90 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80023ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023ee:	4619      	mov	r1, r3
 80023f0:	4824      	ldr	r0, [pc, #144]	; (8002484 <MX_TIM5_Init+0x110>)
 80023f2:	f002 ffa7 	bl	8005344 <HAL_TIM_ConfigClockSource>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80023fc:	f7ff fc82 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002400:	4820      	ldr	r0, [pc, #128]	; (8002484 <MX_TIM5_Init+0x110>)
 8002402:	f002 fc02 	bl	8004c0a <HAL_TIM_IC_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800240c:	f7ff fc7a 	bl	8001d04 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002410:	2304      	movs	r3, #4
 8002412:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002414:	2360      	movs	r3, #96	; 0x60
 8002416:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002418:	2300      	movs	r3, #0
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8002420:	f107 031c 	add.w	r3, r7, #28
 8002424:	4619      	mov	r1, r3
 8002426:	4817      	ldr	r0, [pc, #92]	; (8002484 <MX_TIM5_Init+0x110>)
 8002428:	f003 f850 	bl	80054cc <HAL_TIM_SlaveConfigSynchro>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM5_Init+0xc2>
  {
    Error_Handler();
 8002432:	f7ff fc67 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800243e:	f107 0314 	add.w	r3, r7, #20
 8002442:	4619      	mov	r1, r3
 8002444:	480f      	ldr	r0, [pc, #60]	; (8002484 <MX_TIM5_Init+0x110>)
 8002446:	f003 fcc3 	bl	8005dd0 <HAL_TIMEx_MasterConfigSynchronization>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM5_Init+0xe0>
  {
    Error_Handler();
 8002450:	f7ff fc58 	bl	8001d04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002454:	2300      	movs	r3, #0
 8002456:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002458:	2301      	movs	r3, #1
 800245a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	2204      	movs	r2, #4
 8002468:	4619      	mov	r1, r3
 800246a:	4806      	ldr	r0, [pc, #24]	; (8002484 <MX_TIM5_Init+0x110>)
 800246c:	f002 fed6 	bl	800521c <HAL_TIM_IC_ConfigChannel>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM5_Init+0x106>
  {
    Error_Handler();
 8002476:	f7ff fc45 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	3740      	adds	r7, #64	; 0x40
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000103c 	.word	0x2000103c
 8002488:	40000c00 	.word	0x40000c00

0800248c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08c      	sub	sp, #48	; 0x30
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 031c 	add.w	r3, r7, #28
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ac:	d15d      	bne.n	800256a <HAL_TIM_Base_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	4b6f      	ldr	r3, [pc, #444]	; (8002670 <HAL_TIM_Base_MspInit+0x1e4>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	4a6e      	ldr	r2, [pc, #440]	; (8002670 <HAL_TIM_Base_MspInit+0x1e4>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6413      	str	r3, [r2, #64]	; 0x40
 80024be:	4b6c      	ldr	r3, [pc, #432]	; (8002670 <HAL_TIM_Base_MspInit+0x1e4>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	4b68      	ldr	r3, [pc, #416]	; (8002670 <HAL_TIM_Base_MspInit+0x1e4>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	4a67      	ldr	r2, [pc, #412]	; (8002670 <HAL_TIM_Base_MspInit+0x1e4>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
 80024da:	4b65      	ldr	r3, [pc, #404]	; (8002670 <HAL_TIM_Base_MspInit+0x1e4>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024e6:	2320      	movs	r3, #32
 80024e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024f6:	2301      	movs	r3, #1
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fa:	f107 031c 	add.w	r3, r7, #28
 80024fe:	4619      	mov	r1, r3
 8002500:	485c      	ldr	r0, [pc, #368]	; (8002674 <HAL_TIM_Base_MspInit+0x1e8>)
 8002502:	f001 f8e5 	bl	80036d0 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002506:	4b5c      	ldr	r3, [pc, #368]	; (8002678 <HAL_TIM_Base_MspInit+0x1ec>)
 8002508:	4a5c      	ldr	r2, [pc, #368]	; (800267c <HAL_TIM_Base_MspInit+0x1f0>)
 800250a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 800250c:	4b5a      	ldr	r3, [pc, #360]	; (8002678 <HAL_TIM_Base_MspInit+0x1ec>)
 800250e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002512:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002514:	4b58      	ldr	r3, [pc, #352]	; (8002678 <HAL_TIM_Base_MspInit+0x1ec>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800251a:	4b57      	ldr	r3, [pc, #348]	; (8002678 <HAL_TIM_Base_MspInit+0x1ec>)
 800251c:	2200      	movs	r2, #0
 800251e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002520:	4b55      	ldr	r3, [pc, #340]	; (8002678 <HAL_TIM_Base_MspInit+0x1ec>)
 8002522:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002526:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_TIM_Base_MspInit+0x1ec>)
 800252a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800252e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002530:	4b51      	ldr	r3, [pc, #324]	; (8002678 <HAL_TIM_Base_MspInit+0x1ec>)
 8002532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002536:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002538:	4b4f      	ldr	r3, [pc, #316]	; (8002678 <HAL_TIM_Base_MspInit+0x1ec>)
 800253a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800253e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002540:	4b4d      	ldr	r3, [pc, #308]	; (8002678 <HAL_TIM_Base_MspInit+0x1ec>)
 8002542:	2200      	movs	r2, #0
 8002544:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002546:	4b4c      	ldr	r3, [pc, #304]	; (8002678 <HAL_TIM_Base_MspInit+0x1ec>)
 8002548:	2200      	movs	r2, #0
 800254a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800254c:	484a      	ldr	r0, [pc, #296]	; (8002678 <HAL_TIM_Base_MspInit+0x1ec>)
 800254e:	f000 fcbd 	bl	8002ecc <HAL_DMA_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8002558:	f7ff fbd4 	bl	8001d04 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a46      	ldr	r2, [pc, #280]	; (8002678 <HAL_TIM_Base_MspInit+0x1ec>)
 8002560:	625a      	str	r2, [r3, #36]	; 0x24
 8002562:	4a45      	ldr	r2, [pc, #276]	; (8002678 <HAL_TIM_Base_MspInit+0x1ec>)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002568:	e07d      	b.n	8002666 <HAL_TIM_Base_MspInit+0x1da>
  else if(tim_baseHandle->Instance==TIM3)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a44      	ldr	r2, [pc, #272]	; (8002680 <HAL_TIM_Base_MspInit+0x1f4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d116      	bne.n	80025a2 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <HAL_TIM_Base_MspInit+0x1e4>)
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	4a3c      	ldr	r2, [pc, #240]	; (8002670 <HAL_TIM_Base_MspInit+0x1e4>)
 800257e:	f043 0302 	orr.w	r3, r3, #2
 8002582:	6413      	str	r3, [r2, #64]	; 0x40
 8002584:	4b3a      	ldr	r3, [pc, #232]	; (8002670 <HAL_TIM_Base_MspInit+0x1e4>)
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8002590:	2200      	movs	r2, #0
 8002592:	2102      	movs	r1, #2
 8002594:	201d      	movs	r0, #29
 8002596:	f000 fc62 	bl	8002e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800259a:	201d      	movs	r0, #29
 800259c:	f000 fc7b 	bl	8002e96 <HAL_NVIC_EnableIRQ>
}
 80025a0:	e061      	b.n	8002666 <HAL_TIM_Base_MspInit+0x1da>
  else if(tim_baseHandle->Instance==TIM5)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a37      	ldr	r2, [pc, #220]	; (8002684 <HAL_TIM_Base_MspInit+0x1f8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d15c      	bne.n	8002666 <HAL_TIM_Base_MspInit+0x1da>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	4b2f      	ldr	r3, [pc, #188]	; (8002670 <HAL_TIM_Base_MspInit+0x1e4>)
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	4a2e      	ldr	r2, [pc, #184]	; (8002670 <HAL_TIM_Base_MspInit+0x1e4>)
 80025b6:	f043 0308 	orr.w	r3, r3, #8
 80025ba:	6413      	str	r3, [r2, #64]	; 0x40
 80025bc:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <HAL_TIM_Base_MspInit+0x1e4>)
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	4b28      	ldr	r3, [pc, #160]	; (8002670 <HAL_TIM_Base_MspInit+0x1e4>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	4a27      	ldr	r2, [pc, #156]	; (8002670 <HAL_TIM_Base_MspInit+0x1e4>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6313      	str	r3, [r2, #48]	; 0x30
 80025d8:	4b25      	ldr	r3, [pc, #148]	; (8002670 <HAL_TIM_Base_MspInit+0x1e4>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025e4:	2302      	movs	r3, #2
 80025e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f0:	2300      	movs	r3, #0
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80025f4:	2302      	movs	r3, #2
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f8:	f107 031c 	add.w	r3, r7, #28
 80025fc:	4619      	mov	r1, r3
 80025fe:	481d      	ldr	r0, [pc, #116]	; (8002674 <HAL_TIM_Base_MspInit+0x1e8>)
 8002600:	f001 f866 	bl	80036d0 <HAL_GPIO_Init>
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8002604:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_TIM_Base_MspInit+0x1fc>)
 8002606:	4a21      	ldr	r2, [pc, #132]	; (800268c <HAL_TIM_Base_MspInit+0x200>)
 8002608:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 800260a:	4b1f      	ldr	r3, [pc, #124]	; (8002688 <HAL_TIM_Base_MspInit+0x1fc>)
 800260c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002610:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_TIM_Base_MspInit+0x1fc>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_TIM_Base_MspInit+0x1fc>)
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800261e:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <HAL_TIM_Base_MspInit+0x1fc>)
 8002620:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002624:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <HAL_TIM_Base_MspInit+0x1fc>)
 8002628:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800262c:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800262e:	4b16      	ldr	r3, [pc, #88]	; (8002688 <HAL_TIM_Base_MspInit+0x1fc>)
 8002630:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002634:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_CIRCULAR;
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <HAL_TIM_Base_MspInit+0x1fc>)
 8002638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800263c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_TIM_Base_MspInit+0x1fc>)
 8002640:	2200      	movs	r2, #0
 8002642:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_TIM_Base_MspInit+0x1fc>)
 8002646:	2200      	movs	r2, #0
 8002648:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 800264a:	480f      	ldr	r0, [pc, #60]	; (8002688 <HAL_TIM_Base_MspInit+0x1fc>)
 800264c:	f000 fc3e 	bl	8002ecc <HAL_DMA_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_TIM_Base_MspInit+0x1ce>
      Error_Handler();
 8002656:	f7ff fb55 	bl	8001d04 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <HAL_TIM_Base_MspInit+0x1fc>)
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
 8002660:	4a09      	ldr	r2, [pc, #36]	; (8002688 <HAL_TIM_Base_MspInit+0x1fc>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002666:	bf00      	nop
 8002668:	3730      	adds	r7, #48	; 0x30
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800
 8002674:	40020000 	.word	0x40020000
 8002678:	20000fdc 	.word	0x20000fdc
 800267c:	40026088 	.word	0x40026088
 8002680:	40000400 	.word	0x40000400
 8002684:	40000c00 	.word	0x40000c00
 8002688:	200010cc 	.word	0x200010cc
 800268c:	40026070 	.word	0x40026070

08002690 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <MX_USART1_UART_Init+0x50>)
 8002698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 800269c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80026a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 80026b6:	220c      	movs	r2, #12
 80026b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026c6:	4805      	ldr	r0, [pc, #20]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 80026c8:	f003 fc12 	bl	8005ef0 <HAL_UART_Init>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026d2:	f7ff fb17 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200011d4 	.word	0x200011d4
 80026e0:	40011000 	.word	0x40011000

080026e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <MX_USART2_UART_Init+0x50>)
 80026ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 80026f0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80026f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 800270a:	220c      	movs	r2, #12
 800270c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 8002716:	2200      	movs	r2, #0
 8002718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800271a:	4805      	ldr	r0, [pc, #20]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 800271c:	f003 fbe8 	bl	8005ef0 <HAL_UART_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002726:	f7ff faed 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20001218 	.word	0x20001218
 8002734:	40004400 	.word	0x40004400

08002738 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08c      	sub	sp, #48	; 0x30
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 031c 	add.w	r3, r7, #28
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a4d      	ldr	r2, [pc, #308]	; (800288c <HAL_UART_MspInit+0x154>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d135      	bne.n	80027c6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <HAL_UART_MspInit+0x158>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a4b      	ldr	r2, [pc, #300]	; (8002890 <HAL_UART_MspInit+0x158>)
 8002764:	f043 0310 	orr.w	r3, r3, #16
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b49      	ldr	r3, [pc, #292]	; (8002890 <HAL_UART_MspInit+0x158>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	4b45      	ldr	r3, [pc, #276]	; (8002890 <HAL_UART_MspInit+0x158>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a44      	ldr	r2, [pc, #272]	; (8002890 <HAL_UART_MspInit+0x158>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b42      	ldr	r3, [pc, #264]	; (8002890 <HAL_UART_MspInit+0x158>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002792:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a0:	2303      	movs	r3, #3
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027a4:	2307      	movs	r3, #7
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a8:	f107 031c 	add.w	r3, r7, #28
 80027ac:	4619      	mov	r1, r3
 80027ae:	4839      	ldr	r0, [pc, #228]	; (8002894 <HAL_UART_MspInit+0x15c>)
 80027b0:	f000 ff8e 	bl	80036d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027b4:	2200      	movs	r2, #0
 80027b6:	2100      	movs	r1, #0
 80027b8:	2025      	movs	r0, #37	; 0x25
 80027ba:	f000 fb50 	bl	8002e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027be:	2025      	movs	r0, #37	; 0x25
 80027c0:	f000 fb69 	bl	8002e96 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80027c4:	e05e      	b.n	8002884 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a33      	ldr	r2, [pc, #204]	; (8002898 <HAL_UART_MspInit+0x160>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d159      	bne.n	8002884 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <HAL_UART_MspInit+0x158>)
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	4a2d      	ldr	r2, [pc, #180]	; (8002890 <HAL_UART_MspInit+0x158>)
 80027da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027de:	6413      	str	r3, [r2, #64]	; 0x40
 80027e0:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <HAL_UART_MspInit+0x158>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	4b27      	ldr	r3, [pc, #156]	; (8002890 <HAL_UART_MspInit+0x158>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	4a26      	ldr	r2, [pc, #152]	; (8002890 <HAL_UART_MspInit+0x158>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6313      	str	r3, [r2, #48]	; 0x30
 80027fc:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_UART_MspInit+0x158>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002808:	230c      	movs	r3, #12
 800280a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002814:	2303      	movs	r3, #3
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002818:	2307      	movs	r3, #7
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281c:	f107 031c 	add.w	r3, r7, #28
 8002820:	4619      	mov	r1, r3
 8002822:	481c      	ldr	r0, [pc, #112]	; (8002894 <HAL_UART_MspInit+0x15c>)
 8002824:	f000 ff54 	bl	80036d0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002828:	4b1c      	ldr	r3, [pc, #112]	; (800289c <HAL_UART_MspInit+0x164>)
 800282a:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <HAL_UART_MspInit+0x168>)
 800282c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800282e:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_UART_MspInit+0x164>)
 8002830:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002834:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002836:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_UART_MspInit+0x164>)
 8002838:	2240      	movs	r2, #64	; 0x40
 800283a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800283c:	4b17      	ldr	r3, [pc, #92]	; (800289c <HAL_UART_MspInit+0x164>)
 800283e:	2200      	movs	r2, #0
 8002840:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002842:	4b16      	ldr	r3, [pc, #88]	; (800289c <HAL_UART_MspInit+0x164>)
 8002844:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002848:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <HAL_UART_MspInit+0x164>)
 800284c:	2200      	movs	r2, #0
 800284e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_UART_MspInit+0x164>)
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_UART_MspInit+0x164>)
 8002858:	2200      	movs	r2, #0
 800285a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <HAL_UART_MspInit+0x164>)
 800285e:	2200      	movs	r2, #0
 8002860:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <HAL_UART_MspInit+0x164>)
 8002864:	2200      	movs	r2, #0
 8002866:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002868:	480c      	ldr	r0, [pc, #48]	; (800289c <HAL_UART_MspInit+0x164>)
 800286a:	f000 fb2f 	bl	8002ecc <HAL_DMA_Init>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8002874:	f7ff fa46 	bl	8001d04 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a08      	ldr	r2, [pc, #32]	; (800289c <HAL_UART_MspInit+0x164>)
 800287c:	635a      	str	r2, [r3, #52]	; 0x34
 800287e:	4a07      	ldr	r2, [pc, #28]	; (800289c <HAL_UART_MspInit+0x164>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002884:	bf00      	nop
 8002886:	3730      	adds	r7, #48	; 0x30
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40011000 	.word	0x40011000
 8002890:	40023800 	.word	0x40023800
 8002894:	40020000 	.word	0x40020000
 8002898:	40004400 	.word	0x40004400
 800289c:	20001174 	.word	0x20001174
 80028a0:	400260a0 	.word	0x400260a0

080028a4 <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit_IT(&huart2, (uint8_t*)&ch, 1);
 80028ac:	1d3b      	adds	r3, r7, #4
 80028ae:	2201      	movs	r2, #1
 80028b0:	4619      	mov	r1, r3
 80028b2:	4804      	ldr	r0, [pc, #16]	; (80028c4 <__io_putchar+0x20>)
 80028b4:	f003 fb69 	bl	8005f8a <HAL_UART_Transmit_IT>
  return ch;
 80028b8:	687b      	ldr	r3, [r7, #4]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20001218 	.word	0x20001218

080028c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002900 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028cc:	480d      	ldr	r0, [pc, #52]	; (8002904 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028ce:	490e      	ldr	r1, [pc, #56]	; (8002908 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028d0:	4a0e      	ldr	r2, [pc, #56]	; (800290c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028d4:	e002      	b.n	80028dc <LoopCopyDataInit>

080028d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028da:	3304      	adds	r3, #4

080028dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028e0:	d3f9      	bcc.n	80028d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028e2:	4a0b      	ldr	r2, [pc, #44]	; (8002910 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028e4:	4c0b      	ldr	r4, [pc, #44]	; (8002914 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e8:	e001      	b.n	80028ee <LoopFillZerobss>

080028ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028ec:	3204      	adds	r2, #4

080028ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028f0:	d3fb      	bcc.n	80028ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028f2:	f7ff fc55 	bl	80021a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028f6:	f004 f9df 	bl	8006cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028fa:	f7fe fc95 	bl	8001228 <main>
  bx  lr    
 80028fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002900:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002908:	20000614 	.word	0x20000614
  ldr r2, =_sidata
 800290c:	0800ba64 	.word	0x0800ba64
  ldr r2, =_sbss
 8002910:	20000614 	.word	0x20000614
  ldr r4, =_ebss
 8002914:	20001270 	.word	0x20001270

08002918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002918:	e7fe      	b.n	8002918 <ADC_IRQHandler>

0800291a <ADS8688_Init>:
#include "ADS8688.h"

/*
 * INITIALISATION
 */
uint8_t ADS8688_Init(ADS8688 *ads, SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *csPinBank, uint16_t csPin) {
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	807b      	strh	r3, [r7, #2]
/* Store interface parameters in struct */
	ads->spiHandle 		= spiHandle;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	601a      	str	r2, [r3, #0]
	ads->csPinBank 	= csPinBank;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	605a      	str	r2, [r3, #4]
	ads->csPin 		= csPin;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	887a      	ldrh	r2, [r7, #2]
 8002938:	811a      	strh	r2, [r3, #8]

	uint8_t ads_data[2] = {0};
 800293a:	2300      	movs	r3, #0
 800293c:	82bb      	strh	r3, [r7, #20]
	uint8_t state = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	75fb      	strb	r3, [r7, #23]
	// reset all registers to default
	state += ADS_Cmd_Write(ads, RST, ads_data);
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	461a      	mov	r2, r3
 8002948:	2185      	movs	r1, #133	; 0x85
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f8b8 	bl	8002ac0 <ADS_Cmd_Write>
 8002950:	4603      	mov	r3, r0
 8002952:	461a      	mov	r2, r3
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	4413      	add	r3, r2
 8002958:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 800295a:	2064      	movs	r0, #100	; 0x64
 800295c:	f000 f980 	bl	8002c60 <HAL_Delay>
	// send a no_op message to the ADS to enter IDLE mode
	state += ADS_Cmd_Write(ads, NO_OP, ads_data);
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	461a      	mov	r2, r3
 8002966:	2100      	movs	r1, #0
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 f8a9 	bl	8002ac0 <ADS_Cmd_Write>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	7dfb      	ldrb	r3, [r7, #23]
 8002974:	4413      	add	r3, r2
 8002976:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8002978:	200a      	movs	r0, #10
 800297a:	f000 f971 	bl	8002c60 <HAL_Delay>
	// enable auto transmit for all inputs(datasheet page 54) or as many as you want
	// if you want only some of the inputs enabled, make sure to power down the unused ones
	ads_data[0] = 0x03;
 800297e:	2303      	movs	r3, #3
 8002980:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, AUTO_SEQ_EN, ads_data);
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	461a      	mov	r2, r3
 8002988:	2101      	movs	r1, #1
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f85d 	bl	8002a4a <ADS_Prog_Write>
 8002990:	4603      	mov	r3, r0
 8002992:	461a      	mov	r2, r3
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	4413      	add	r3, r2
 8002998:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800299a:	200a      	movs	r0, #10
 800299c:	f000 f960 	bl	8002c60 <HAL_Delay>
	// set the desired features such as device id (if multiple devices are used), alarm enable/disable and output format
	ads_data[0] = 0x03; // here i chose id = 0, alarm = disabled and SDO_format = 3 (datasheet page 56)
 80029a0:	2303      	movs	r3, #3
 80029a2:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, F_S, ads_data);
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	461a      	mov	r2, r3
 80029aa:	2103      	movs	r1, #3
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f84c 	bl	8002a4a <ADS_Prog_Write>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461a      	mov	r2, r3
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	4413      	add	r3, r2
 80029ba:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80029bc:	200a      	movs	r0, #10
 80029be:	f000 f94f 	bl	8002c60 <HAL_Delay>
	// set all channels ranges(page 57)
	// 0x05 -> Input range is set to 0 to 2.5 x VREF (for VREF=5 volts, this means 0-10 volts range)
	// 0x06 -> Input range is set to 0 to 1.25 x VREF (for VREF=5 volts, this means 0-5 volts range)
	ads_data[0] = IR_5V;
 80029c2:	2301      	movs	r3, #1
 80029c4:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHIR_0, ads_data);
 80029c6:	f107 0314 	add.w	r3, r7, #20
 80029ca:	461a      	mov	r2, r3
 80029cc:	2105      	movs	r1, #5
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f83b 	bl	8002a4a <ADS_Prog_Write>
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
 80029da:	4413      	add	r3, r2
 80029dc:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80029de:	200a      	movs	r0, #10
 80029e0:	f000 f93e 	bl	8002c60 <HAL_Delay>
	ads_data[0] = IR_5V;
 80029e4:	2301      	movs	r3, #1
 80029e6:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHIR_1, ads_data);
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	461a      	mov	r2, r3
 80029ee:	2106      	movs	r1, #6
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f82a 	bl	8002a4a <ADS_Prog_Write>
 80029f6:	4603      	mov	r3, r0
 80029f8:	461a      	mov	r2, r3
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
 80029fc:	4413      	add	r3, r2
 80029fe:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8002a00:	200a      	movs	r0, #10
 8002a02:	f000 f92d 	bl	8002c60 <HAL_Delay>
	ads_data[0] = 0xfc;
 8002a06:	23fc      	movs	r3, #252	; 0xfc
 8002a08:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CH_PD, ads_data);
 8002a0a:	f107 0314 	add.w	r3, r7, #20
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2102      	movs	r1, #2
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f819 	bl	8002a4a <ADS_Prog_Write>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	7dfb      	ldrb	r3, [r7, #23]
 8002a1e:	4413      	add	r3, r2
 8002a20:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8002a22:	200a      	movs	r0, #10
 8002a24:	f000 f91c 	bl	8002c60 <HAL_Delay>
	// start the auto transmission by entering the appropriate state
	state += ADS_Cmd_Write(ads, AUTO_RST, ads_data);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	21a0      	movs	r1, #160	; 0xa0
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f845 	bl	8002ac0 <ADS_Cmd_Write>
 8002a36:	4603      	mov	r3, r0
 8002a38:	461a      	mov	r2, r3
 8002a3a:	7dfb      	ldrb	r3, [r7, #23]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	75fb      	strb	r3, [r7, #23]

	return state;
 8002a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <ADS_Prog_Write>:
	data[1] = rxbuf[3];
	return ret;
}

// after the write, data should contain the data (byte) written to the addressed register (check equality for evaluation)
HAL_StatusTypeDef ADS_Prog_Write(ADS8688 *ads, uint8_t addr, uint8_t *data) {
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b088      	sub	sp, #32
 8002a4e:	af02      	add	r7, sp, #8
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	460b      	mov	r3, r1
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;
	uint8_t txbuf[2] = {data[0], (addr << 1 | 0x01)}; // [15:9]->address[6:0], [8]->1, [7:0]->data[7:0] (stm32 uses little endian so reverse it)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	753b      	strb	r3, [r7, #20]
 8002a5e:	7afb      	ldrb	r3, [r7, #11]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	b25b      	sxtb	r3, r3
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	b25b      	sxtb	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	757b      	strb	r3, [r7, #21]
	uint8_t rxbuf[4];

	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_RESET);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6858      	ldr	r0, [r3, #4]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	891b      	ldrh	r3, [r3, #8]
 8002a76:	2200      	movs	r2, #0
 8002a78:	4619      	mov	r1, r3
 8002a7a:	f000 ffc5 	bl	8003a08 <HAL_GPIO_WritePin>
	ret = HAL_SPI_TransmitReceive(ads->spiHandle, txbuf, rxbuf, 2, 10);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	f107 0210 	add.w	r2, r7, #16
 8002a86:	f107 0114 	add.w	r1, r7, #20
 8002a8a:	230a      	movs	r3, #10
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2302      	movs	r3, #2
 8002a90:	f001 fcf8 	bl	8004484 <HAL_SPI_TransmitReceive>
 8002a94:	4603      	mov	r3, r0
 8002a96:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_SET);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6858      	ldr	r0, [r3, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	891b      	ldrh	r3, [r3, #8]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f000 ffb0 	bl	8003a08 <HAL_GPIO_WritePin>

	data[0] = rxbuf[3];
 8002aa8:	7cfa      	ldrb	r2, [r7, #19]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
	return ret;
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <ADS_Cmd_Write>:

HAL_StatusTypeDef ADS_Cmd_Write(ADS8688 *ads, uint8_t cmd, uint8_t *data) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;
	uint8_t txbuf[2] = {0x00,cmd}; // [15:9]->address[6:0], [8]->1, [7:0]->data[7:0] (stm32 uses little endian so reverse it)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	753b      	strb	r3, [r7, #20]
 8002ad2:	7afb      	ldrb	r3, [r7, #11]
 8002ad4:	757b      	strb	r3, [r7, #21]
	uint8_t rxbuf[4];

	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_RESET);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6858      	ldr	r0, [r3, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	891b      	ldrh	r3, [r3, #8]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f000 ff91 	bl	8003a08 <HAL_GPIO_WritePin>
	ret = HAL_SPI_TransmitReceive(ads->spiHandle, txbuf, rxbuf, 2, 10);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	f107 0210 	add.w	r2, r7, #16
 8002aee:	f107 0114 	add.w	r1, r7, #20
 8002af2:	230a      	movs	r3, #10
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	2302      	movs	r3, #2
 8002af8:	f001 fcc4 	bl	8004484 <HAL_SPI_TransmitReceive>
 8002afc:	4603      	mov	r3, r0
 8002afe:	75fb      	strb	r3, [r7, #23]
	//ret = HAL_SPI_TransmitReceive_DMA(ads->spiHandle, txbuf, rxbuf, 2);
	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_SET);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6858      	ldr	r0, [r3, #4]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	891b      	ldrh	r3, [r3, #8]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f000 ff7c 	bl	8003a08 <HAL_GPIO_WritePin>

	data[0] = rxbuf[2];
 8002b10:	7cba      	ldrb	r2, [r7, #18]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	701a      	strb	r2, [r3, #0]
	data[1] = rxbuf[3];
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	7cfa      	ldrb	r2, [r7, #19]
 8002b1c:	701a      	strb	r2, [r3, #0]
	return ret;
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <ADS_Read_All_Raw>:

HAL_StatusTypeDef ADS_Read_All_Raw(ADS8688 *ads, uint16_t *data) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;
	uint8_t ads_raw[2];
	for(int i=0; i<CHNS_NUM_READ; i++) {
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	e018      	b.n	8002b6a <ADS_Read_All_Raw+0x42>
	  ret = ADS_Cmd_Write(ads, NO_OP, ads_raw);
 8002b38:	f107 030c 	add.w	r3, r7, #12
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2100      	movs	r1, #0
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff ffbd 	bl	8002ac0 <ADS_Cmd_Write>
 8002b46:	4603      	mov	r3, r0
 8002b48:	75fb      	strb	r3, [r7, #23]
	  data[i] = (int)((uint16_t)(ads_raw[1]<<8 | ads_raw[0]));
 8002b4a:	7b7b      	ldrb	r3, [r7, #13]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	b21a      	sxth	r2, r3
 8002b50:	7b3b      	ldrb	r3, [r7, #12]
 8002b52:	b21b      	sxth	r3, r3
 8002b54:	4313      	orrs	r3, r2
 8002b56:	b219      	sxth	r1, r3
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	4413      	add	r3, r2
 8002b60:	b28a      	uxth	r2, r1
 8002b62:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<CHNS_NUM_READ; i++) {
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	3301      	adds	r3, #1
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	dde3      	ble.n	8002b38 <ADS_Read_All_Raw+0x10>
	}
	return ret;
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b80:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <HAL_Init+0x40>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <HAL_Init+0x40>)
 8002b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_Init+0x40>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <HAL_Init+0x40>)
 8002b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b98:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <HAL_Init+0x40>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a07      	ldr	r2, [pc, #28]	; (8002bbc <HAL_Init+0x40>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba4:	2003      	movs	r0, #3
 8002ba6:	f000 f94f 	bl	8002e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f000 f808 	bl	8002bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb0:	f7ff f930 	bl	8001e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023c00 	.word	0x40023c00

08002bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bc8:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_InitTick+0x54>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_InitTick+0x58>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f967 	bl	8002eb2 <HAL_SYSTICK_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00e      	b.n	8002c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b0f      	cmp	r3, #15
 8002bf2:	d80a      	bhi.n	8002c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f000 f92f 	bl	8002e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c00:	4a06      	ldr	r2, [pc, #24]	; (8002c1c <HAL_InitTick+0x5c>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20000434 	.word	0x20000434
 8002c18:	2000043c 	.word	0x2000043c
 8002c1c:	20000438 	.word	0x20000438

08002c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_IncTick+0x20>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_IncTick+0x24>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4413      	add	r3, r2
 8002c30:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <HAL_IncTick+0x24>)
 8002c32:	6013      	str	r3, [r2, #0]
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	2000043c 	.word	0x2000043c
 8002c44:	2000125c 	.word	0x2000125c

08002c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_GetTick+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	2000125c 	.word	0x2000125c

08002c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c68:	f7ff ffee 	bl	8002c48 <HAL_GetTick>
 8002c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d005      	beq.n	8002c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_Delay+0x44>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c86:	bf00      	nop
 8002c88:	f7ff ffde 	bl	8002c48 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d8f7      	bhi.n	8002c88 <HAL_Delay+0x28>
  {
  }
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	2000043c 	.word	0x2000043c

08002ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <__NVIC_SetPriorityGrouping+0x44>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cda:	4a04      	ldr	r2, [pc, #16]	; (8002cec <__NVIC_SetPriorityGrouping+0x44>)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	60d3      	str	r3, [r2, #12]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	f003 0307 	and.w	r3, r3, #7
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	db0b      	blt.n	8002d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	f003 021f 	and.w	r2, r3, #31
 8002d24:	4907      	ldr	r1, [pc, #28]	; (8002d44 <__NVIC_EnableIRQ+0x38>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000e100 	.word	0xe000e100

08002d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	6039      	str	r1, [r7, #0]
 8002d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	db0a      	blt.n	8002d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	490c      	ldr	r1, [pc, #48]	; (8002d94 <__NVIC_SetPriority+0x4c>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	0112      	lsls	r2, r2, #4
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d70:	e00a      	b.n	8002d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4908      	ldr	r1, [pc, #32]	; (8002d98 <__NVIC_SetPriority+0x50>)
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	3b04      	subs	r3, #4
 8002d80:	0112      	lsls	r2, r2, #4
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	440b      	add	r3, r1
 8002d86:	761a      	strb	r2, [r3, #24]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000e100 	.word	0xe000e100
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b089      	sub	sp, #36	; 0x24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f1c3 0307 	rsb	r3, r3, #7
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	bf28      	it	cs
 8002dba:	2304      	movcs	r3, #4
 8002dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d902      	bls.n	8002dcc <NVIC_EncodePriority+0x30>
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3b03      	subs	r3, #3
 8002dca:	e000      	b.n	8002dce <NVIC_EncodePriority+0x32>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	401a      	ands	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de4:	f04f 31ff 	mov.w	r1, #4294967295
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	43d9      	mvns	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	4313      	orrs	r3, r2
         );
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3724      	adds	r7, #36	; 0x24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e14:	d301      	bcc.n	8002e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e16:	2301      	movs	r3, #1
 8002e18:	e00f      	b.n	8002e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <SysTick_Config+0x40>)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e22:	210f      	movs	r1, #15
 8002e24:	f04f 30ff 	mov.w	r0, #4294967295
 8002e28:	f7ff ff8e 	bl	8002d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <SysTick_Config+0x40>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e32:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <SysTick_Config+0x40>)
 8002e34:	2207      	movs	r2, #7
 8002e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	e000e010 	.word	0xe000e010

08002e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7ff ff29 	bl	8002ca8 <__NVIC_SetPriorityGrouping>
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b086      	sub	sp, #24
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	4603      	mov	r3, r0
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e70:	f7ff ff3e 	bl	8002cf0 <__NVIC_GetPriorityGrouping>
 8002e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	6978      	ldr	r0, [r7, #20]
 8002e7c:	f7ff ff8e 	bl	8002d9c <NVIC_EncodePriority>
 8002e80:	4602      	mov	r2, r0
 8002e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff5d 	bl	8002d48 <__NVIC_SetPriority>
}
 8002e8e:	bf00      	nop
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff31 	bl	8002d0c <__NVIC_EnableIRQ>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ffa2 	bl	8002e04 <SysTick_Config>
 8002ec0:	4603      	mov	r3, r0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ed8:	f7ff feb6 	bl	8002c48 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e099      	b.n	800301c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f08:	e00f      	b.n	8002f2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f0a:	f7ff fe9d 	bl	8002c48 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b05      	cmp	r3, #5
 8002f16:	d908      	bls.n	8002f2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2203      	movs	r2, #3
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e078      	b.n	800301c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e8      	bne.n	8002f0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4b38      	ldr	r3, [pc, #224]	; (8003024 <HAL_DMA_Init+0x158>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d107      	bne.n	8002f94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f023 0307 	bic.w	r3, r3, #7
 8002faa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d117      	bne.n	8002fee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00e      	beq.n	8002fee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fb01 	bl	80035d8 <DMA_CheckFifoParam>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2240      	movs	r2, #64	; 0x40
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fea:	2301      	movs	r3, #1
 8002fec:	e016      	b.n	800301c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fab8 	bl	800356c <DMA_CalcBaseAndBitshift>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003004:	223f      	movs	r2, #63	; 0x3f
 8003006:	409a      	lsls	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	f010803f 	.word	0xf010803f

08003028 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_DMA_Start_IT+0x26>
 800304a:	2302      	movs	r3, #2
 800304c:	e040      	b.n	80030d0 <HAL_DMA_Start_IT+0xa8>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b01      	cmp	r3, #1
 8003060:	d12f      	bne.n	80030c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2202      	movs	r2, #2
 8003066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 fa4a 	bl	8003510 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003080:	223f      	movs	r2, #63	; 0x3f
 8003082:	409a      	lsls	r2, r3
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0216 	orr.w	r2, r2, #22
 8003096:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0208 	orr.w	r2, r2, #8
 80030ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e005      	b.n	80030ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030ca:	2302      	movs	r3, #2
 80030cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030e6:	f7ff fdaf 	bl	8002c48 <HAL_GetTick>
 80030ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d008      	beq.n	800310a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2280      	movs	r2, #128	; 0x80
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e052      	b.n	80031b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0216 	bic.w	r2, r2, #22
 8003118:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003128:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d103      	bne.n	800313a <HAL_DMA_Abort+0x62>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0208 	bic.w	r2, r2, #8
 8003148:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800315a:	e013      	b.n	8003184 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800315c:	f7ff fd74 	bl	8002c48 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b05      	cmp	r3, #5
 8003168:	d90c      	bls.n	8003184 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2203      	movs	r2, #3
 800317c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e015      	b.n	80031b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1e4      	bne.n	800315c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003196:	223f      	movs	r2, #63	; 0x3f
 8003198:	409a      	lsls	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d004      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2280      	movs	r2, #128	; 0x80
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e00c      	b.n	80031f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2205      	movs	r2, #5
 80031da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003208:	4b92      	ldr	r3, [pc, #584]	; (8003454 <HAL_DMA_IRQHandler+0x258>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a92      	ldr	r2, [pc, #584]	; (8003458 <HAL_DMA_IRQHandler+0x25c>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	0a9b      	lsrs	r3, r3, #10
 8003214:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	2208      	movs	r2, #8
 8003228:	409a      	lsls	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01a      	beq.n	8003268 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0204 	bic.w	r2, r2, #4
 800324e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	2208      	movs	r2, #8
 8003256:	409a      	lsls	r2, r3
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	2201      	movs	r2, #1
 800326e:	409a      	lsls	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d012      	beq.n	800329e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	2201      	movs	r2, #1
 800328c:	409a      	lsls	r2, r3
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003296:	f043 0202 	orr.w	r2, r3, #2
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	2204      	movs	r2, #4
 80032a4:	409a      	lsls	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d012      	beq.n	80032d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c0:	2204      	movs	r2, #4
 80032c2:	409a      	lsls	r2, r3
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	f043 0204 	orr.w	r2, r3, #4
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	2210      	movs	r2, #16
 80032da:	409a      	lsls	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d043      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d03c      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	2210      	movs	r2, #16
 80032f8:	409a      	lsls	r2, r3
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d018      	beq.n	800333e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d108      	bne.n	800332c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d024      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4798      	blx	r3
 800332a:	e01f      	b.n	800336c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01b      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
 800333c:	e016      	b.n	800336c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0208 	bic.w	r2, r2, #8
 800335a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003370:	2220      	movs	r2, #32
 8003372:	409a      	lsls	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 808e 	beq.w	800349a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8086 	beq.w	800349a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	2220      	movs	r2, #32
 8003394:	409a      	lsls	r2, r3
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	d136      	bne.n	8003414 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0216 	bic.w	r2, r2, #22
 80033b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d103      	bne.n	80033d6 <HAL_DMA_IRQHandler+0x1da>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d007      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0208 	bic.w	r2, r2, #8
 80033e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	223f      	movs	r2, #63	; 0x3f
 80033ec:	409a      	lsls	r2, r3
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003406:	2b00      	cmp	r3, #0
 8003408:	d07d      	beq.n	8003506 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4798      	blx	r3
        }
        return;
 8003412:	e078      	b.n	8003506 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d01c      	beq.n	800345c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d108      	bne.n	8003442 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003434:	2b00      	cmp	r3, #0
 8003436:	d030      	beq.n	800349a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
 8003440:	e02b      	b.n	800349a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d027      	beq.n	800349a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
 8003452:	e022      	b.n	800349a <HAL_DMA_IRQHandler+0x29e>
 8003454:	20000434 	.word	0x20000434
 8003458:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10f      	bne.n	800348a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0210 	bic.w	r2, r2, #16
 8003478:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d032      	beq.n	8003508 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d022      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2205      	movs	r2, #5
 80034b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	3301      	adds	r3, #1
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d307      	bcc.n	80034e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f2      	bne.n	80034c6 <HAL_DMA_IRQHandler+0x2ca>
 80034e0:	e000      	b.n	80034e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80034e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	4798      	blx	r3
 8003504:	e000      	b.n	8003508 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003506:	bf00      	nop
    }
  }
}
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop

08003510 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800352c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b40      	cmp	r3, #64	; 0x40
 800353c:	d108      	bne.n	8003550 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800354e:	e007      	b.n	8003560 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	60da      	str	r2, [r3, #12]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	3b10      	subs	r3, #16
 800357c:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <DMA_CalcBaseAndBitshift+0x64>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003586:	4a13      	ldr	r2, [pc, #76]	; (80035d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b03      	cmp	r3, #3
 8003598:	d909      	bls.n	80035ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035a2:	f023 0303 	bic.w	r3, r3, #3
 80035a6:	1d1a      	adds	r2, r3, #4
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	659a      	str	r2, [r3, #88]	; 0x58
 80035ac:	e007      	b.n	80035be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	aaaaaaab 	.word	0xaaaaaaab
 80035d4:	0800b598 	.word	0x0800b598

080035d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d11f      	bne.n	8003632 <DMA_CheckFifoParam+0x5a>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d856      	bhi.n	80036a6 <DMA_CheckFifoParam+0xce>
 80035f8:	a201      	add	r2, pc, #4	; (adr r2, 8003600 <DMA_CheckFifoParam+0x28>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003611 	.word	0x08003611
 8003604:	08003623 	.word	0x08003623
 8003608:	08003611 	.word	0x08003611
 800360c:	080036a7 	.word	0x080036a7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d046      	beq.n	80036aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003620:	e043      	b.n	80036aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800362a:	d140      	bne.n	80036ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003630:	e03d      	b.n	80036ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363a:	d121      	bne.n	8003680 <DMA_CheckFifoParam+0xa8>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b03      	cmp	r3, #3
 8003640:	d837      	bhi.n	80036b2 <DMA_CheckFifoParam+0xda>
 8003642:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <DMA_CheckFifoParam+0x70>)
 8003644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003648:	08003659 	.word	0x08003659
 800364c:	0800365f 	.word	0x0800365f
 8003650:	08003659 	.word	0x08003659
 8003654:	08003671 	.word	0x08003671
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      break;
 800365c:	e030      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d025      	beq.n	80036b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366e:	e022      	b.n	80036b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003678:	d11f      	bne.n	80036ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800367e:	e01c      	b.n	80036ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d903      	bls.n	800368e <DMA_CheckFifoParam+0xb6>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b03      	cmp	r3, #3
 800368a:	d003      	beq.n	8003694 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800368c:	e018      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
      break;
 8003692:	e015      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00e      	beq.n	80036be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      break;
 80036a4:	e00b      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      break;
 80036a6:	bf00      	nop
 80036a8:	e00a      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;
 80036aa:	bf00      	nop
 80036ac:	e008      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ae:	bf00      	nop
 80036b0:	e006      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;
 80036b2:	bf00      	nop
 80036b4:	e004      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;
 80036b6:	bf00      	nop
 80036b8:	e002      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80036ba:	bf00      	nop
 80036bc:	e000      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;
 80036be:	bf00      	nop
    }
  } 
  
  return status; 
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop

080036d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b089      	sub	sp, #36	; 0x24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
 80036ea:	e16b      	b.n	80039c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036ec:	2201      	movs	r2, #1
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4013      	ands	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	429a      	cmp	r2, r3
 8003706:	f040 815a 	bne.w	80039be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d005      	beq.n	8003722 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800371e:	2b02      	cmp	r3, #2
 8003720:	d130      	bne.n	8003784 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	2203      	movs	r2, #3
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4013      	ands	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003758:	2201      	movs	r2, #1
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	f003 0201 	and.w	r2, r3, #1
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b03      	cmp	r3, #3
 800378e:	d017      	beq.n	80037c0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	2203      	movs	r2, #3
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d123      	bne.n	8003814 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	08da      	lsrs	r2, r3, #3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3208      	adds	r2, #8
 80037d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	220f      	movs	r2, #15
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	08da      	lsrs	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3208      	adds	r2, #8
 800380e:	69b9      	ldr	r1, [r7, #24]
 8003810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2203      	movs	r2, #3
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 0203 	and.w	r2, r3, #3
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80b4 	beq.w	80039be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	4b60      	ldr	r3, [pc, #384]	; (80039dc <HAL_GPIO_Init+0x30c>)
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	4a5f      	ldr	r2, [pc, #380]	; (80039dc <HAL_GPIO_Init+0x30c>)
 8003860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003864:	6453      	str	r3, [r2, #68]	; 0x44
 8003866:	4b5d      	ldr	r3, [pc, #372]	; (80039dc <HAL_GPIO_Init+0x30c>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003872:	4a5b      	ldr	r2, [pc, #364]	; (80039e0 <HAL_GPIO_Init+0x310>)
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	089b      	lsrs	r3, r3, #2
 8003878:	3302      	adds	r3, #2
 800387a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	220f      	movs	r2, #15
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a52      	ldr	r2, [pc, #328]	; (80039e4 <HAL_GPIO_Init+0x314>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02b      	beq.n	80038f6 <HAL_GPIO_Init+0x226>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a51      	ldr	r2, [pc, #324]	; (80039e8 <HAL_GPIO_Init+0x318>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d025      	beq.n	80038f2 <HAL_GPIO_Init+0x222>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a50      	ldr	r2, [pc, #320]	; (80039ec <HAL_GPIO_Init+0x31c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01f      	beq.n	80038ee <HAL_GPIO_Init+0x21e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4f      	ldr	r2, [pc, #316]	; (80039f0 <HAL_GPIO_Init+0x320>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d019      	beq.n	80038ea <HAL_GPIO_Init+0x21a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4e      	ldr	r2, [pc, #312]	; (80039f4 <HAL_GPIO_Init+0x324>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <HAL_GPIO_Init+0x216>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4d      	ldr	r2, [pc, #308]	; (80039f8 <HAL_GPIO_Init+0x328>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00d      	beq.n	80038e2 <HAL_GPIO_Init+0x212>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4c      	ldr	r2, [pc, #304]	; (80039fc <HAL_GPIO_Init+0x32c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d007      	beq.n	80038de <HAL_GPIO_Init+0x20e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a4b      	ldr	r2, [pc, #300]	; (8003a00 <HAL_GPIO_Init+0x330>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d101      	bne.n	80038da <HAL_GPIO_Init+0x20a>
 80038d6:	2307      	movs	r3, #7
 80038d8:	e00e      	b.n	80038f8 <HAL_GPIO_Init+0x228>
 80038da:	2308      	movs	r3, #8
 80038dc:	e00c      	b.n	80038f8 <HAL_GPIO_Init+0x228>
 80038de:	2306      	movs	r3, #6
 80038e0:	e00a      	b.n	80038f8 <HAL_GPIO_Init+0x228>
 80038e2:	2305      	movs	r3, #5
 80038e4:	e008      	b.n	80038f8 <HAL_GPIO_Init+0x228>
 80038e6:	2304      	movs	r3, #4
 80038e8:	e006      	b.n	80038f8 <HAL_GPIO_Init+0x228>
 80038ea:	2303      	movs	r3, #3
 80038ec:	e004      	b.n	80038f8 <HAL_GPIO_Init+0x228>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e002      	b.n	80038f8 <HAL_GPIO_Init+0x228>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <HAL_GPIO_Init+0x228>
 80038f6:	2300      	movs	r3, #0
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	f002 0203 	and.w	r2, r2, #3
 80038fe:	0092      	lsls	r2, r2, #2
 8003900:	4093      	lsls	r3, r2
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003908:	4935      	ldr	r1, [pc, #212]	; (80039e0 <HAL_GPIO_Init+0x310>)
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	089b      	lsrs	r3, r3, #2
 800390e:	3302      	adds	r3, #2
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003916:	4b3b      	ldr	r3, [pc, #236]	; (8003a04 <HAL_GPIO_Init+0x334>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	43db      	mvns	r3, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800393a:	4a32      	ldr	r2, [pc, #200]	; (8003a04 <HAL_GPIO_Init+0x334>)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003940:	4b30      	ldr	r3, [pc, #192]	; (8003a04 <HAL_GPIO_Init+0x334>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003964:	4a27      	ldr	r2, [pc, #156]	; (8003a04 <HAL_GPIO_Init+0x334>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800396a:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <HAL_GPIO_Init+0x334>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	43db      	mvns	r3, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4013      	ands	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800398e:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <HAL_GPIO_Init+0x334>)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003994:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <HAL_GPIO_Init+0x334>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039b8:	4a12      	ldr	r2, [pc, #72]	; (8003a04 <HAL_GPIO_Init+0x334>)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3301      	adds	r3, #1
 80039c2:	61fb      	str	r3, [r7, #28]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	2b0f      	cmp	r3, #15
 80039c8:	f67f ae90 	bls.w	80036ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	3724      	adds	r7, #36	; 0x24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40013800 	.word	0x40013800
 80039e4:	40020000 	.word	0x40020000
 80039e8:	40020400 	.word	0x40020400
 80039ec:	40020800 	.word	0x40020800
 80039f0:	40020c00 	.word	0x40020c00
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40021400 	.word	0x40021400
 80039fc:	40021800 	.word	0x40021800
 8003a00:	40021c00 	.word	0x40021c00
 8003a04:	40013c00 	.word	0x40013c00

08003a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	807b      	strh	r3, [r7, #2]
 8003a14:	4613      	mov	r3, r2
 8003a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a18:	787b      	ldrb	r3, [r7, #1]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a1e:	887a      	ldrh	r2, [r7, #2]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a24:	e003      	b.n	8003a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a26:	887b      	ldrh	r3, [r7, #2]
 8003a28:	041a      	lsls	r2, r3, #16
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	619a      	str	r2, [r3, #24]
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e264      	b.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d075      	beq.n	8003b46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a5a:	4ba3      	ldr	r3, [pc, #652]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d00c      	beq.n	8003a80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a66:	4ba0      	ldr	r3, [pc, #640]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d112      	bne.n	8003a98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a72:	4b9d      	ldr	r3, [pc, #628]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a7e:	d10b      	bne.n	8003a98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a80:	4b99      	ldr	r3, [pc, #612]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d05b      	beq.n	8003b44 <HAL_RCC_OscConfig+0x108>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d157      	bne.n	8003b44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e23f      	b.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa0:	d106      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x74>
 8003aa2:	4b91      	ldr	r3, [pc, #580]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a90      	ldr	r2, [pc, #576]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e01d      	b.n	8003aec <HAL_RCC_OscConfig+0xb0>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x98>
 8003aba:	4b8b      	ldr	r3, [pc, #556]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a8a      	ldr	r2, [pc, #552]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	4b88      	ldr	r3, [pc, #544]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a87      	ldr	r2, [pc, #540]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	e00b      	b.n	8003aec <HAL_RCC_OscConfig+0xb0>
 8003ad4:	4b84      	ldr	r3, [pc, #528]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a83      	ldr	r2, [pc, #524]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4b81      	ldr	r3, [pc, #516]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a80      	ldr	r2, [pc, #512]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d013      	beq.n	8003b1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7ff f8a8 	bl	8002c48 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003afc:	f7ff f8a4 	bl	8002c48 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b64      	cmp	r3, #100	; 0x64
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e204      	b.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b76      	ldr	r3, [pc, #472]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0xc0>
 8003b1a:	e014      	b.n	8003b46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7ff f894 	bl	8002c48 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b24:	f7ff f890 	bl	8002c48 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	; 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e1f0      	b.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b36:	4b6c      	ldr	r3, [pc, #432]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0xe8>
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d063      	beq.n	8003c1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b52:	4b65      	ldr	r3, [pc, #404]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b5e:	4b62      	ldr	r3, [pc, #392]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d11c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b6a:	4b5f      	ldr	r3, [pc, #380]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d116      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	4b5c      	ldr	r3, [pc, #368]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_RCC_OscConfig+0x152>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d001      	beq.n	8003b8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e1c4      	b.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8e:	4b56      	ldr	r3, [pc, #344]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4952      	ldr	r1, [pc, #328]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba2:	e03a      	b.n	8003c1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bac:	4b4f      	ldr	r3, [pc, #316]	; (8003cec <HAL_RCC_OscConfig+0x2b0>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7ff f849 	bl	8002c48 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bba:	f7ff f845 	bl	8002c48 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e1a5      	b.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bcc:	4b46      	ldr	r3, [pc, #280]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd8:	4b43      	ldr	r3, [pc, #268]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4940      	ldr	r1, [pc, #256]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]
 8003bec:	e015      	b.n	8003c1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bee:	4b3f      	ldr	r3, [pc, #252]	; (8003cec <HAL_RCC_OscConfig+0x2b0>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7ff f828 	bl	8002c48 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bfc:	f7ff f824 	bl	8002c48 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e184      	b.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0e:	4b36      	ldr	r3, [pc, #216]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d030      	beq.n	8003c88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d016      	beq.n	8003c5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c2e:	4b30      	ldr	r3, [pc, #192]	; (8003cf0 <HAL_RCC_OscConfig+0x2b4>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7ff f808 	bl	8002c48 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c3c:	f7ff f804 	bl	8002c48 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e164      	b.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4e:	4b26      	ldr	r3, [pc, #152]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x200>
 8003c5a:	e015      	b.n	8003c88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c5c:	4b24      	ldr	r3, [pc, #144]	; (8003cf0 <HAL_RCC_OscConfig+0x2b4>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c62:	f7fe fff1 	bl	8002c48 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c6a:	f7fe ffed 	bl	8002c48 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e14d      	b.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1f0      	bne.n	8003c6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80a0 	beq.w	8003dd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c96:	2300      	movs	r3, #0
 8003c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9a:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10f      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	4a0e      	ldr	r2, [pc, #56]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_RCC_OscConfig+0x2b8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d121      	bne.n	8003d16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd2:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <HAL_RCC_OscConfig+0x2b8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a07      	ldr	r2, [pc, #28]	; (8003cf4 <HAL_RCC_OscConfig+0x2b8>)
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cde:	f7fe ffb3 	bl	8002c48 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce4:	e011      	b.n	8003d0a <HAL_RCC_OscConfig+0x2ce>
 8003ce6:	bf00      	nop
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	42470000 	.word	0x42470000
 8003cf0:	42470e80 	.word	0x42470e80
 8003cf4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf8:	f7fe ffa6 	bl	8002c48 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e106      	b.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0a:	4b85      	ldr	r3, [pc, #532]	; (8003f20 <HAL_RCC_OscConfig+0x4e4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d106      	bne.n	8003d2c <HAL_RCC_OscConfig+0x2f0>
 8003d1e:	4b81      	ldr	r3, [pc, #516]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	4a80      	ldr	r2, [pc, #512]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2a:	e01c      	b.n	8003d66 <HAL_RCC_OscConfig+0x32a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	d10c      	bne.n	8003d4e <HAL_RCC_OscConfig+0x312>
 8003d34:	4b7b      	ldr	r3, [pc, #492]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	4a7a      	ldr	r2, [pc, #488]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003d3a:	f043 0304 	orr.w	r3, r3, #4
 8003d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d40:	4b78      	ldr	r3, [pc, #480]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d44:	4a77      	ldr	r2, [pc, #476]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4c:	e00b      	b.n	8003d66 <HAL_RCC_OscConfig+0x32a>
 8003d4e:	4b75      	ldr	r3, [pc, #468]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	4a74      	ldr	r2, [pc, #464]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5a:	4b72      	ldr	r3, [pc, #456]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	4a71      	ldr	r2, [pc, #452]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003d60:	f023 0304 	bic.w	r3, r3, #4
 8003d64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d015      	beq.n	8003d9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6e:	f7fe ff6b 	bl	8002c48 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d76:	f7fe ff67 	bl	8002c48 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e0c5      	b.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8c:	4b65      	ldr	r3, [pc, #404]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ee      	beq.n	8003d76 <HAL_RCC_OscConfig+0x33a>
 8003d98:	e014      	b.n	8003dc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9a:	f7fe ff55 	bl	8002c48 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da0:	e00a      	b.n	8003db8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da2:	f7fe ff51 	bl	8002c48 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e0af      	b.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db8:	4b5a      	ldr	r3, [pc, #360]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1ee      	bne.n	8003da2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d105      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dca:	4b56      	ldr	r3, [pc, #344]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	4a55      	ldr	r2, [pc, #340]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 809b 	beq.w	8003f16 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003de0:	4b50      	ldr	r3, [pc, #320]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 030c 	and.w	r3, r3, #12
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d05c      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d141      	bne.n	8003e78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df4:	4b4c      	ldr	r3, [pc, #304]	; (8003f28 <HAL_RCC_OscConfig+0x4ec>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfa:	f7fe ff25 	bl	8002c48 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e02:	f7fe ff21 	bl	8002c48 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e081      	b.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e14:	4b43      	ldr	r3, [pc, #268]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f0      	bne.n	8003e02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	019b      	lsls	r3, r3, #6
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	041b      	lsls	r3, r3, #16
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e42:	061b      	lsls	r3, r3, #24
 8003e44:	4937      	ldr	r1, [pc, #220]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e4a:	4b37      	ldr	r3, [pc, #220]	; (8003f28 <HAL_RCC_OscConfig+0x4ec>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7fe fefa 	bl	8002c48 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e58:	f7fe fef6 	bl	8002c48 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e056      	b.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6a:	4b2e      	ldr	r3, [pc, #184]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0x41c>
 8003e76:	e04e      	b.n	8003f16 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e78:	4b2b      	ldr	r3, [pc, #172]	; (8003f28 <HAL_RCC_OscConfig+0x4ec>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7e:	f7fe fee3 	bl	8002c48 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e86:	f7fe fedf 	bl	8002c48 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e03f      	b.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e98:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f0      	bne.n	8003e86 <HAL_RCC_OscConfig+0x44a>
 8003ea4:	e037      	b.n	8003f16 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e032      	b.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eb2:	4b1c      	ldr	r3, [pc, #112]	; (8003f24 <HAL_RCC_OscConfig+0x4e8>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d028      	beq.n	8003f12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d121      	bne.n	8003f12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d11a      	bne.n	8003f12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ee8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d111      	bne.n	8003f12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	3b01      	subs	r3, #1
 8003efc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d001      	beq.n	8003f16 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40007000 	.word	0x40007000
 8003f24:	40023800 	.word	0x40023800
 8003f28:	42470060 	.word	0x42470060

08003f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0cc      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f40:	4b68      	ldr	r3, [pc, #416]	; (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d90c      	bls.n	8003f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4e:	4b65      	ldr	r3, [pc, #404]	; (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f56:	4b63      	ldr	r3, [pc, #396]	; (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0b8      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d020      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f80:	4b59      	ldr	r3, [pc, #356]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	4a58      	ldr	r2, [pc, #352]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f98:	4b53      	ldr	r3, [pc, #332]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	4a52      	ldr	r2, [pc, #328]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa4:	4b50      	ldr	r3, [pc, #320]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	494d      	ldr	r1, [pc, #308]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d044      	beq.n	800404c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d107      	bne.n	8003fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fca:	4b47      	ldr	r3, [pc, #284]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d119      	bne.n	800400a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e07f      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d003      	beq.n	8003fea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d107      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fea:	4b3f      	ldr	r3, [pc, #252]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e06f      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ffa:	4b3b      	ldr	r3, [pc, #236]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e067      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800400a:	4b37      	ldr	r3, [pc, #220]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f023 0203 	bic.w	r2, r3, #3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	4934      	ldr	r1, [pc, #208]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	4313      	orrs	r3, r2
 800401a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800401c:	f7fe fe14 	bl	8002c48 <HAL_GetTick>
 8004020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004022:	e00a      	b.n	800403a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004024:	f7fe fe10 	bl	8002c48 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e04f      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403a:	4b2b      	ldr	r3, [pc, #172]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 020c 	and.w	r2, r3, #12
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	429a      	cmp	r2, r3
 800404a:	d1eb      	bne.n	8004024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800404c:	4b25      	ldr	r3, [pc, #148]	; (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d20c      	bcs.n	8004074 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405a:	4b22      	ldr	r3, [pc, #136]	; (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004062:	4b20      	ldr	r3, [pc, #128]	; (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d001      	beq.n	8004074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e032      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004080:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4916      	ldr	r1, [pc, #88]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	4313      	orrs	r3, r2
 8004090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d009      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800409e:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	490e      	ldr	r1, [pc, #56]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040b2:	f000 f82d 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80040b6:	4602      	mov	r2, r0
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	490a      	ldr	r1, [pc, #40]	; (80040ec <HAL_RCC_ClockConfig+0x1c0>)
 80040c4:	5ccb      	ldrb	r3, [r1, r3]
 80040c6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ca:	4a09      	ldr	r2, [pc, #36]	; (80040f0 <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040ce:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fe fd74 	bl	8002bc0 <HAL_InitTick>

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40023c00 	.word	0x40023c00
 80040e8:	40023800 	.word	0x40023800
 80040ec:	0800b580 	.word	0x0800b580
 80040f0:	20000434 	.word	0x20000434
 80040f4:	20000438 	.word	0x20000438

080040f8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <HAL_RCC_EnableCSS+0x14>)
 80040fe:	2201      	movs	r2, #1
 8004100:	601a      	str	r2, [r3, #0]
}
 8004102:	bf00      	nop
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	4247004c 	.word	0x4247004c

08004110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004110:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	2300      	movs	r3, #0
 8004122:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004128:	4b67      	ldr	r3, [pc, #412]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 030c 	and.w	r3, r3, #12
 8004130:	2b08      	cmp	r3, #8
 8004132:	d00d      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0x40>
 8004134:	2b08      	cmp	r3, #8
 8004136:	f200 80bd 	bhi.w	80042b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_RCC_GetSysClockFreq+0x34>
 800413e:	2b04      	cmp	r3, #4
 8004140:	d003      	beq.n	800414a <HAL_RCC_GetSysClockFreq+0x3a>
 8004142:	e0b7      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004144:	4b61      	ldr	r3, [pc, #388]	; (80042cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004146:	60bb      	str	r3, [r7, #8]
       break;
 8004148:	e0b7      	b.n	80042ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800414a:	4b61      	ldr	r3, [pc, #388]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800414c:	60bb      	str	r3, [r7, #8]
      break;
 800414e:	e0b4      	b.n	80042ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004150:	4b5d      	ldr	r3, [pc, #372]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004158:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800415a:	4b5b      	ldr	r3, [pc, #364]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d04d      	beq.n	8004202 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004166:	4b58      	ldr	r3, [pc, #352]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	099b      	lsrs	r3, r3, #6
 800416c:	461a      	mov	r2, r3
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004176:	f04f 0100 	mov.w	r1, #0
 800417a:	ea02 0800 	and.w	r8, r2, r0
 800417e:	ea03 0901 	and.w	r9, r3, r1
 8004182:	4640      	mov	r0, r8
 8004184:	4649      	mov	r1, r9
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	014b      	lsls	r3, r1, #5
 8004190:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004194:	0142      	lsls	r2, r0, #5
 8004196:	4610      	mov	r0, r2
 8004198:	4619      	mov	r1, r3
 800419a:	ebb0 0008 	subs.w	r0, r0, r8
 800419e:	eb61 0109 	sbc.w	r1, r1, r9
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	018b      	lsls	r3, r1, #6
 80041ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041b0:	0182      	lsls	r2, r0, #6
 80041b2:	1a12      	subs	r2, r2, r0
 80041b4:	eb63 0301 	sbc.w	r3, r3, r1
 80041b8:	f04f 0000 	mov.w	r0, #0
 80041bc:	f04f 0100 	mov.w	r1, #0
 80041c0:	00d9      	lsls	r1, r3, #3
 80041c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041c6:	00d0      	lsls	r0, r2, #3
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	eb12 0208 	adds.w	r2, r2, r8
 80041d0:	eb43 0309 	adc.w	r3, r3, r9
 80041d4:	f04f 0000 	mov.w	r0, #0
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	0259      	lsls	r1, r3, #9
 80041de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80041e2:	0250      	lsls	r0, r2, #9
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	461a      	mov	r2, r3
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	f7fc fd48 	bl	8000c88 <__aeabi_uldivmod>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4613      	mov	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	e04a      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004202:	4b31      	ldr	r3, [pc, #196]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	099b      	lsrs	r3, r3, #6
 8004208:	461a      	mov	r2, r3
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004212:	f04f 0100 	mov.w	r1, #0
 8004216:	ea02 0400 	and.w	r4, r2, r0
 800421a:	ea03 0501 	and.w	r5, r3, r1
 800421e:	4620      	mov	r0, r4
 8004220:	4629      	mov	r1, r5
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	014b      	lsls	r3, r1, #5
 800422c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004230:	0142      	lsls	r2, r0, #5
 8004232:	4610      	mov	r0, r2
 8004234:	4619      	mov	r1, r3
 8004236:	1b00      	subs	r0, r0, r4
 8004238:	eb61 0105 	sbc.w	r1, r1, r5
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	018b      	lsls	r3, r1, #6
 8004246:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800424a:	0182      	lsls	r2, r0, #6
 800424c:	1a12      	subs	r2, r2, r0
 800424e:	eb63 0301 	sbc.w	r3, r3, r1
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f04f 0100 	mov.w	r1, #0
 800425a:	00d9      	lsls	r1, r3, #3
 800425c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004260:	00d0      	lsls	r0, r2, #3
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	1912      	adds	r2, r2, r4
 8004268:	eb45 0303 	adc.w	r3, r5, r3
 800426c:	f04f 0000 	mov.w	r0, #0
 8004270:	f04f 0100 	mov.w	r1, #0
 8004274:	0299      	lsls	r1, r3, #10
 8004276:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800427a:	0290      	lsls	r0, r2, #10
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4610      	mov	r0, r2
 8004282:	4619      	mov	r1, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	461a      	mov	r2, r3
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	f7fc fcfc 	bl	8000c88 <__aeabi_uldivmod>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	4613      	mov	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	0c1b      	lsrs	r3, r3, #16
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	3301      	adds	r3, #1
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b0:	60bb      	str	r3, [r7, #8]
      break;
 80042b2:	e002      	b.n	80042ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042b6:	60bb      	str	r3, [r7, #8]
      break;
 80042b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ba:	68bb      	ldr	r3, [r7, #8]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800
 80042cc:	00f42400 	.word	0x00f42400
 80042d0:	007a1200 	.word	0x007a1200

080042d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042d8:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042da:	681b      	ldr	r3, [r3, #0]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20000434 	.word	0x20000434

080042ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042f0:	f7ff fff0 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 80042f4:	4602      	mov	r2, r0
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_RCC_GetPCLK1Freq+0x20>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	0a9b      	lsrs	r3, r3, #10
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	4903      	ldr	r1, [pc, #12]	; (8004310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004302:	5ccb      	ldrb	r3, [r1, r3]
 8004304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004308:	4618      	mov	r0, r3
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40023800 	.word	0x40023800
 8004310:	0800b590 	.word	0x0800b590

08004314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004318:	f7ff ffdc 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 800431c:	4602      	mov	r2, r0
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	0b5b      	lsrs	r3, r3, #13
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	4903      	ldr	r1, [pc, #12]	; (8004338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800432a:	5ccb      	ldrb	r3, [r1, r3]
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004330:	4618      	mov	r0, r3
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40023800 	.word	0x40023800
 8004338:	0800b590 	.word	0x0800b590

0800433c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <HAL_RCC_NMI_IRQHandler+0x20>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004348:	2b80      	cmp	r3, #128	; 0x80
 800434a:	d104      	bne.n	8004356 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800434c:	f000 f80a 	bl	8004364 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004350:	4b03      	ldr	r3, [pc, #12]	; (8004360 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004352:	2280      	movs	r2, #128	; 0x80
 8004354:	701a      	strb	r2, [r3, #0]
  }
}
 8004356:	bf00      	nop
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40023800 	.word	0x40023800
 8004360:	4002380e 	.word	0x4002380e

08004364 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e07b      	b.n	800447c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	2b00      	cmp	r3, #0
 800438a:	d108      	bne.n	800439e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004394:	d009      	beq.n	80043aa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	61da      	str	r2, [r3, #28]
 800439c:	e005      	b.n	80043aa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d106      	bne.n	80043ca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7fd fcdd 	bl	8001d84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2202      	movs	r2, #2
 80043ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442e:	ea42 0103 	orr.w	r1, r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	0c1b      	lsrs	r3, r3, #16
 8004448:	f003 0104 	and.w	r1, r3, #4
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	f003 0210 	and.w	r2, r3, #16
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800446a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08c      	sub	sp, #48	; 0x30
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004492:	2301      	movs	r3, #1
 8004494:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_SPI_TransmitReceive+0x26>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e18a      	b.n	80047c0 <HAL_SPI_TransmitReceive+0x33c>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044b2:	f7fe fbc9 	bl	8002c48 <HAL_GetTick>
 80044b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044c8:	887b      	ldrh	r3, [r7, #2]
 80044ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d00f      	beq.n	80044f4 <HAL_SPI_TransmitReceive+0x70>
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044da:	d107      	bne.n	80044ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d103      	bne.n	80044ec <HAL_SPI_TransmitReceive+0x68>
 80044e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d003      	beq.n	80044f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
 80044ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044f2:	e15b      	b.n	80047ac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d005      	beq.n	8004506 <HAL_SPI_TransmitReceive+0x82>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_SPI_TransmitReceive+0x82>
 8004500:	887b      	ldrh	r3, [r7, #2]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d103      	bne.n	800450e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800450c:	e14e      	b.n	80047ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b04      	cmp	r3, #4
 8004518:	d003      	beq.n	8004522 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2205      	movs	r2, #5
 800451e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	887a      	ldrh	r2, [r7, #2]
 8004532:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	887a      	ldrh	r2, [r7, #2]
 8004538:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	887a      	ldrh	r2, [r7, #2]
 8004544:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	887a      	ldrh	r2, [r7, #2]
 800454a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004562:	2b40      	cmp	r3, #64	; 0x40
 8004564:	d007      	beq.n	8004576 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004574:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457e:	d178      	bne.n	8004672 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_SPI_TransmitReceive+0x10a>
 8004588:	8b7b      	ldrh	r3, [r7, #26]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d166      	bne.n	800465c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	881a      	ldrh	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	1c9a      	adds	r2, r3, #2
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045b2:	e053      	b.n	800465c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d11b      	bne.n	80045fa <HAL_SPI_TransmitReceive+0x176>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d016      	beq.n	80045fa <HAL_SPI_TransmitReceive+0x176>
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d113      	bne.n	80045fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	881a      	ldrh	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	1c9a      	adds	r2, r3, #2
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b01      	cmp	r3, #1
 8004606:	d119      	bne.n	800463c <HAL_SPI_TransmitReceive+0x1b8>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d014      	beq.n	800463c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	b292      	uxth	r2, r2
 800461e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	1c9a      	adds	r2, r3, #2
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004638:	2301      	movs	r3, #1
 800463a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800463c:	f7fe fb04 	bl	8002c48 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004648:	429a      	cmp	r2, r3
 800464a:	d807      	bhi.n	800465c <HAL_SPI_TransmitReceive+0x1d8>
 800464c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004652:	d003      	beq.n	800465c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800465a:	e0a7      	b.n	80047ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1a6      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x130>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1a1      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x130>
 8004670:	e07c      	b.n	800476c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_SPI_TransmitReceive+0x1fc>
 800467a:	8b7b      	ldrh	r3, [r7, #26]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d16b      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	330c      	adds	r3, #12
 800468a:	7812      	ldrb	r2, [r2, #0]
 800468c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046a6:	e057      	b.n	8004758 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d11c      	bne.n	80046f0 <HAL_SPI_TransmitReceive+0x26c>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d017      	beq.n	80046f0 <HAL_SPI_TransmitReceive+0x26c>
 80046c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d114      	bne.n	80046f0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	330c      	adds	r3, #12
 80046d0:	7812      	ldrb	r2, [r2, #0]
 80046d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d119      	bne.n	8004732 <HAL_SPI_TransmitReceive+0x2ae>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d014      	beq.n	8004732 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800472e:	2301      	movs	r3, #1
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004732:	f7fe fa89 	bl	8002c48 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800473e:	429a      	cmp	r2, r3
 8004740:	d803      	bhi.n	800474a <HAL_SPI_TransmitReceive+0x2c6>
 8004742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d102      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x2cc>
 800474a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004756:	e029      	b.n	80047ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1a2      	bne.n	80046a8 <HAL_SPI_TransmitReceive+0x224>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d19d      	bne.n	80046a8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800476c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f8b1 	bl	80048d8 <SPI_EndRxTxTransaction>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d006      	beq.n	800478a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004788:	e010      	b.n	80047ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10b      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	e000      	b.n	80047ac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80047aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3730      	adds	r7, #48	; 0x30
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047d8:	f7fe fa36 	bl	8002c48 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	4413      	add	r3, r2
 80047e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047e8:	f7fe fa2e 	bl	8002c48 <HAL_GetTick>
 80047ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047ee:	4b39      	ldr	r3, [pc, #228]	; (80048d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	015b      	lsls	r3, r3, #5
 80047f4:	0d1b      	lsrs	r3, r3, #20
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	fb02 f303 	mul.w	r3, r2, r3
 80047fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047fe:	e054      	b.n	80048aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004806:	d050      	beq.n	80048aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004808:	f7fe fa1e 	bl	8002c48 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	429a      	cmp	r2, r3
 8004816:	d902      	bls.n	800481e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d13d      	bne.n	800489a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800482c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004836:	d111      	bne.n	800485c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004840:	d004      	beq.n	800484c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484a:	d107      	bne.n	800485c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800485a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004864:	d10f      	bne.n	8004886 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004884:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e017      	b.n	80048ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4013      	ands	r3, r2
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	bf0c      	ite	eq
 80048ba:	2301      	moveq	r3, #1
 80048bc:	2300      	movne	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	79fb      	ldrb	r3, [r7, #7]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d19b      	bne.n	8004800 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3720      	adds	r7, #32
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	20000434 	.word	0x20000434

080048d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048e4:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <SPI_EndRxTxTransaction+0x7c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1b      	ldr	r2, [pc, #108]	; (8004958 <SPI_EndRxTxTransaction+0x80>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	0d5b      	lsrs	r3, r3, #21
 80048f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048f4:	fb02 f303 	mul.w	r3, r2, r3
 80048f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004902:	d112      	bne.n	800492a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2200      	movs	r2, #0
 800490c:	2180      	movs	r1, #128	; 0x80
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f7ff ff5a 	bl	80047c8 <SPI_WaitFlagStateUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d016      	beq.n	8004948 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491e:	f043 0220 	orr.w	r2, r3, #32
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e00f      	b.n	800494a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	3b01      	subs	r3, #1
 8004934:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004940:	2b80      	cmp	r3, #128	; 0x80
 8004942:	d0f2      	beq.n	800492a <SPI_EndRxTxTransaction+0x52>
 8004944:	e000      	b.n	8004948 <SPI_EndRxTxTransaction+0x70>
        break;
 8004946:	bf00      	nop
  }

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000434 	.word	0x20000434
 8004958:	165e9f81 	.word	0x165e9f81

0800495c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e041      	b.n	80049f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fd fd82 	bl	800248c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f000 ff00 	bl	80057a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d001      	beq.n	8004a14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e046      	b.n	8004aa2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a23      	ldr	r2, [pc, #140]	; (8004ab0 <HAL_TIM_Base_Start+0xb4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d022      	beq.n	8004a6c <HAL_TIM_Base_Start+0x70>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2e:	d01d      	beq.n	8004a6c <HAL_TIM_Base_Start+0x70>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1f      	ldr	r2, [pc, #124]	; (8004ab4 <HAL_TIM_Base_Start+0xb8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d018      	beq.n	8004a6c <HAL_TIM_Base_Start+0x70>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a1e      	ldr	r2, [pc, #120]	; (8004ab8 <HAL_TIM_Base_Start+0xbc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d013      	beq.n	8004a6c <HAL_TIM_Base_Start+0x70>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a1c      	ldr	r2, [pc, #112]	; (8004abc <HAL_TIM_Base_Start+0xc0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00e      	beq.n	8004a6c <HAL_TIM_Base_Start+0x70>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1b      	ldr	r2, [pc, #108]	; (8004ac0 <HAL_TIM_Base_Start+0xc4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d009      	beq.n	8004a6c <HAL_TIM_Base_Start+0x70>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a19      	ldr	r2, [pc, #100]	; (8004ac4 <HAL_TIM_Base_Start+0xc8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d004      	beq.n	8004a6c <HAL_TIM_Base_Start+0x70>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a18      	ldr	r2, [pc, #96]	; (8004ac8 <HAL_TIM_Base_Start+0xcc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d111      	bne.n	8004a90 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b06      	cmp	r3, #6
 8004a7c:	d010      	beq.n	8004aa0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0201 	orr.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8e:	e007      	b.n	8004aa0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40010000 	.word	0x40010000
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	40000800 	.word	0x40000800
 8004abc:	40000c00 	.word	0x40000c00
 8004ac0:	40010400 	.word	0x40010400
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40001800 	.word	0x40001800

08004acc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d001      	beq.n	8004ae4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e04e      	b.n	8004b82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0201 	orr.w	r2, r2, #1
 8004afa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a23      	ldr	r2, [pc, #140]	; (8004b90 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d022      	beq.n	8004b4c <HAL_TIM_Base_Start_IT+0x80>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0e:	d01d      	beq.n	8004b4c <HAL_TIM_Base_Start_IT+0x80>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1f      	ldr	r2, [pc, #124]	; (8004b94 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d018      	beq.n	8004b4c <HAL_TIM_Base_Start_IT+0x80>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a1e      	ldr	r2, [pc, #120]	; (8004b98 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d013      	beq.n	8004b4c <HAL_TIM_Base_Start_IT+0x80>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a1c      	ldr	r2, [pc, #112]	; (8004b9c <HAL_TIM_Base_Start_IT+0xd0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00e      	beq.n	8004b4c <HAL_TIM_Base_Start_IT+0x80>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a1b      	ldr	r2, [pc, #108]	; (8004ba0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d009      	beq.n	8004b4c <HAL_TIM_Base_Start_IT+0x80>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a19      	ldr	r2, [pc, #100]	; (8004ba4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d004      	beq.n	8004b4c <HAL_TIM_Base_Start_IT+0x80>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a18      	ldr	r2, [pc, #96]	; (8004ba8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d111      	bne.n	8004b70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b06      	cmp	r3, #6
 8004b5c:	d010      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 0201 	orr.w	r2, r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6e:	e007      	b.n	8004b80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40010000 	.word	0x40010000
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40000800 	.word	0x40000800
 8004b9c:	40000c00 	.word	0x40000c00
 8004ba0:	40010400 	.word	0x40010400
 8004ba4:	40014000 	.word	0x40014000
 8004ba8:	40001800 	.word	0x40001800

08004bac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6a1a      	ldr	r2, [r3, #32]
 8004bca:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10f      	bne.n	8004bf4 <HAL_TIM_Base_Stop_IT+0x48>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6a1a      	ldr	r2, [r3, #32]
 8004bda:	f240 4344 	movw	r3, #1092	; 0x444
 8004bde:	4013      	ands	r3, r2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d107      	bne.n	8004bf4 <HAL_TIM_Base_Stop_IT+0x48>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0201 	bic.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b082      	sub	sp, #8
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e041      	b.n	8004ca0 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d106      	bne.n	8004c36 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f839 	bl	8004ca8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3304      	adds	r3, #4
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f000 fda9 	bl	80057a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d104      	bne.n	8004cda <HAL_TIM_IC_Start_DMA+0x1e>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	e013      	b.n	8004d02 <HAL_TIM_IC_Start_DMA+0x46>
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d104      	bne.n	8004cea <HAL_TIM_IC_Start_DMA+0x2e>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	e00b      	b.n	8004d02 <HAL_TIM_IC_Start_DMA+0x46>
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d104      	bne.n	8004cfa <HAL_TIM_IC_Start_DMA+0x3e>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	e003      	b.n	8004d02 <HAL_TIM_IC_Start_DMA+0x46>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <HAL_TIM_IC_Start_DMA+0x58>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	e013      	b.n	8004d3c <HAL_TIM_IC_Start_DMA+0x80>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d104      	bne.n	8004d24 <HAL_TIM_IC_Start_DMA+0x68>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	e00b      	b.n	8004d3c <HAL_TIM_IC_Start_DMA+0x80>
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d104      	bne.n	8004d34 <HAL_TIM_IC_Start_DMA+0x78>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	e003      	b.n	8004d3c <HAL_TIM_IC_Start_DMA+0x80>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8004d3e:	7dfb      	ldrb	r3, [r7, #23]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d002      	beq.n	8004d4a <HAL_TIM_IC_Start_DMA+0x8e>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8004d44:	7dbb      	ldrb	r3, [r7, #22]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d101      	bne.n	8004d4e <HAL_TIM_IC_Start_DMA+0x92>
  {
    return HAL_BUSY;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e145      	b.n	8004fda <HAL_TIM_IC_Start_DMA+0x31e>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8004d4e:	7dfb      	ldrb	r3, [r7, #23]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d143      	bne.n	8004ddc <HAL_TIM_IC_Start_DMA+0x120>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8004d54:	7dbb      	ldrb	r3, [r7, #22]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d140      	bne.n	8004ddc <HAL_TIM_IC_Start_DMA+0x120>
  {
    if ((pData == NULL) && (Length > 0U))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <HAL_TIM_IC_Start_DMA+0xae>
 8004d60:	887b      	ldrh	r3, [r7, #2]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_TIM_IC_Start_DMA+0xae>
    {
      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e137      	b.n	8004fda <HAL_TIM_IC_Start_DMA+0x31e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d104      	bne.n	8004d7a <HAL_TIM_IC_Start_DMA+0xbe>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d78:	e013      	b.n	8004da2 <HAL_TIM_IC_Start_DMA+0xe6>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d104      	bne.n	8004d8a <HAL_TIM_IC_Start_DMA+0xce>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d88:	e00b      	b.n	8004da2 <HAL_TIM_IC_Start_DMA+0xe6>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d104      	bne.n	8004d9a <HAL_TIM_IC_Start_DMA+0xde>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d98:	e003      	b.n	8004da2 <HAL_TIM_IC_Start_DMA+0xe6>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d104      	bne.n	8004db2 <HAL_TIM_IC_Start_DMA+0xf6>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8004db0:	e016      	b.n	8004de0 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d104      	bne.n	8004dc2 <HAL_TIM_IC_Start_DMA+0x106>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8004dc0:	e00e      	b.n	8004de0 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d104      	bne.n	8004dd2 <HAL_TIM_IC_Start_DMA+0x116>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8004dd0:	e006      	b.n	8004de0 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8004dda:	e001      	b.n	8004de0 <HAL_TIM_IC_Start_DMA+0x124>
    }
  }
  else
  {
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0fc      	b.n	8004fda <HAL_TIM_IC_Start_DMA+0x31e>
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b0c      	cmp	r3, #12
 8004de4:	f200 80ae 	bhi.w	8004f44 <HAL_TIM_IC_Start_DMA+0x288>
 8004de8:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <HAL_TIM_IC_Start_DMA+0x134>)
 8004dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dee:	bf00      	nop
 8004df0:	08004e25 	.word	0x08004e25
 8004df4:	08004f45 	.word	0x08004f45
 8004df8:	08004f45 	.word	0x08004f45
 8004dfc:	08004f45 	.word	0x08004f45
 8004e00:	08004e6d 	.word	0x08004e6d
 8004e04:	08004f45 	.word	0x08004f45
 8004e08:	08004f45 	.word	0x08004f45
 8004e0c:	08004f45 	.word	0x08004f45
 8004e10:	08004eb5 	.word	0x08004eb5
 8004e14:	08004f45 	.word	0x08004f45
 8004e18:	08004f45 	.word	0x08004f45
 8004e1c:	08004f45 	.word	0x08004f45
 8004e20:	08004efd 	.word	0x08004efd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	4a6e      	ldr	r2, [pc, #440]	; (8004fe4 <HAL_TIM_IC_Start_DMA+0x328>)
 8004e2a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	4a6d      	ldr	r2, [pc, #436]	; (8004fe8 <HAL_TIM_IC_Start_DMA+0x32c>)
 8004e32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	4a6c      	ldr	r2, [pc, #432]	; (8004fec <HAL_TIM_IC_Start_DMA+0x330>)
 8004e3a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3334      	adds	r3, #52	; 0x34
 8004e46:	4619      	mov	r1, r3
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	887b      	ldrh	r3, [r7, #2]
 8004e4c:	f7fe f8ec 	bl	8003028 <HAL_DMA_Start_IT>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_TIM_IC_Start_DMA+0x19e>
      {
        /* Return error status */
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e0bf      	b.n	8004fda <HAL_TIM_IC_Start_DMA+0x31e>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e68:	60da      	str	r2, [r3, #12]
      break;
 8004e6a:	e06c      	b.n	8004f46 <HAL_TIM_IC_Start_DMA+0x28a>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e70:	4a5c      	ldr	r2, [pc, #368]	; (8004fe4 <HAL_TIM_IC_Start_DMA+0x328>)
 8004e72:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	4a5b      	ldr	r2, [pc, #364]	; (8004fe8 <HAL_TIM_IC_Start_DMA+0x32c>)
 8004e7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e80:	4a5a      	ldr	r2, [pc, #360]	; (8004fec <HAL_TIM_IC_Start_DMA+0x330>)
 8004e82:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3338      	adds	r3, #56	; 0x38
 8004e8e:	4619      	mov	r1, r3
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	887b      	ldrh	r3, [r7, #2]
 8004e94:	f7fe f8c8 	bl	8003028 <HAL_DMA_Start_IT>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_TIM_IC_Start_DMA+0x1e6>
      {
        /* Return error status */
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e09b      	b.n	8004fda <HAL_TIM_IC_Start_DMA+0x31e>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004eb0:	60da      	str	r2, [r3, #12]
      break;
 8004eb2:	e048      	b.n	8004f46 <HAL_TIM_IC_Start_DMA+0x28a>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	4a4a      	ldr	r2, [pc, #296]	; (8004fe4 <HAL_TIM_IC_Start_DMA+0x328>)
 8004eba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	4a49      	ldr	r2, [pc, #292]	; (8004fe8 <HAL_TIM_IC_Start_DMA+0x32c>)
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	4a48      	ldr	r2, [pc, #288]	; (8004fec <HAL_TIM_IC_Start_DMA+0x330>)
 8004eca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	333c      	adds	r3, #60	; 0x3c
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	887b      	ldrh	r3, [r7, #2]
 8004edc:	f7fe f8a4 	bl	8003028 <HAL_DMA_Start_IT>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_TIM_IC_Start_DMA+0x22e>
      {
        /* Return error status */
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e077      	b.n	8004fda <HAL_TIM_IC_Start_DMA+0x31e>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef8:	60da      	str	r2, [r3, #12]
      break;
 8004efa:	e024      	b.n	8004f46 <HAL_TIM_IC_Start_DMA+0x28a>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	4a38      	ldr	r2, [pc, #224]	; (8004fe4 <HAL_TIM_IC_Start_DMA+0x328>)
 8004f02:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f08:	4a37      	ldr	r2, [pc, #220]	; (8004fe8 <HAL_TIM_IC_Start_DMA+0x32c>)
 8004f0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	4a36      	ldr	r2, [pc, #216]	; (8004fec <HAL_TIM_IC_Start_DMA+0x330>)
 8004f12:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3340      	adds	r3, #64	; 0x40
 8004f1e:	4619      	mov	r1, r3
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	887b      	ldrh	r3, [r7, #2]
 8004f24:	f7fe f880 	bl	8003028 <HAL_DMA_Start_IT>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_TIM_IC_Start_DMA+0x276>
      {
        /* Return error status */
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e053      	b.n	8004fda <HAL_TIM_IC_Start_DMA+0x31e>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f40:	60da      	str	r2, [r3, #12]
      break;
 8004f42:	e000      	b.n	8004f46 <HAL_TIM_IC_Start_DMA+0x28a>
    }

    default:
      break;
 8004f44:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	68b9      	ldr	r1, [r7, #8]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 ff18 	bl	8005d84 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a25      	ldr	r2, [pc, #148]	; (8004ff0 <HAL_TIM_IC_Start_DMA+0x334>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d022      	beq.n	8004fa4 <HAL_TIM_IC_Start_DMA+0x2e8>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f66:	d01d      	beq.n	8004fa4 <HAL_TIM_IC_Start_DMA+0x2e8>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a21      	ldr	r2, [pc, #132]	; (8004ff4 <HAL_TIM_IC_Start_DMA+0x338>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d018      	beq.n	8004fa4 <HAL_TIM_IC_Start_DMA+0x2e8>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a20      	ldr	r2, [pc, #128]	; (8004ff8 <HAL_TIM_IC_Start_DMA+0x33c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d013      	beq.n	8004fa4 <HAL_TIM_IC_Start_DMA+0x2e8>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1e      	ldr	r2, [pc, #120]	; (8004ffc <HAL_TIM_IC_Start_DMA+0x340>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00e      	beq.n	8004fa4 <HAL_TIM_IC_Start_DMA+0x2e8>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <HAL_TIM_IC_Start_DMA+0x344>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d009      	beq.n	8004fa4 <HAL_TIM_IC_Start_DMA+0x2e8>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a1b      	ldr	r2, [pc, #108]	; (8005004 <HAL_TIM_IC_Start_DMA+0x348>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d004      	beq.n	8004fa4 <HAL_TIM_IC_Start_DMA+0x2e8>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a1a      	ldr	r2, [pc, #104]	; (8005008 <HAL_TIM_IC_Start_DMA+0x34c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d111      	bne.n	8004fc8 <HAL_TIM_IC_Start_DMA+0x30c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b06      	cmp	r3, #6
 8004fb4:	d010      	beq.n	8004fd8 <HAL_TIM_IC_Start_DMA+0x31c>
    {
      __HAL_TIM_ENABLE(htim);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0201 	orr.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc6:	e007      	b.n	8004fd8 <HAL_TIM_IC_Start_DMA+0x31c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	0800566f 	.word	0x0800566f
 8004fe8:	08005737 	.word	0x08005737
 8004fec:	080055dd 	.word	0x080055dd
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	40000400 	.word	0x40000400
 8004ff8:	40000800 	.word	0x40000800
 8004ffc:	40000c00 	.word	0x40000c00
 8005000:	40010400 	.word	0x40010400
 8005004:	40014000 	.word	0x40014000
 8005008:	40001800 	.word	0x40001800

0800500c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b02      	cmp	r3, #2
 8005020:	d122      	bne.n	8005068 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b02      	cmp	r3, #2
 800502e:	d11b      	bne.n	8005068 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0202 	mvn.w	r2, #2
 8005038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fa92 	bl	8005578 <HAL_TIM_IC_CaptureCallback>
 8005054:	e005      	b.n	8005062 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fa84 	bl	8005564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fa9f 	bl	80055a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b04      	cmp	r3, #4
 8005074:	d122      	bne.n	80050bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b04      	cmp	r3, #4
 8005082:	d11b      	bne.n	80050bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0204 	mvn.w	r2, #4
 800508c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2202      	movs	r2, #2
 8005092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fa68 	bl	8005578 <HAL_TIM_IC_CaptureCallback>
 80050a8:	e005      	b.n	80050b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fa5a 	bl	8005564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fa75 	bl	80055a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d122      	bne.n	8005110 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d11b      	bne.n	8005110 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f06f 0208 	mvn.w	r2, #8
 80050e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2204      	movs	r2, #4
 80050e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fa3e 	bl	8005578 <HAL_TIM_IC_CaptureCallback>
 80050fc:	e005      	b.n	800510a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fa30 	bl	8005564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fa4b 	bl	80055a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b10      	cmp	r3, #16
 800511c:	d122      	bne.n	8005164 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b10      	cmp	r3, #16
 800512a:	d11b      	bne.n	8005164 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0210 	mvn.w	r2, #16
 8005134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2208      	movs	r2, #8
 800513a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fa14 	bl	8005578 <HAL_TIM_IC_CaptureCallback>
 8005150:	e005      	b.n	800515e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fa06 	bl	8005564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fa21 	bl	80055a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b01      	cmp	r3, #1
 8005170:	d10e      	bne.n	8005190 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b01      	cmp	r3, #1
 800517e:	d107      	bne.n	8005190 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0201 	mvn.w	r2, #1
 8005188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f9e0 	bl	8005550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519a:	2b80      	cmp	r3, #128	; 0x80
 800519c:	d10e      	bne.n	80051bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a8:	2b80      	cmp	r3, #128	; 0x80
 80051aa:	d107      	bne.n	80051bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fe90 	bl	8005edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c6:	2b40      	cmp	r3, #64	; 0x40
 80051c8:	d10e      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d4:	2b40      	cmp	r3, #64	; 0x40
 80051d6:	d107      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f9e6 	bl	80055b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d10e      	bne.n	8005214 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b20      	cmp	r3, #32
 8005202:	d107      	bne.n	8005214 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0220 	mvn.w	r2, #32
 800520c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fe5a 	bl	8005ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005214:	bf00      	nop
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005232:	2302      	movs	r3, #2
 8005234:	e082      	b.n	800533c <HAL_TIM_IC_ConfigChannel+0x120>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d11b      	bne.n	800527c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6818      	ldr	r0, [r3, #0]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	6819      	ldr	r1, [r3, #0]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f000 fbd2 	bl	80059fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699a      	ldr	r2, [r3, #24]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 020c 	bic.w	r2, r2, #12
 8005266:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6999      	ldr	r1, [r3, #24]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	619a      	str	r2, [r3, #24]
 800527a:	e05a      	b.n	8005332 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b04      	cmp	r3, #4
 8005280:	d11c      	bne.n	80052bc <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	6819      	ldr	r1, [r3, #0]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f000 fc56 	bl	8005b42 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699a      	ldr	r2, [r3, #24]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80052a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6999      	ldr	r1, [r3, #24]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	021a      	lsls	r2, r3, #8
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	619a      	str	r2, [r3, #24]
 80052ba:	e03a      	b.n	8005332 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d11b      	bne.n	80052fa <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	6819      	ldr	r1, [r3, #0]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f000 fca3 	bl	8005c1c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 020c 	bic.w	r2, r2, #12
 80052e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69d9      	ldr	r1, [r3, #28]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	61da      	str	r2, [r3, #28]
 80052f8:	e01b      	b.n	8005332 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	6819      	ldr	r1, [r3, #0]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f000 fcc3 	bl	8005c94 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69da      	ldr	r2, [r3, #28]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800531c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69d9      	ldr	r1, [r3, #28]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	021a      	lsls	r2, r3, #8
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_TIM_ConfigClockSource+0x18>
 8005358:	2302      	movs	r3, #2
 800535a:	e0b3      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x180>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800537a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005382:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005394:	d03e      	beq.n	8005414 <HAL_TIM_ConfigClockSource+0xd0>
 8005396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800539a:	f200 8087 	bhi.w	80054ac <HAL_TIM_ConfigClockSource+0x168>
 800539e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a2:	f000 8085 	beq.w	80054b0 <HAL_TIM_ConfigClockSource+0x16c>
 80053a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053aa:	d87f      	bhi.n	80054ac <HAL_TIM_ConfigClockSource+0x168>
 80053ac:	2b70      	cmp	r3, #112	; 0x70
 80053ae:	d01a      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0xa2>
 80053b0:	2b70      	cmp	r3, #112	; 0x70
 80053b2:	d87b      	bhi.n	80054ac <HAL_TIM_ConfigClockSource+0x168>
 80053b4:	2b60      	cmp	r3, #96	; 0x60
 80053b6:	d050      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x116>
 80053b8:	2b60      	cmp	r3, #96	; 0x60
 80053ba:	d877      	bhi.n	80054ac <HAL_TIM_ConfigClockSource+0x168>
 80053bc:	2b50      	cmp	r3, #80	; 0x50
 80053be:	d03c      	beq.n	800543a <HAL_TIM_ConfigClockSource+0xf6>
 80053c0:	2b50      	cmp	r3, #80	; 0x50
 80053c2:	d873      	bhi.n	80054ac <HAL_TIM_ConfigClockSource+0x168>
 80053c4:	2b40      	cmp	r3, #64	; 0x40
 80053c6:	d058      	beq.n	800547a <HAL_TIM_ConfigClockSource+0x136>
 80053c8:	2b40      	cmp	r3, #64	; 0x40
 80053ca:	d86f      	bhi.n	80054ac <HAL_TIM_ConfigClockSource+0x168>
 80053cc:	2b30      	cmp	r3, #48	; 0x30
 80053ce:	d064      	beq.n	800549a <HAL_TIM_ConfigClockSource+0x156>
 80053d0:	2b30      	cmp	r3, #48	; 0x30
 80053d2:	d86b      	bhi.n	80054ac <HAL_TIM_ConfigClockSource+0x168>
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	d060      	beq.n	800549a <HAL_TIM_ConfigClockSource+0x156>
 80053d8:	2b20      	cmp	r3, #32
 80053da:	d867      	bhi.n	80054ac <HAL_TIM_ConfigClockSource+0x168>
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d05c      	beq.n	800549a <HAL_TIM_ConfigClockSource+0x156>
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	d05a      	beq.n	800549a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80053e4:	e062      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6818      	ldr	r0, [r3, #0]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6899      	ldr	r1, [r3, #8]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f000 fca5 	bl	8005d44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005408:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	609a      	str	r2, [r3, #8]
      break;
 8005412:	e04e      	b.n	80054b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	6899      	ldr	r1, [r3, #8]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f000 fc8e 	bl	8005d44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005436:	609a      	str	r2, [r3, #8]
      break;
 8005438:	e03b      	b.n	80054b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6859      	ldr	r1, [r3, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	461a      	mov	r2, r3
 8005448:	f000 fb4c 	bl	8005ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2150      	movs	r1, #80	; 0x50
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fc5b 	bl	8005d0e <TIM_ITRx_SetConfig>
      break;
 8005458:	e02b      	b.n	80054b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	6859      	ldr	r1, [r3, #4]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	461a      	mov	r2, r3
 8005468:	f000 fba8 	bl	8005bbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2160      	movs	r1, #96	; 0x60
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fc4b 	bl	8005d0e <TIM_ITRx_SetConfig>
      break;
 8005478:	e01b      	b.n	80054b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6859      	ldr	r1, [r3, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	461a      	mov	r2, r3
 8005488:	f000 fb2c 	bl	8005ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2140      	movs	r1, #64	; 0x40
 8005492:	4618      	mov	r0, r3
 8005494:	f000 fc3b 	bl	8005d0e <TIM_ITRx_SetConfig>
      break;
 8005498:	e00b      	b.n	80054b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4619      	mov	r1, r3
 80054a4:	4610      	mov	r0, r2
 80054a6:	f000 fc32 	bl	8005d0e <TIM_ITRx_SetConfig>
        break;
 80054aa:	e002      	b.n	80054b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054ac:	bf00      	nop
 80054ae:	e000      	b.n	80054b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e031      	b.n	8005548 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f9f2 	bl	80058e0 <TIM_SlaveTimer_SetConfig>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d009      	beq.n	8005516 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e018      	b.n	8005548 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005524:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005534:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d107      	bne.n	8005604 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2201      	movs	r2, #1
 80055f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005602:	e02a      	b.n	800565a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	429a      	cmp	r2, r3
 800560c:	d107      	bne.n	800561e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2202      	movs	r2, #2
 8005612:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800561c:	e01d      	b.n	800565a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	429a      	cmp	r2, r3
 8005626:	d107      	bne.n	8005638 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2204      	movs	r2, #4
 800562c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005636:	e010      	b.n	800565a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	429a      	cmp	r2, r3
 8005640:	d107      	bne.n	8005652 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2208      	movs	r2, #8
 8005646:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005650:	e003      	b.n	800565a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f7ff ffb4 	bl	80055c8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	771a      	strb	r2, [r3, #28]
}
 8005666:	bf00      	nop
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	429a      	cmp	r2, r3
 8005684:	d10f      	bne.n	80056a6 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d146      	bne.n	8005722 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056a4:	e03d      	b.n	8005722 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d10f      	bne.n	80056d0 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2202      	movs	r2, #2
 80056b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d131      	bne.n	8005722 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056ce:	e028      	b.n	8005722 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d10f      	bne.n	80056fa <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2204      	movs	r2, #4
 80056de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d11c      	bne.n	8005722 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f8:	e013      	b.n	8005722 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	d10e      	bne.n	8005722 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2208      	movs	r2, #8
 8005708:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d107      	bne.n	8005722 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff ff28 	bl	8005578 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	771a      	strb	r2, [r3, #28]
}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	429a      	cmp	r2, r3
 800574c:	d103      	bne.n	8005756 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	771a      	strb	r2, [r3, #28]
 8005754:	e019      	b.n	800578a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	429a      	cmp	r2, r3
 800575e:	d103      	bne.n	8005768 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2202      	movs	r2, #2
 8005764:	771a      	strb	r2, [r3, #28]
 8005766:	e010      	b.n	800578a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	429a      	cmp	r2, r3
 8005770:	d103      	bne.n	800577a <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2204      	movs	r2, #4
 8005776:	771a      	strb	r2, [r3, #28]
 8005778:	e007      	b.n	800578a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	429a      	cmp	r2, r3
 8005782:	d102      	bne.n	800578a <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2208      	movs	r2, #8
 8005788:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f7ff fefe 	bl	800558c <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	771a      	strb	r2, [r3, #28]
}
 8005796:	bf00      	nop
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a40      	ldr	r2, [pc, #256]	; (80058b4 <TIM_Base_SetConfig+0x114>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d013      	beq.n	80057e0 <TIM_Base_SetConfig+0x40>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057be:	d00f      	beq.n	80057e0 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a3d      	ldr	r2, [pc, #244]	; (80058b8 <TIM_Base_SetConfig+0x118>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00b      	beq.n	80057e0 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a3c      	ldr	r2, [pc, #240]	; (80058bc <TIM_Base_SetConfig+0x11c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d007      	beq.n	80057e0 <TIM_Base_SetConfig+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a3b      	ldr	r2, [pc, #236]	; (80058c0 <TIM_Base_SetConfig+0x120>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d003      	beq.n	80057e0 <TIM_Base_SetConfig+0x40>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a3a      	ldr	r2, [pc, #232]	; (80058c4 <TIM_Base_SetConfig+0x124>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d108      	bne.n	80057f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a2f      	ldr	r2, [pc, #188]	; (80058b4 <TIM_Base_SetConfig+0x114>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d02b      	beq.n	8005852 <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005800:	d027      	beq.n	8005852 <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2c      	ldr	r2, [pc, #176]	; (80058b8 <TIM_Base_SetConfig+0x118>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d023      	beq.n	8005852 <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a2b      	ldr	r2, [pc, #172]	; (80058bc <TIM_Base_SetConfig+0x11c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01f      	beq.n	8005852 <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a2a      	ldr	r2, [pc, #168]	; (80058c0 <TIM_Base_SetConfig+0x120>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d01b      	beq.n	8005852 <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a29      	ldr	r2, [pc, #164]	; (80058c4 <TIM_Base_SetConfig+0x124>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d017      	beq.n	8005852 <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a28      	ldr	r2, [pc, #160]	; (80058c8 <TIM_Base_SetConfig+0x128>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d013      	beq.n	8005852 <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a27      	ldr	r2, [pc, #156]	; (80058cc <TIM_Base_SetConfig+0x12c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00f      	beq.n	8005852 <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a26      	ldr	r2, [pc, #152]	; (80058d0 <TIM_Base_SetConfig+0x130>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00b      	beq.n	8005852 <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a25      	ldr	r2, [pc, #148]	; (80058d4 <TIM_Base_SetConfig+0x134>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d007      	beq.n	8005852 <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a24      	ldr	r2, [pc, #144]	; (80058d8 <TIM_Base_SetConfig+0x138>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d003      	beq.n	8005852 <TIM_Base_SetConfig+0xb2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a23      	ldr	r2, [pc, #140]	; (80058dc <TIM_Base_SetConfig+0x13c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d108      	bne.n	8005864 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a0a      	ldr	r2, [pc, #40]	; (80058b4 <TIM_Base_SetConfig+0x114>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d003      	beq.n	8005898 <TIM_Base_SetConfig+0xf8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a0c      	ldr	r2, [pc, #48]	; (80058c4 <TIM_Base_SetConfig+0x124>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d103      	bne.n	80058a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	615a      	str	r2, [r3, #20]
}
 80058a6:	bf00      	nop
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40010000 	.word	0x40010000
 80058b8:	40000400 	.word	0x40000400
 80058bc:	40000800 	.word	0x40000800
 80058c0:	40000c00 	.word	0x40000c00
 80058c4:	40010400 	.word	0x40010400
 80058c8:	40014000 	.word	0x40014000
 80058cc:	40014400 	.word	0x40014400
 80058d0:	40014800 	.word	0x40014800
 80058d4:	40001800 	.word	0x40001800
 80058d8:	40001c00 	.word	0x40001c00
 80058dc:	40002000 	.word	0x40002000

080058e0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f023 0307 	bic.w	r3, r3, #7
 800590a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b70      	cmp	r3, #112	; 0x70
 8005924:	d01a      	beq.n	800595c <TIM_SlaveTimer_SetConfig+0x7c>
 8005926:	2b70      	cmp	r3, #112	; 0x70
 8005928:	d860      	bhi.n	80059ec <TIM_SlaveTimer_SetConfig+0x10c>
 800592a:	2b60      	cmp	r3, #96	; 0x60
 800592c:	d054      	beq.n	80059d8 <TIM_SlaveTimer_SetConfig+0xf8>
 800592e:	2b60      	cmp	r3, #96	; 0x60
 8005930:	d85c      	bhi.n	80059ec <TIM_SlaveTimer_SetConfig+0x10c>
 8005932:	2b50      	cmp	r3, #80	; 0x50
 8005934:	d046      	beq.n	80059c4 <TIM_SlaveTimer_SetConfig+0xe4>
 8005936:	2b50      	cmp	r3, #80	; 0x50
 8005938:	d858      	bhi.n	80059ec <TIM_SlaveTimer_SetConfig+0x10c>
 800593a:	2b40      	cmp	r3, #64	; 0x40
 800593c:	d019      	beq.n	8005972 <TIM_SlaveTimer_SetConfig+0x92>
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	d854      	bhi.n	80059ec <TIM_SlaveTimer_SetConfig+0x10c>
 8005942:	2b30      	cmp	r3, #48	; 0x30
 8005944:	d054      	beq.n	80059f0 <TIM_SlaveTimer_SetConfig+0x110>
 8005946:	2b30      	cmp	r3, #48	; 0x30
 8005948:	d850      	bhi.n	80059ec <TIM_SlaveTimer_SetConfig+0x10c>
 800594a:	2b20      	cmp	r3, #32
 800594c:	d050      	beq.n	80059f0 <TIM_SlaveTimer_SetConfig+0x110>
 800594e:	2b20      	cmp	r3, #32
 8005950:	d84c      	bhi.n	80059ec <TIM_SlaveTimer_SetConfig+0x10c>
 8005952:	2b00      	cmp	r3, #0
 8005954:	d04c      	beq.n	80059f0 <TIM_SlaveTimer_SetConfig+0x110>
 8005956:	2b10      	cmp	r3, #16
 8005958:	d04a      	beq.n	80059f0 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800595a:	e047      	b.n	80059ec <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6818      	ldr	r0, [r3, #0]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	68d9      	ldr	r1, [r3, #12]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	f000 f9ea 	bl	8005d44 <TIM_ETR_SetConfig>
      break;
 8005970:	e03f      	b.n	80059f2 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b05      	cmp	r3, #5
 8005978:	d101      	bne.n	800597e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e03a      	b.n	80059f4 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6a1a      	ldr	r2, [r3, #32]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0201 	bic.w	r2, r2, #1
 8005994:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059a4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	011b      	lsls	r3, r3, #4
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	621a      	str	r2, [r3, #32]
      break;
 80059c2:	e016      	b.n	80059f2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6818      	ldr	r0, [r3, #0]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	6899      	ldr	r1, [r3, #8]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	461a      	mov	r2, r3
 80059d2:	f000 f887 	bl	8005ae4 <TIM_TI1_ConfigInputStage>
      break;
 80059d6:	e00c      	b.n	80059f2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6818      	ldr	r0, [r3, #0]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	6899      	ldr	r1, [r3, #8]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	461a      	mov	r2, r3
 80059e6:	f000 f8e9 	bl	8005bbc <TIM_TI2_ConfigInputStage>
      break;
 80059ea:	e002      	b.n	80059f2 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80059ec:	bf00      	nop
 80059ee:	e000      	b.n	80059f2 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80059f0:	bf00      	nop
  }
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f023 0201 	bic.w	r2, r3, #1
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4a28      	ldr	r2, [pc, #160]	; (8005ac8 <TIM_TI1_SetConfig+0xcc>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d01b      	beq.n	8005a62 <TIM_TI1_SetConfig+0x66>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a30:	d017      	beq.n	8005a62 <TIM_TI1_SetConfig+0x66>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4a25      	ldr	r2, [pc, #148]	; (8005acc <TIM_TI1_SetConfig+0xd0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d013      	beq.n	8005a62 <TIM_TI1_SetConfig+0x66>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4a24      	ldr	r2, [pc, #144]	; (8005ad0 <TIM_TI1_SetConfig+0xd4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00f      	beq.n	8005a62 <TIM_TI1_SetConfig+0x66>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4a23      	ldr	r2, [pc, #140]	; (8005ad4 <TIM_TI1_SetConfig+0xd8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00b      	beq.n	8005a62 <TIM_TI1_SetConfig+0x66>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4a22      	ldr	r2, [pc, #136]	; (8005ad8 <TIM_TI1_SetConfig+0xdc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d007      	beq.n	8005a62 <TIM_TI1_SetConfig+0x66>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4a21      	ldr	r2, [pc, #132]	; (8005adc <TIM_TI1_SetConfig+0xe0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d003      	beq.n	8005a62 <TIM_TI1_SetConfig+0x66>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4a20      	ldr	r2, [pc, #128]	; (8005ae0 <TIM_TI1_SetConfig+0xe4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d101      	bne.n	8005a66 <TIM_TI1_SetConfig+0x6a>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e000      	b.n	8005a68 <TIM_TI1_SetConfig+0x6c>
 8005a66:	2300      	movs	r3, #0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f023 0303 	bic.w	r3, r3, #3
 8005a72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	e003      	b.n	8005a86 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f043 0301 	orr.w	r3, r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f023 030a 	bic.w	r3, r3, #10
 8005aa0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f003 030a 	and.w	r3, r3, #10
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40010000 	.word	0x40010000
 8005acc:	40000400 	.word	0x40000400
 8005ad0:	40000800 	.word	0x40000800
 8005ad4:	40000c00 	.word	0x40000c00
 8005ad8:	40010400 	.word	0x40010400
 8005adc:	40014000 	.word	0x40014000
 8005ae0:	40001800 	.word	0x40001800

08005ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	f023 0201 	bic.w	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f023 030a 	bic.w	r3, r3, #10
 8005b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b087      	sub	sp, #28
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	607a      	str	r2, [r7, #4]
 8005b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	f023 0210 	bic.w	r2, r3, #16
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	031b      	lsls	r3, r3, #12
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	621a      	str	r2, [r3, #32]
}
 8005bb0:	bf00      	nop
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	f023 0210 	bic.w	r2, r3, #16
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005be6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	031b      	lsls	r3, r3, #12
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bf8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	621a      	str	r2, [r3, #32]
}
 8005c10:	bf00      	nop
 8005c12:	371c      	adds	r7, #28
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f023 0303 	bic.w	r3, r3, #3
 8005c48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005c6c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	621a      	str	r2, [r3, #32]
}
 8005c88:	bf00      	nop
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cd2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	031b      	lsls	r3, r3, #12
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005ce6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	031b      	lsls	r3, r3, #12
 8005cec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b085      	sub	sp, #20
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	f043 0307 	orr.w	r3, r3, #7
 8005d30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	609a      	str	r2, [r3, #8]
}
 8005d38:	bf00      	nop
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	021a      	lsls	r2, r3, #8
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	609a      	str	r2, [r3, #8]
}
 8005d78:	bf00      	nop
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	2201      	movs	r2, #1
 8005d98:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a1a      	ldr	r2, [r3, #32]
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	43db      	mvns	r3, r3
 8005da6:	401a      	ands	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a1a      	ldr	r2, [r3, #32]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f003 031f 	and.w	r3, r3, #31
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	621a      	str	r2, [r3, #32]
}
 8005dc2:	bf00      	nop
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
	...

08005dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d101      	bne.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005de4:	2302      	movs	r3, #2
 8005de6:	e05a      	b.n	8005e9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a21      	ldr	r2, [pc, #132]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d022      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e34:	d01d      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a1d      	ldr	r2, [pc, #116]	; (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d018      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a1b      	ldr	r2, [pc, #108]	; (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d013      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a1a      	ldr	r2, [pc, #104]	; (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d00e      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a18      	ldr	r2, [pc, #96]	; (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d009      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a17      	ldr	r2, [pc, #92]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d004      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a15      	ldr	r2, [pc, #84]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d10c      	bne.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40010000 	.word	0x40010000
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40000800 	.word	0x40000800
 8005eb8:	40000c00 	.word	0x40000c00
 8005ebc:	40010400 	.word	0x40010400
 8005ec0:	40014000 	.word	0x40014000
 8005ec4:	40001800 	.word	0x40001800

08005ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e03f      	b.n	8005f82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fc fc0e 	bl	8002738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2224      	movs	r2, #36	; 0x24
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fcf1 	bl	800691c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	695a      	ldr	r2, [r3, #20]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b085      	sub	sp, #20
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	4613      	mov	r3, r2
 8005f96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d130      	bne.n	8006006 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <HAL_UART_Transmit_IT+0x26>
 8005faa:	88fb      	ldrh	r3, [r7, #6]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e029      	b.n	8006008 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_UART_Transmit_IT+0x38>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e022      	b.n	8006008 <HAL_UART_Transmit_IT+0x7e>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	88fa      	ldrh	r2, [r7, #6]
 8005fd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	88fa      	ldrh	r2, [r7, #6]
 8005fda:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2221      	movs	r2, #33	; 0x21
 8005fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006000:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	e000      	b.n	8006008 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006006:	2302      	movs	r3, #2
  }
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b20      	cmp	r3, #32
 800602c:	d11d      	bne.n	800606a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <HAL_UART_Receive_IT+0x26>
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e016      	b.n	800606c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006044:	2b01      	cmp	r3, #1
 8006046:	d101      	bne.n	800604c <HAL_UART_Receive_IT+0x38>
 8006048:	2302      	movs	r3, #2
 800604a:	e00f      	b.n	800606c <HAL_UART_Receive_IT+0x58>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800605a:	88fb      	ldrh	r3, [r7, #6]
 800605c:	461a      	mov	r2, r3
 800605e:	68b9      	ldr	r1, [r7, #8]
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 faca 	bl	80065fa <UART_Start_Receive_IT>
 8006066:	4603      	mov	r3, r0
 8006068:	e000      	b.n	800606c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800606a:	2302      	movs	r3, #2
  }
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	4613      	mov	r3, r2
 8006080:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b20      	cmp	r3, #32
 800608c:	d153      	bne.n	8006136 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <HAL_UART_Transmit_DMA+0x26>
 8006094:	88fb      	ldrh	r3, [r7, #6]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e04c      	b.n	8006138 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_UART_Transmit_DMA+0x38>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e045      	b.n	8006138 <HAL_UART_Transmit_DMA+0xc4>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	88fa      	ldrh	r2, [r7, #6]
 80060be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2221      	movs	r2, #33	; 0x21
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d8:	4a19      	ldr	r2, [pc, #100]	; (8006140 <HAL_UART_Transmit_DMA+0xcc>)
 80060da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e0:	4a18      	ldr	r2, [pc, #96]	; (8006144 <HAL_UART_Transmit_DMA+0xd0>)
 80060e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e8:	4a17      	ldr	r2, [pc, #92]	; (8006148 <HAL_UART_Transmit_DMA+0xd4>)
 80060ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f0:	2200      	movs	r2, #0
 80060f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80060f4:	f107 0308 	add.w	r3, r7, #8
 80060f8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	6819      	ldr	r1, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3304      	adds	r3, #4
 8006108:	461a      	mov	r2, r3
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	f7fc ff8c 	bl	8003028 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006118:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695a      	ldr	r2, [r3, #20]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006130:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	e000      	b.n	8006138 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006136:	2302      	movs	r3, #2
  }
}
 8006138:	4618      	mov	r0, r3
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	080064f9 	.word	0x080064f9
 8006144:	0800654b 	.word	0x0800654b
 8006148:	08006567 	.word	0x08006567

0800614c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08a      	sub	sp, #40	; 0x28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800616c:	2300      	movs	r3, #0
 800616e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006170:	2300      	movs	r3, #0
 8006172:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10d      	bne.n	800619e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b00      	cmp	r3, #0
 800618a:	d008      	beq.n	800619e <HAL_UART_IRQHandler+0x52>
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fb28 	bl	80067ec <UART_Receive_IT>
      return;
 800619c:	e17c      	b.n	8006498 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 80b1 	beq.w	8006308 <HAL_UART_IRQHandler+0x1bc>
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d105      	bne.n	80061bc <HAL_UART_IRQHandler+0x70>
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 80a6 	beq.w	8006308 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <HAL_UART_IRQHandler+0x90>
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d005      	beq.n	80061dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	f043 0201 	orr.w	r2, r3, #1
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <HAL_UART_IRQHandler+0xb0>
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	f043 0202 	orr.w	r2, r3, #2
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <HAL_UART_IRQHandler+0xd0>
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d005      	beq.n	800621c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006214:	f043 0204 	orr.w	r2, r3, #4
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00f      	beq.n	8006246 <HAL_UART_IRQHandler+0xfa>
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	f003 0320 	and.w	r3, r3, #32
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <HAL_UART_IRQHandler+0xee>
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	f043 0208 	orr.w	r2, r3, #8
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 811f 	beq.w	800648e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <HAL_UART_IRQHandler+0x11e>
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fac1 	bl	80067ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006274:	2b40      	cmp	r3, #64	; 0x40
 8006276:	bf0c      	ite	eq
 8006278:	2301      	moveq	r3, #1
 800627a:	2300      	movne	r3, #0
 800627c:	b2db      	uxtb	r3, r3
 800627e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006284:	f003 0308 	and.w	r3, r3, #8
 8006288:	2b00      	cmp	r3, #0
 800628a:	d102      	bne.n	8006292 <HAL_UART_IRQHandler+0x146>
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d031      	beq.n	80062f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fa01 	bl	800669a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a2:	2b40      	cmp	r3, #64	; 0x40
 80062a4:	d123      	bne.n	80062ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	695a      	ldr	r2, [r3, #20]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d013      	beq.n	80062e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c2:	4a77      	ldr	r2, [pc, #476]	; (80064a0 <HAL_UART_IRQHandler+0x354>)
 80062c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fc ff74 	bl	80031b8 <HAL_DMA_Abort_IT>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d016      	beq.n	8006304 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062e0:	4610      	mov	r0, r2
 80062e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e4:	e00e      	b.n	8006304 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f8f0 	bl	80064cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ec:	e00a      	b.n	8006304 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f8ec 	bl	80064cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f4:	e006      	b.n	8006304 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f8e8 	bl	80064cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006302:	e0c4      	b.n	800648e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006304:	bf00      	nop
    return;
 8006306:	e0c2      	b.n	800648e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630c:	2b01      	cmp	r3, #1
 800630e:	f040 80a2 	bne.w	8006456 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 809c 	beq.w	8006456 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 8096 	beq.w	8006456 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634a:	2b40      	cmp	r3, #64	; 0x40
 800634c:	d14f      	bne.n	80063ee <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006358:	8a3b      	ldrh	r3, [r7, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 8099 	beq.w	8006492 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006364:	8a3a      	ldrh	r2, [r7, #16]
 8006366:	429a      	cmp	r2, r3
 8006368:	f080 8093 	bcs.w	8006492 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	8a3a      	ldrh	r2, [r7, #16]
 8006370:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800637c:	d02b      	beq.n	80063d6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68da      	ldr	r2, [r3, #12]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800638c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	695a      	ldr	r2, [r3, #20]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695a      	ldr	r2, [r3, #20]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ac:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0210 	bic.w	r2, r2, #16
 80063ca:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fc fe81 	bl	80030d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063de:	b29b      	uxth	r3, r3
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	4619      	mov	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f87a 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80063ec:	e051      	b.n	8006492 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d047      	beq.n	8006496 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006406:	8a7b      	ldrh	r3, [r7, #18]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d044      	beq.n	8006496 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800641a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695a      	ldr	r2, [r3, #20]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0201 	bic.w	r2, r2, #1
 800642a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0210 	bic.w	r2, r2, #16
 8006448:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800644a:	8a7b      	ldrh	r3, [r7, #18]
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f846 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006454:	e01f      	b.n	8006496 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800645c:	2b00      	cmp	r3, #0
 800645e:	d008      	beq.n	8006472 <HAL_UART_IRQHandler+0x326>
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f956 	bl	800671c <UART_Transmit_IT>
    return;
 8006470:	e012      	b.n	8006498 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00d      	beq.n	8006498 <HAL_UART_IRQHandler+0x34c>
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006482:	2b00      	cmp	r3, #0
 8006484:	d008      	beq.n	8006498 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f998 	bl	80067bc <UART_EndTransmit_IT>
    return;
 800648c:	e004      	b.n	8006498 <HAL_UART_IRQHandler+0x34c>
    return;
 800648e:	bf00      	nop
 8006490:	e002      	b.n	8006498 <HAL_UART_IRQHandler+0x34c>
      return;
 8006492:	bf00      	nop
 8006494:	e000      	b.n	8006498 <HAL_UART_IRQHandler+0x34c>
      return;
 8006496:	bf00      	nop
  }
}
 8006498:	3728      	adds	r7, #40	; 0x28
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	080066f5 	.word	0x080066f5

080064a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006504:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006510:	2b00      	cmp	r3, #0
 8006512:	d113      	bne.n	800653c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695a      	ldr	r2, [r3, #20]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006528:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006538:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800653a:	e002      	b.n	8006542 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f7ff ffb1 	bl	80064a4 <HAL_UART_TxCpltCallback>
}
 8006542:	bf00      	nop
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006556:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f7ff ffad 	bl	80064b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800655e:	bf00      	nop
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800656e:	2300      	movs	r3, #0
 8006570:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006576:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006582:	2b80      	cmp	r3, #128	; 0x80
 8006584:	bf0c      	ite	eq
 8006586:	2301      	moveq	r3, #1
 8006588:	2300      	movne	r3, #0
 800658a:	b2db      	uxtb	r3, r3
 800658c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b21      	cmp	r3, #33	; 0x21
 8006598:	d108      	bne.n	80065ac <UART_DMAError+0x46>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d005      	beq.n	80065ac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2200      	movs	r2, #0
 80065a4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80065a6:	68b8      	ldr	r0, [r7, #8]
 80065a8:	f000 f861 	bl	800666e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b6:	2b40      	cmp	r3, #64	; 0x40
 80065b8:	bf0c      	ite	eq
 80065ba:	2301      	moveq	r3, #1
 80065bc:	2300      	movne	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b22      	cmp	r3, #34	; 0x22
 80065cc:	d108      	bne.n	80065e0 <UART_DMAError+0x7a>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d005      	beq.n	80065e0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2200      	movs	r2, #0
 80065d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80065da:	68b8      	ldr	r0, [r7, #8]
 80065dc:	f000 f85d 	bl	800669a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e4:	f043 0210 	orr.w	r2, r3, #16
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065ec:	68b8      	ldr	r0, [r7, #8]
 80065ee:	f7ff ff6d 	bl	80064cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065f2:	bf00      	nop
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b085      	sub	sp, #20
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	4613      	mov	r3, r2
 8006606:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	88fa      	ldrh	r2, [r7, #6]
 8006612:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	88fa      	ldrh	r2, [r7, #6]
 8006618:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2222      	movs	r2, #34	; 0x22
 8006624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800663e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695a      	ldr	r2, [r3, #20]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0201 	orr.w	r2, r2, #1
 800664e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0220 	orr.w	r2, r2, #32
 800665e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006684:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066b0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695a      	ldr	r2, [r3, #20]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0201 	bic.w	r2, r2, #1
 80066c0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d107      	bne.n	80066da <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0210 	bic.w	r2, r2, #16
 80066d8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2220      	movs	r2, #32
 80066de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f7ff fedc 	bl	80064cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006714:	bf00      	nop
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b21      	cmp	r3, #33	; 0x21
 800672e:	d13e      	bne.n	80067ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006738:	d114      	bne.n	8006764 <UART_Transmit_IT+0x48>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d110      	bne.n	8006764 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	461a      	mov	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006756:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	1c9a      	adds	r2, r3, #2
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	621a      	str	r2, [r3, #32]
 8006762:	e008      	b.n	8006776 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	1c59      	adds	r1, r3, #1
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6211      	str	r1, [r2, #32]
 800676e:	781a      	ldrb	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800677a:	b29b      	uxth	r3, r3
 800677c:	3b01      	subs	r3, #1
 800677e:	b29b      	uxth	r3, r3
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	4619      	mov	r1, r3
 8006784:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10f      	bne.n	80067aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006798:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	e000      	b.n	80067b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067ae:	2302      	movs	r3, #2
  }
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7ff fe61 	bl	80064a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b22      	cmp	r3, #34	; 0x22
 80067fe:	f040 8087 	bne.w	8006910 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680a:	d117      	bne.n	800683c <UART_Receive_IT+0x50>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d113      	bne.n	800683c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	b29b      	uxth	r3, r3
 8006826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682a:	b29a      	uxth	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006834:	1c9a      	adds	r2, r3, #2
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	629a      	str	r2, [r3, #40]	; 0x28
 800683a:	e026      	b.n	800688a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006840:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006842:	2300      	movs	r3, #0
 8006844:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684e:	d007      	beq.n	8006860 <UART_Receive_IT+0x74>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10a      	bne.n	800686e <UART_Receive_IT+0x82>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d106      	bne.n	800686e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	b2da      	uxtb	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	e008      	b.n	8006880 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800687a:	b2da      	uxtb	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800688e:	b29b      	uxth	r3, r3
 8006890:	3b01      	subs	r3, #1
 8006892:	b29b      	uxth	r3, r3
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	4619      	mov	r1, r3
 8006898:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800689a:	2b00      	cmp	r3, #0
 800689c:	d136      	bne.n	800690c <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0220 	bic.w	r2, r2, #32
 80068ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695a      	ldr	r2, [r3, #20]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0201 	bic.w	r2, r2, #1
 80068cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d10e      	bne.n	80068fc <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0210 	bic.w	r2, r2, #16
 80068ec:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7ff fdf3 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
 80068fa:	e002      	b.n	8006902 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7fb f993 	bl	8001c28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	e002      	b.n	8006912 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800690c:	2300      	movs	r3, #0
 800690e:	e000      	b.n	8006912 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006910:	2302      	movs	r3, #2
  }
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800691c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006920:	b09f      	sub	sp, #124	; 0x7c
 8006922:	af00      	add	r7, sp, #0
 8006924:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006932:	68d9      	ldr	r1, [r3, #12]
 8006934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	ea40 0301 	orr.w	r3, r0, r1
 800693c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800693e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006940:	689a      	ldr	r2, [r3, #8]
 8006942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	431a      	orrs	r2, r3
 8006948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	431a      	orrs	r2, r3
 800694e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	4313      	orrs	r3, r2
 8006954:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006960:	f021 010c 	bic.w	r1, r1, #12
 8006964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800696a:	430b      	orrs	r3, r1
 800696c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800696e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800697a:	6999      	ldr	r1, [r3, #24]
 800697c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	ea40 0301 	orr.w	r3, r0, r1
 8006984:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	4bc5      	ldr	r3, [pc, #788]	; (8006ca0 <UART_SetConfig+0x384>)
 800698c:	429a      	cmp	r2, r3
 800698e:	d004      	beq.n	800699a <UART_SetConfig+0x7e>
 8006990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	4bc3      	ldr	r3, [pc, #780]	; (8006ca4 <UART_SetConfig+0x388>)
 8006996:	429a      	cmp	r2, r3
 8006998:	d103      	bne.n	80069a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800699a:	f7fd fcbb 	bl	8004314 <HAL_RCC_GetPCLK2Freq>
 800699e:	6778      	str	r0, [r7, #116]	; 0x74
 80069a0:	e002      	b.n	80069a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069a2:	f7fd fca3 	bl	80042ec <HAL_RCC_GetPCLK1Freq>
 80069a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b0:	f040 80b6 	bne.w	8006b20 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069b6:	461c      	mov	r4, r3
 80069b8:	f04f 0500 	mov.w	r5, #0
 80069bc:	4622      	mov	r2, r4
 80069be:	462b      	mov	r3, r5
 80069c0:	1891      	adds	r1, r2, r2
 80069c2:	6439      	str	r1, [r7, #64]	; 0x40
 80069c4:	415b      	adcs	r3, r3
 80069c6:	647b      	str	r3, [r7, #68]	; 0x44
 80069c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069cc:	1912      	adds	r2, r2, r4
 80069ce:	eb45 0303 	adc.w	r3, r5, r3
 80069d2:	f04f 0000 	mov.w	r0, #0
 80069d6:	f04f 0100 	mov.w	r1, #0
 80069da:	00d9      	lsls	r1, r3, #3
 80069dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069e0:	00d0      	lsls	r0, r2, #3
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	1911      	adds	r1, r2, r4
 80069e8:	6639      	str	r1, [r7, #96]	; 0x60
 80069ea:	416b      	adcs	r3, r5
 80069ec:	667b      	str	r3, [r7, #100]	; 0x64
 80069ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	461a      	mov	r2, r3
 80069f4:	f04f 0300 	mov.w	r3, #0
 80069f8:	1891      	adds	r1, r2, r2
 80069fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80069fc:	415b      	adcs	r3, r3
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006a08:	f7fa f93e 	bl	8000c88 <__aeabi_uldivmod>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4ba5      	ldr	r3, [pc, #660]	; (8006ca8 <UART_SetConfig+0x38c>)
 8006a12:	fba3 2302 	umull	r2, r3, r3, r2
 8006a16:	095b      	lsrs	r3, r3, #5
 8006a18:	011e      	lsls	r6, r3, #4
 8006a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a1c:	461c      	mov	r4, r3
 8006a1e:	f04f 0500 	mov.w	r5, #0
 8006a22:	4622      	mov	r2, r4
 8006a24:	462b      	mov	r3, r5
 8006a26:	1891      	adds	r1, r2, r2
 8006a28:	6339      	str	r1, [r7, #48]	; 0x30
 8006a2a:	415b      	adcs	r3, r3
 8006a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006a32:	1912      	adds	r2, r2, r4
 8006a34:	eb45 0303 	adc.w	r3, r5, r3
 8006a38:	f04f 0000 	mov.w	r0, #0
 8006a3c:	f04f 0100 	mov.w	r1, #0
 8006a40:	00d9      	lsls	r1, r3, #3
 8006a42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a46:	00d0      	lsls	r0, r2, #3
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	1911      	adds	r1, r2, r4
 8006a4e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a50:	416b      	adcs	r3, r5
 8006a52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f04f 0300 	mov.w	r3, #0
 8006a5e:	1891      	adds	r1, r2, r2
 8006a60:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a62:	415b      	adcs	r3, r3
 8006a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006a6e:	f7fa f90b 	bl	8000c88 <__aeabi_uldivmod>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4b8c      	ldr	r3, [pc, #560]	; (8006ca8 <UART_SetConfig+0x38c>)
 8006a78:	fba3 1302 	umull	r1, r3, r3, r2
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	2164      	movs	r1, #100	; 0x64
 8006a80:	fb01 f303 	mul.w	r3, r1, r3
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	3332      	adds	r3, #50	; 0x32
 8006a8a:	4a87      	ldr	r2, [pc, #540]	; (8006ca8 <UART_SetConfig+0x38c>)
 8006a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a90:	095b      	lsrs	r3, r3, #5
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a98:	441e      	add	r6, r3
 8006a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f04f 0100 	mov.w	r1, #0
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	1894      	adds	r4, r2, r2
 8006aa8:	623c      	str	r4, [r7, #32]
 8006aaa:	415b      	adcs	r3, r3
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
 8006aae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ab2:	1812      	adds	r2, r2, r0
 8006ab4:	eb41 0303 	adc.w	r3, r1, r3
 8006ab8:	f04f 0400 	mov.w	r4, #0
 8006abc:	f04f 0500 	mov.w	r5, #0
 8006ac0:	00dd      	lsls	r5, r3, #3
 8006ac2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ac6:	00d4      	lsls	r4, r2, #3
 8006ac8:	4622      	mov	r2, r4
 8006aca:	462b      	mov	r3, r5
 8006acc:	1814      	adds	r4, r2, r0
 8006ace:	653c      	str	r4, [r7, #80]	; 0x50
 8006ad0:	414b      	adcs	r3, r1
 8006ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8006ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	f04f 0300 	mov.w	r3, #0
 8006ade:	1891      	adds	r1, r2, r2
 8006ae0:	61b9      	str	r1, [r7, #24]
 8006ae2:	415b      	adcs	r3, r3
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006aea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006aee:	f7fa f8cb 	bl	8000c88 <__aeabi_uldivmod>
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	4b6c      	ldr	r3, [pc, #432]	; (8006ca8 <UART_SetConfig+0x38c>)
 8006af8:	fba3 1302 	umull	r1, r3, r3, r2
 8006afc:	095b      	lsrs	r3, r3, #5
 8006afe:	2164      	movs	r1, #100	; 0x64
 8006b00:	fb01 f303 	mul.w	r3, r1, r3
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	3332      	adds	r3, #50	; 0x32
 8006b0a:	4a67      	ldr	r2, [pc, #412]	; (8006ca8 <UART_SetConfig+0x38c>)
 8006b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b10:	095b      	lsrs	r3, r3, #5
 8006b12:	f003 0207 	and.w	r2, r3, #7
 8006b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4432      	add	r2, r6
 8006b1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b1e:	e0b9      	b.n	8006c94 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b22:	461c      	mov	r4, r3
 8006b24:	f04f 0500 	mov.w	r5, #0
 8006b28:	4622      	mov	r2, r4
 8006b2a:	462b      	mov	r3, r5
 8006b2c:	1891      	adds	r1, r2, r2
 8006b2e:	6139      	str	r1, [r7, #16]
 8006b30:	415b      	adcs	r3, r3
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b38:	1912      	adds	r2, r2, r4
 8006b3a:	eb45 0303 	adc.w	r3, r5, r3
 8006b3e:	f04f 0000 	mov.w	r0, #0
 8006b42:	f04f 0100 	mov.w	r1, #0
 8006b46:	00d9      	lsls	r1, r3, #3
 8006b48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b4c:	00d0      	lsls	r0, r2, #3
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	eb12 0804 	adds.w	r8, r2, r4
 8006b56:	eb43 0905 	adc.w	r9, r3, r5
 8006b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f04f 0100 	mov.w	r1, #0
 8006b64:	f04f 0200 	mov.w	r2, #0
 8006b68:	f04f 0300 	mov.w	r3, #0
 8006b6c:	008b      	lsls	r3, r1, #2
 8006b6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b72:	0082      	lsls	r2, r0, #2
 8006b74:	4640      	mov	r0, r8
 8006b76:	4649      	mov	r1, r9
 8006b78:	f7fa f886 	bl	8000c88 <__aeabi_uldivmod>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4b49      	ldr	r3, [pc, #292]	; (8006ca8 <UART_SetConfig+0x38c>)
 8006b82:	fba3 2302 	umull	r2, r3, r3, r2
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	011e      	lsls	r6, r3, #4
 8006b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f04f 0100 	mov.w	r1, #0
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	1894      	adds	r4, r2, r2
 8006b98:	60bc      	str	r4, [r7, #8]
 8006b9a:	415b      	adcs	r3, r3
 8006b9c:	60fb      	str	r3, [r7, #12]
 8006b9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ba2:	1812      	adds	r2, r2, r0
 8006ba4:	eb41 0303 	adc.w	r3, r1, r3
 8006ba8:	f04f 0400 	mov.w	r4, #0
 8006bac:	f04f 0500 	mov.w	r5, #0
 8006bb0:	00dd      	lsls	r5, r3, #3
 8006bb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006bb6:	00d4      	lsls	r4, r2, #3
 8006bb8:	4622      	mov	r2, r4
 8006bba:	462b      	mov	r3, r5
 8006bbc:	1814      	adds	r4, r2, r0
 8006bbe:	64bc      	str	r4, [r7, #72]	; 0x48
 8006bc0:	414b      	adcs	r3, r1
 8006bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f04f 0100 	mov.w	r1, #0
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	008b      	lsls	r3, r1, #2
 8006bd8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006bdc:	0082      	lsls	r2, r0, #2
 8006bde:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006be2:	f7fa f851 	bl	8000c88 <__aeabi_uldivmod>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	4b2f      	ldr	r3, [pc, #188]	; (8006ca8 <UART_SetConfig+0x38c>)
 8006bec:	fba3 1302 	umull	r1, r3, r3, r2
 8006bf0:	095b      	lsrs	r3, r3, #5
 8006bf2:	2164      	movs	r1, #100	; 0x64
 8006bf4:	fb01 f303 	mul.w	r3, r1, r3
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	3332      	adds	r3, #50	; 0x32
 8006bfe:	4a2a      	ldr	r2, [pc, #168]	; (8006ca8 <UART_SetConfig+0x38c>)
 8006c00:	fba2 2303 	umull	r2, r3, r2, r3
 8006c04:	095b      	lsrs	r3, r3, #5
 8006c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c0a:	441e      	add	r6, r3
 8006c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f04f 0100 	mov.w	r1, #0
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	1894      	adds	r4, r2, r2
 8006c1a:	603c      	str	r4, [r7, #0]
 8006c1c:	415b      	adcs	r3, r3
 8006c1e:	607b      	str	r3, [r7, #4]
 8006c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c24:	1812      	adds	r2, r2, r0
 8006c26:	eb41 0303 	adc.w	r3, r1, r3
 8006c2a:	f04f 0400 	mov.w	r4, #0
 8006c2e:	f04f 0500 	mov.w	r5, #0
 8006c32:	00dd      	lsls	r5, r3, #3
 8006c34:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c38:	00d4      	lsls	r4, r2, #3
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	462b      	mov	r3, r5
 8006c3e:	eb12 0a00 	adds.w	sl, r2, r0
 8006c42:	eb43 0b01 	adc.w	fp, r3, r1
 8006c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f04f 0100 	mov.w	r1, #0
 8006c50:	f04f 0200 	mov.w	r2, #0
 8006c54:	f04f 0300 	mov.w	r3, #0
 8006c58:	008b      	lsls	r3, r1, #2
 8006c5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c5e:	0082      	lsls	r2, r0, #2
 8006c60:	4650      	mov	r0, sl
 8006c62:	4659      	mov	r1, fp
 8006c64:	f7fa f810 	bl	8000c88 <__aeabi_uldivmod>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ca8 <UART_SetConfig+0x38c>)
 8006c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	2164      	movs	r1, #100	; 0x64
 8006c76:	fb01 f303 	mul.w	r3, r1, r3
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	011b      	lsls	r3, r3, #4
 8006c7e:	3332      	adds	r3, #50	; 0x32
 8006c80:	4a09      	ldr	r2, [pc, #36]	; (8006ca8 <UART_SetConfig+0x38c>)
 8006c82:	fba2 2303 	umull	r2, r3, r2, r3
 8006c86:	095b      	lsrs	r3, r3, #5
 8006c88:	f003 020f 	and.w	r2, r3, #15
 8006c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4432      	add	r2, r6
 8006c92:	609a      	str	r2, [r3, #8]
}
 8006c94:	bf00      	nop
 8006c96:	377c      	adds	r7, #124	; 0x7c
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9e:	bf00      	nop
 8006ca0:	40011000 	.word	0x40011000
 8006ca4:	40011400 	.word	0x40011400
 8006ca8:	51eb851f 	.word	0x51eb851f

08006cac <__errno>:
 8006cac:	4b01      	ldr	r3, [pc, #4]	; (8006cb4 <__errno+0x8>)
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	20000440 	.word	0x20000440

08006cb8 <__libc_init_array>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	4d0d      	ldr	r5, [pc, #52]	; (8006cf0 <__libc_init_array+0x38>)
 8006cbc:	4c0d      	ldr	r4, [pc, #52]	; (8006cf4 <__libc_init_array+0x3c>)
 8006cbe:	1b64      	subs	r4, r4, r5
 8006cc0:	10a4      	asrs	r4, r4, #2
 8006cc2:	2600      	movs	r6, #0
 8006cc4:	42a6      	cmp	r6, r4
 8006cc6:	d109      	bne.n	8006cdc <__libc_init_array+0x24>
 8006cc8:	4d0b      	ldr	r5, [pc, #44]	; (8006cf8 <__libc_init_array+0x40>)
 8006cca:	4c0c      	ldr	r4, [pc, #48]	; (8006cfc <__libc_init_array+0x44>)
 8006ccc:	f004 fc44 	bl	800b558 <_init>
 8006cd0:	1b64      	subs	r4, r4, r5
 8006cd2:	10a4      	asrs	r4, r4, #2
 8006cd4:	2600      	movs	r6, #0
 8006cd6:	42a6      	cmp	r6, r4
 8006cd8:	d105      	bne.n	8006ce6 <__libc_init_array+0x2e>
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
 8006cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce0:	4798      	blx	r3
 8006ce2:	3601      	adds	r6, #1
 8006ce4:	e7ee      	b.n	8006cc4 <__libc_init_array+0xc>
 8006ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cea:	4798      	blx	r3
 8006cec:	3601      	adds	r6, #1
 8006cee:	e7f2      	b.n	8006cd6 <__libc_init_array+0x1e>
 8006cf0:	0800ba5c 	.word	0x0800ba5c
 8006cf4:	0800ba5c 	.word	0x0800ba5c
 8006cf8:	0800ba5c 	.word	0x0800ba5c
 8006cfc:	0800ba60 	.word	0x0800ba60

08006d00 <memset>:
 8006d00:	4402      	add	r2, r0
 8006d02:	4603      	mov	r3, r0
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d100      	bne.n	8006d0a <memset+0xa>
 8006d08:	4770      	bx	lr
 8006d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d0e:	e7f9      	b.n	8006d04 <memset+0x4>

08006d10 <__cvt>:
 8006d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d14:	ec55 4b10 	vmov	r4, r5, d0
 8006d18:	2d00      	cmp	r5, #0
 8006d1a:	460e      	mov	r6, r1
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	462b      	mov	r3, r5
 8006d20:	bfbb      	ittet	lt
 8006d22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d26:	461d      	movlt	r5, r3
 8006d28:	2300      	movge	r3, #0
 8006d2a:	232d      	movlt	r3, #45	; 0x2d
 8006d2c:	700b      	strb	r3, [r1, #0]
 8006d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d34:	4691      	mov	r9, r2
 8006d36:	f023 0820 	bic.w	r8, r3, #32
 8006d3a:	bfbc      	itt	lt
 8006d3c:	4622      	movlt	r2, r4
 8006d3e:	4614      	movlt	r4, r2
 8006d40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d44:	d005      	beq.n	8006d52 <__cvt+0x42>
 8006d46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d4a:	d100      	bne.n	8006d4e <__cvt+0x3e>
 8006d4c:	3601      	adds	r6, #1
 8006d4e:	2102      	movs	r1, #2
 8006d50:	e000      	b.n	8006d54 <__cvt+0x44>
 8006d52:	2103      	movs	r1, #3
 8006d54:	ab03      	add	r3, sp, #12
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	ab02      	add	r3, sp, #8
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	ec45 4b10 	vmov	d0, r4, r5
 8006d60:	4653      	mov	r3, sl
 8006d62:	4632      	mov	r2, r6
 8006d64:	f001 fdb4 	bl	80088d0 <_dtoa_r>
 8006d68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d6c:	4607      	mov	r7, r0
 8006d6e:	d102      	bne.n	8006d76 <__cvt+0x66>
 8006d70:	f019 0f01 	tst.w	r9, #1
 8006d74:	d022      	beq.n	8006dbc <__cvt+0xac>
 8006d76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d7a:	eb07 0906 	add.w	r9, r7, r6
 8006d7e:	d110      	bne.n	8006da2 <__cvt+0x92>
 8006d80:	783b      	ldrb	r3, [r7, #0]
 8006d82:	2b30      	cmp	r3, #48	; 0x30
 8006d84:	d10a      	bne.n	8006d9c <__cvt+0x8c>
 8006d86:	2200      	movs	r2, #0
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	f7f9 fe9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d92:	b918      	cbnz	r0, 8006d9c <__cvt+0x8c>
 8006d94:	f1c6 0601 	rsb	r6, r6, #1
 8006d98:	f8ca 6000 	str.w	r6, [sl]
 8006d9c:	f8da 3000 	ldr.w	r3, [sl]
 8006da0:	4499      	add	r9, r3
 8006da2:	2200      	movs	r2, #0
 8006da4:	2300      	movs	r3, #0
 8006da6:	4620      	mov	r0, r4
 8006da8:	4629      	mov	r1, r5
 8006daa:	f7f9 fe8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dae:	b108      	cbz	r0, 8006db4 <__cvt+0xa4>
 8006db0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006db4:	2230      	movs	r2, #48	; 0x30
 8006db6:	9b03      	ldr	r3, [sp, #12]
 8006db8:	454b      	cmp	r3, r9
 8006dba:	d307      	bcc.n	8006dcc <__cvt+0xbc>
 8006dbc:	9b03      	ldr	r3, [sp, #12]
 8006dbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dc0:	1bdb      	subs	r3, r3, r7
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	b004      	add	sp, #16
 8006dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dcc:	1c59      	adds	r1, r3, #1
 8006dce:	9103      	str	r1, [sp, #12]
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	e7f0      	b.n	8006db6 <__cvt+0xa6>

08006dd4 <__exponent>:
 8006dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2900      	cmp	r1, #0
 8006dda:	bfb8      	it	lt
 8006ddc:	4249      	neglt	r1, r1
 8006dde:	f803 2b02 	strb.w	r2, [r3], #2
 8006de2:	bfb4      	ite	lt
 8006de4:	222d      	movlt	r2, #45	; 0x2d
 8006de6:	222b      	movge	r2, #43	; 0x2b
 8006de8:	2909      	cmp	r1, #9
 8006dea:	7042      	strb	r2, [r0, #1]
 8006dec:	dd2a      	ble.n	8006e44 <__exponent+0x70>
 8006dee:	f10d 0407 	add.w	r4, sp, #7
 8006df2:	46a4      	mov	ip, r4
 8006df4:	270a      	movs	r7, #10
 8006df6:	46a6      	mov	lr, r4
 8006df8:	460a      	mov	r2, r1
 8006dfa:	fb91 f6f7 	sdiv	r6, r1, r7
 8006dfe:	fb07 1516 	mls	r5, r7, r6, r1
 8006e02:	3530      	adds	r5, #48	; 0x30
 8006e04:	2a63      	cmp	r2, #99	; 0x63
 8006e06:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e0e:	4631      	mov	r1, r6
 8006e10:	dcf1      	bgt.n	8006df6 <__exponent+0x22>
 8006e12:	3130      	adds	r1, #48	; 0x30
 8006e14:	f1ae 0502 	sub.w	r5, lr, #2
 8006e18:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e1c:	1c44      	adds	r4, r0, #1
 8006e1e:	4629      	mov	r1, r5
 8006e20:	4561      	cmp	r1, ip
 8006e22:	d30a      	bcc.n	8006e3a <__exponent+0x66>
 8006e24:	f10d 0209 	add.w	r2, sp, #9
 8006e28:	eba2 020e 	sub.w	r2, r2, lr
 8006e2c:	4565      	cmp	r5, ip
 8006e2e:	bf88      	it	hi
 8006e30:	2200      	movhi	r2, #0
 8006e32:	4413      	add	r3, r2
 8006e34:	1a18      	subs	r0, r3, r0
 8006e36:	b003      	add	sp, #12
 8006e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e42:	e7ed      	b.n	8006e20 <__exponent+0x4c>
 8006e44:	2330      	movs	r3, #48	; 0x30
 8006e46:	3130      	adds	r1, #48	; 0x30
 8006e48:	7083      	strb	r3, [r0, #2]
 8006e4a:	70c1      	strb	r1, [r0, #3]
 8006e4c:	1d03      	adds	r3, r0, #4
 8006e4e:	e7f1      	b.n	8006e34 <__exponent+0x60>

08006e50 <_printf_float>:
 8006e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e54:	ed2d 8b02 	vpush	{d8}
 8006e58:	b08d      	sub	sp, #52	; 0x34
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e60:	4616      	mov	r6, r2
 8006e62:	461f      	mov	r7, r3
 8006e64:	4605      	mov	r5, r0
 8006e66:	f002 fe8f 	bl	8009b88 <_localeconv_r>
 8006e6a:	f8d0 a000 	ldr.w	sl, [r0]
 8006e6e:	4650      	mov	r0, sl
 8006e70:	f7f9 f9ae 	bl	80001d0 <strlen>
 8006e74:	2300      	movs	r3, #0
 8006e76:	930a      	str	r3, [sp, #40]	; 0x28
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	9305      	str	r3, [sp, #20]
 8006e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e80:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e84:	3307      	adds	r3, #7
 8006e86:	f023 0307 	bic.w	r3, r3, #7
 8006e8a:	f103 0208 	add.w	r2, r3, #8
 8006e8e:	f8c8 2000 	str.w	r2, [r8]
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ea2:	9307      	str	r3, [sp, #28]
 8006ea4:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ea8:	ee08 0a10 	vmov	s16, r0
 8006eac:	4b9f      	ldr	r3, [pc, #636]	; (800712c <_printf_float+0x2dc>)
 8006eae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb6:	f7f9 fe39 	bl	8000b2c <__aeabi_dcmpun>
 8006eba:	bb88      	cbnz	r0, 8006f20 <_printf_float+0xd0>
 8006ebc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ec0:	4b9a      	ldr	r3, [pc, #616]	; (800712c <_printf_float+0x2dc>)
 8006ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec6:	f7f9 fe13 	bl	8000af0 <__aeabi_dcmple>
 8006eca:	bb48      	cbnz	r0, 8006f20 <_printf_float+0xd0>
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2300      	movs	r3, #0
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	f7f9 fe02 	bl	8000adc <__aeabi_dcmplt>
 8006ed8:	b110      	cbz	r0, 8006ee0 <_printf_float+0x90>
 8006eda:	232d      	movs	r3, #45	; 0x2d
 8006edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ee0:	4b93      	ldr	r3, [pc, #588]	; (8007130 <_printf_float+0x2e0>)
 8006ee2:	4894      	ldr	r0, [pc, #592]	; (8007134 <_printf_float+0x2e4>)
 8006ee4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ee8:	bf94      	ite	ls
 8006eea:	4698      	movls	r8, r3
 8006eec:	4680      	movhi	r8, r0
 8006eee:	2303      	movs	r3, #3
 8006ef0:	6123      	str	r3, [r4, #16]
 8006ef2:	9b05      	ldr	r3, [sp, #20]
 8006ef4:	f023 0204 	bic.w	r2, r3, #4
 8006ef8:	6022      	str	r2, [r4, #0]
 8006efa:	f04f 0900 	mov.w	r9, #0
 8006efe:	9700      	str	r7, [sp, #0]
 8006f00:	4633      	mov	r3, r6
 8006f02:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f04:	4621      	mov	r1, r4
 8006f06:	4628      	mov	r0, r5
 8006f08:	f000 f9d8 	bl	80072bc <_printf_common>
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	f040 8090 	bne.w	8007032 <_printf_float+0x1e2>
 8006f12:	f04f 30ff 	mov.w	r0, #4294967295
 8006f16:	b00d      	add	sp, #52	; 0x34
 8006f18:	ecbd 8b02 	vpop	{d8}
 8006f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f20:	4642      	mov	r2, r8
 8006f22:	464b      	mov	r3, r9
 8006f24:	4640      	mov	r0, r8
 8006f26:	4649      	mov	r1, r9
 8006f28:	f7f9 fe00 	bl	8000b2c <__aeabi_dcmpun>
 8006f2c:	b140      	cbz	r0, 8006f40 <_printf_float+0xf0>
 8006f2e:	464b      	mov	r3, r9
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bfbc      	itt	lt
 8006f34:	232d      	movlt	r3, #45	; 0x2d
 8006f36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f3a:	487f      	ldr	r0, [pc, #508]	; (8007138 <_printf_float+0x2e8>)
 8006f3c:	4b7f      	ldr	r3, [pc, #508]	; (800713c <_printf_float+0x2ec>)
 8006f3e:	e7d1      	b.n	8006ee4 <_printf_float+0x94>
 8006f40:	6863      	ldr	r3, [r4, #4]
 8006f42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006f46:	9206      	str	r2, [sp, #24]
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	d13f      	bne.n	8006fcc <_printf_float+0x17c>
 8006f4c:	2306      	movs	r3, #6
 8006f4e:	6063      	str	r3, [r4, #4]
 8006f50:	9b05      	ldr	r3, [sp, #20]
 8006f52:	6861      	ldr	r1, [r4, #4]
 8006f54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f58:	2300      	movs	r3, #0
 8006f5a:	9303      	str	r3, [sp, #12]
 8006f5c:	ab0a      	add	r3, sp, #40	; 0x28
 8006f5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f62:	ab09      	add	r3, sp, #36	; 0x24
 8006f64:	ec49 8b10 	vmov	d0, r8, r9
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	6022      	str	r2, [r4, #0]
 8006f6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f70:	4628      	mov	r0, r5
 8006f72:	f7ff fecd 	bl	8006d10 <__cvt>
 8006f76:	9b06      	ldr	r3, [sp, #24]
 8006f78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f7a:	2b47      	cmp	r3, #71	; 0x47
 8006f7c:	4680      	mov	r8, r0
 8006f7e:	d108      	bne.n	8006f92 <_printf_float+0x142>
 8006f80:	1cc8      	adds	r0, r1, #3
 8006f82:	db02      	blt.n	8006f8a <_printf_float+0x13a>
 8006f84:	6863      	ldr	r3, [r4, #4]
 8006f86:	4299      	cmp	r1, r3
 8006f88:	dd41      	ble.n	800700e <_printf_float+0x1be>
 8006f8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f8e:	fa5f fb8b 	uxtb.w	fp, fp
 8006f92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f96:	d820      	bhi.n	8006fda <_printf_float+0x18a>
 8006f98:	3901      	subs	r1, #1
 8006f9a:	465a      	mov	r2, fp
 8006f9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fa0:	9109      	str	r1, [sp, #36]	; 0x24
 8006fa2:	f7ff ff17 	bl	8006dd4 <__exponent>
 8006fa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fa8:	1813      	adds	r3, r2, r0
 8006faa:	2a01      	cmp	r2, #1
 8006fac:	4681      	mov	r9, r0
 8006fae:	6123      	str	r3, [r4, #16]
 8006fb0:	dc02      	bgt.n	8006fb8 <_printf_float+0x168>
 8006fb2:	6822      	ldr	r2, [r4, #0]
 8006fb4:	07d2      	lsls	r2, r2, #31
 8006fb6:	d501      	bpl.n	8006fbc <_printf_float+0x16c>
 8006fb8:	3301      	adds	r3, #1
 8006fba:	6123      	str	r3, [r4, #16]
 8006fbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d09c      	beq.n	8006efe <_printf_float+0xae>
 8006fc4:	232d      	movs	r3, #45	; 0x2d
 8006fc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fca:	e798      	b.n	8006efe <_printf_float+0xae>
 8006fcc:	9a06      	ldr	r2, [sp, #24]
 8006fce:	2a47      	cmp	r2, #71	; 0x47
 8006fd0:	d1be      	bne.n	8006f50 <_printf_float+0x100>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1bc      	bne.n	8006f50 <_printf_float+0x100>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e7b9      	b.n	8006f4e <_printf_float+0xfe>
 8006fda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006fde:	d118      	bne.n	8007012 <_printf_float+0x1c2>
 8006fe0:	2900      	cmp	r1, #0
 8006fe2:	6863      	ldr	r3, [r4, #4]
 8006fe4:	dd0b      	ble.n	8006ffe <_printf_float+0x1ae>
 8006fe6:	6121      	str	r1, [r4, #16]
 8006fe8:	b913      	cbnz	r3, 8006ff0 <_printf_float+0x1a0>
 8006fea:	6822      	ldr	r2, [r4, #0]
 8006fec:	07d0      	lsls	r0, r2, #31
 8006fee:	d502      	bpl.n	8006ff6 <_printf_float+0x1a6>
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	440b      	add	r3, r1
 8006ff4:	6123      	str	r3, [r4, #16]
 8006ff6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ff8:	f04f 0900 	mov.w	r9, #0
 8006ffc:	e7de      	b.n	8006fbc <_printf_float+0x16c>
 8006ffe:	b913      	cbnz	r3, 8007006 <_printf_float+0x1b6>
 8007000:	6822      	ldr	r2, [r4, #0]
 8007002:	07d2      	lsls	r2, r2, #31
 8007004:	d501      	bpl.n	800700a <_printf_float+0x1ba>
 8007006:	3302      	adds	r3, #2
 8007008:	e7f4      	b.n	8006ff4 <_printf_float+0x1a4>
 800700a:	2301      	movs	r3, #1
 800700c:	e7f2      	b.n	8006ff4 <_printf_float+0x1a4>
 800700e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007014:	4299      	cmp	r1, r3
 8007016:	db05      	blt.n	8007024 <_printf_float+0x1d4>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	6121      	str	r1, [r4, #16]
 800701c:	07d8      	lsls	r0, r3, #31
 800701e:	d5ea      	bpl.n	8006ff6 <_printf_float+0x1a6>
 8007020:	1c4b      	adds	r3, r1, #1
 8007022:	e7e7      	b.n	8006ff4 <_printf_float+0x1a4>
 8007024:	2900      	cmp	r1, #0
 8007026:	bfd4      	ite	le
 8007028:	f1c1 0202 	rsble	r2, r1, #2
 800702c:	2201      	movgt	r2, #1
 800702e:	4413      	add	r3, r2
 8007030:	e7e0      	b.n	8006ff4 <_printf_float+0x1a4>
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	055a      	lsls	r2, r3, #21
 8007036:	d407      	bmi.n	8007048 <_printf_float+0x1f8>
 8007038:	6923      	ldr	r3, [r4, #16]
 800703a:	4642      	mov	r2, r8
 800703c:	4631      	mov	r1, r6
 800703e:	4628      	mov	r0, r5
 8007040:	47b8      	blx	r7
 8007042:	3001      	adds	r0, #1
 8007044:	d12c      	bne.n	80070a0 <_printf_float+0x250>
 8007046:	e764      	b.n	8006f12 <_printf_float+0xc2>
 8007048:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800704c:	f240 80e0 	bls.w	8007210 <_printf_float+0x3c0>
 8007050:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007054:	2200      	movs	r2, #0
 8007056:	2300      	movs	r3, #0
 8007058:	f7f9 fd36 	bl	8000ac8 <__aeabi_dcmpeq>
 800705c:	2800      	cmp	r0, #0
 800705e:	d034      	beq.n	80070ca <_printf_float+0x27a>
 8007060:	4a37      	ldr	r2, [pc, #220]	; (8007140 <_printf_float+0x2f0>)
 8007062:	2301      	movs	r3, #1
 8007064:	4631      	mov	r1, r6
 8007066:	4628      	mov	r0, r5
 8007068:	47b8      	blx	r7
 800706a:	3001      	adds	r0, #1
 800706c:	f43f af51 	beq.w	8006f12 <_printf_float+0xc2>
 8007070:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007074:	429a      	cmp	r2, r3
 8007076:	db02      	blt.n	800707e <_printf_float+0x22e>
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	07d8      	lsls	r0, r3, #31
 800707c:	d510      	bpl.n	80070a0 <_printf_float+0x250>
 800707e:	ee18 3a10 	vmov	r3, s16
 8007082:	4652      	mov	r2, sl
 8007084:	4631      	mov	r1, r6
 8007086:	4628      	mov	r0, r5
 8007088:	47b8      	blx	r7
 800708a:	3001      	adds	r0, #1
 800708c:	f43f af41 	beq.w	8006f12 <_printf_float+0xc2>
 8007090:	f04f 0800 	mov.w	r8, #0
 8007094:	f104 091a 	add.w	r9, r4, #26
 8007098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800709a:	3b01      	subs	r3, #1
 800709c:	4543      	cmp	r3, r8
 800709e:	dc09      	bgt.n	80070b4 <_printf_float+0x264>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	079b      	lsls	r3, r3, #30
 80070a4:	f100 8105 	bmi.w	80072b2 <_printf_float+0x462>
 80070a8:	68e0      	ldr	r0, [r4, #12]
 80070aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ac:	4298      	cmp	r0, r3
 80070ae:	bfb8      	it	lt
 80070b0:	4618      	movlt	r0, r3
 80070b2:	e730      	b.n	8006f16 <_printf_float+0xc6>
 80070b4:	2301      	movs	r3, #1
 80070b6:	464a      	mov	r2, r9
 80070b8:	4631      	mov	r1, r6
 80070ba:	4628      	mov	r0, r5
 80070bc:	47b8      	blx	r7
 80070be:	3001      	adds	r0, #1
 80070c0:	f43f af27 	beq.w	8006f12 <_printf_float+0xc2>
 80070c4:	f108 0801 	add.w	r8, r8, #1
 80070c8:	e7e6      	b.n	8007098 <_printf_float+0x248>
 80070ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	dc39      	bgt.n	8007144 <_printf_float+0x2f4>
 80070d0:	4a1b      	ldr	r2, [pc, #108]	; (8007140 <_printf_float+0x2f0>)
 80070d2:	2301      	movs	r3, #1
 80070d4:	4631      	mov	r1, r6
 80070d6:	4628      	mov	r0, r5
 80070d8:	47b8      	blx	r7
 80070da:	3001      	adds	r0, #1
 80070dc:	f43f af19 	beq.w	8006f12 <_printf_float+0xc2>
 80070e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070e4:	4313      	orrs	r3, r2
 80070e6:	d102      	bne.n	80070ee <_printf_float+0x29e>
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	07d9      	lsls	r1, r3, #31
 80070ec:	d5d8      	bpl.n	80070a0 <_printf_float+0x250>
 80070ee:	ee18 3a10 	vmov	r3, s16
 80070f2:	4652      	mov	r2, sl
 80070f4:	4631      	mov	r1, r6
 80070f6:	4628      	mov	r0, r5
 80070f8:	47b8      	blx	r7
 80070fa:	3001      	adds	r0, #1
 80070fc:	f43f af09 	beq.w	8006f12 <_printf_float+0xc2>
 8007100:	f04f 0900 	mov.w	r9, #0
 8007104:	f104 0a1a 	add.w	sl, r4, #26
 8007108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800710a:	425b      	negs	r3, r3
 800710c:	454b      	cmp	r3, r9
 800710e:	dc01      	bgt.n	8007114 <_printf_float+0x2c4>
 8007110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007112:	e792      	b.n	800703a <_printf_float+0x1ea>
 8007114:	2301      	movs	r3, #1
 8007116:	4652      	mov	r2, sl
 8007118:	4631      	mov	r1, r6
 800711a:	4628      	mov	r0, r5
 800711c:	47b8      	blx	r7
 800711e:	3001      	adds	r0, #1
 8007120:	f43f aef7 	beq.w	8006f12 <_printf_float+0xc2>
 8007124:	f109 0901 	add.w	r9, r9, #1
 8007128:	e7ee      	b.n	8007108 <_printf_float+0x2b8>
 800712a:	bf00      	nop
 800712c:	7fefffff 	.word	0x7fefffff
 8007130:	0800b5a4 	.word	0x0800b5a4
 8007134:	0800b5a8 	.word	0x0800b5a8
 8007138:	0800b5b0 	.word	0x0800b5b0
 800713c:	0800b5ac 	.word	0x0800b5ac
 8007140:	0800b5b4 	.word	0x0800b5b4
 8007144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007146:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007148:	429a      	cmp	r2, r3
 800714a:	bfa8      	it	ge
 800714c:	461a      	movge	r2, r3
 800714e:	2a00      	cmp	r2, #0
 8007150:	4691      	mov	r9, r2
 8007152:	dc37      	bgt.n	80071c4 <_printf_float+0x374>
 8007154:	f04f 0b00 	mov.w	fp, #0
 8007158:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800715c:	f104 021a 	add.w	r2, r4, #26
 8007160:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007162:	9305      	str	r3, [sp, #20]
 8007164:	eba3 0309 	sub.w	r3, r3, r9
 8007168:	455b      	cmp	r3, fp
 800716a:	dc33      	bgt.n	80071d4 <_printf_float+0x384>
 800716c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007170:	429a      	cmp	r2, r3
 8007172:	db3b      	blt.n	80071ec <_printf_float+0x39c>
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	07da      	lsls	r2, r3, #31
 8007178:	d438      	bmi.n	80071ec <_printf_float+0x39c>
 800717a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800717c:	9b05      	ldr	r3, [sp, #20]
 800717e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	eba2 0901 	sub.w	r9, r2, r1
 8007186:	4599      	cmp	r9, r3
 8007188:	bfa8      	it	ge
 800718a:	4699      	movge	r9, r3
 800718c:	f1b9 0f00 	cmp.w	r9, #0
 8007190:	dc35      	bgt.n	80071fe <_printf_float+0x3ae>
 8007192:	f04f 0800 	mov.w	r8, #0
 8007196:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800719a:	f104 0a1a 	add.w	sl, r4, #26
 800719e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071a2:	1a9b      	subs	r3, r3, r2
 80071a4:	eba3 0309 	sub.w	r3, r3, r9
 80071a8:	4543      	cmp	r3, r8
 80071aa:	f77f af79 	ble.w	80070a0 <_printf_float+0x250>
 80071ae:	2301      	movs	r3, #1
 80071b0:	4652      	mov	r2, sl
 80071b2:	4631      	mov	r1, r6
 80071b4:	4628      	mov	r0, r5
 80071b6:	47b8      	blx	r7
 80071b8:	3001      	adds	r0, #1
 80071ba:	f43f aeaa 	beq.w	8006f12 <_printf_float+0xc2>
 80071be:	f108 0801 	add.w	r8, r8, #1
 80071c2:	e7ec      	b.n	800719e <_printf_float+0x34e>
 80071c4:	4613      	mov	r3, r2
 80071c6:	4631      	mov	r1, r6
 80071c8:	4642      	mov	r2, r8
 80071ca:	4628      	mov	r0, r5
 80071cc:	47b8      	blx	r7
 80071ce:	3001      	adds	r0, #1
 80071d0:	d1c0      	bne.n	8007154 <_printf_float+0x304>
 80071d2:	e69e      	b.n	8006f12 <_printf_float+0xc2>
 80071d4:	2301      	movs	r3, #1
 80071d6:	4631      	mov	r1, r6
 80071d8:	4628      	mov	r0, r5
 80071da:	9205      	str	r2, [sp, #20]
 80071dc:	47b8      	blx	r7
 80071de:	3001      	adds	r0, #1
 80071e0:	f43f ae97 	beq.w	8006f12 <_printf_float+0xc2>
 80071e4:	9a05      	ldr	r2, [sp, #20]
 80071e6:	f10b 0b01 	add.w	fp, fp, #1
 80071ea:	e7b9      	b.n	8007160 <_printf_float+0x310>
 80071ec:	ee18 3a10 	vmov	r3, s16
 80071f0:	4652      	mov	r2, sl
 80071f2:	4631      	mov	r1, r6
 80071f4:	4628      	mov	r0, r5
 80071f6:	47b8      	blx	r7
 80071f8:	3001      	adds	r0, #1
 80071fa:	d1be      	bne.n	800717a <_printf_float+0x32a>
 80071fc:	e689      	b.n	8006f12 <_printf_float+0xc2>
 80071fe:	9a05      	ldr	r2, [sp, #20]
 8007200:	464b      	mov	r3, r9
 8007202:	4442      	add	r2, r8
 8007204:	4631      	mov	r1, r6
 8007206:	4628      	mov	r0, r5
 8007208:	47b8      	blx	r7
 800720a:	3001      	adds	r0, #1
 800720c:	d1c1      	bne.n	8007192 <_printf_float+0x342>
 800720e:	e680      	b.n	8006f12 <_printf_float+0xc2>
 8007210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007212:	2a01      	cmp	r2, #1
 8007214:	dc01      	bgt.n	800721a <_printf_float+0x3ca>
 8007216:	07db      	lsls	r3, r3, #31
 8007218:	d538      	bpl.n	800728c <_printf_float+0x43c>
 800721a:	2301      	movs	r3, #1
 800721c:	4642      	mov	r2, r8
 800721e:	4631      	mov	r1, r6
 8007220:	4628      	mov	r0, r5
 8007222:	47b8      	blx	r7
 8007224:	3001      	adds	r0, #1
 8007226:	f43f ae74 	beq.w	8006f12 <_printf_float+0xc2>
 800722a:	ee18 3a10 	vmov	r3, s16
 800722e:	4652      	mov	r2, sl
 8007230:	4631      	mov	r1, r6
 8007232:	4628      	mov	r0, r5
 8007234:	47b8      	blx	r7
 8007236:	3001      	adds	r0, #1
 8007238:	f43f ae6b 	beq.w	8006f12 <_printf_float+0xc2>
 800723c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007240:	2200      	movs	r2, #0
 8007242:	2300      	movs	r3, #0
 8007244:	f7f9 fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 8007248:	b9d8      	cbnz	r0, 8007282 <_printf_float+0x432>
 800724a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800724c:	f108 0201 	add.w	r2, r8, #1
 8007250:	3b01      	subs	r3, #1
 8007252:	4631      	mov	r1, r6
 8007254:	4628      	mov	r0, r5
 8007256:	47b8      	blx	r7
 8007258:	3001      	adds	r0, #1
 800725a:	d10e      	bne.n	800727a <_printf_float+0x42a>
 800725c:	e659      	b.n	8006f12 <_printf_float+0xc2>
 800725e:	2301      	movs	r3, #1
 8007260:	4652      	mov	r2, sl
 8007262:	4631      	mov	r1, r6
 8007264:	4628      	mov	r0, r5
 8007266:	47b8      	blx	r7
 8007268:	3001      	adds	r0, #1
 800726a:	f43f ae52 	beq.w	8006f12 <_printf_float+0xc2>
 800726e:	f108 0801 	add.w	r8, r8, #1
 8007272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007274:	3b01      	subs	r3, #1
 8007276:	4543      	cmp	r3, r8
 8007278:	dcf1      	bgt.n	800725e <_printf_float+0x40e>
 800727a:	464b      	mov	r3, r9
 800727c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007280:	e6dc      	b.n	800703c <_printf_float+0x1ec>
 8007282:	f04f 0800 	mov.w	r8, #0
 8007286:	f104 0a1a 	add.w	sl, r4, #26
 800728a:	e7f2      	b.n	8007272 <_printf_float+0x422>
 800728c:	2301      	movs	r3, #1
 800728e:	4642      	mov	r2, r8
 8007290:	e7df      	b.n	8007252 <_printf_float+0x402>
 8007292:	2301      	movs	r3, #1
 8007294:	464a      	mov	r2, r9
 8007296:	4631      	mov	r1, r6
 8007298:	4628      	mov	r0, r5
 800729a:	47b8      	blx	r7
 800729c:	3001      	adds	r0, #1
 800729e:	f43f ae38 	beq.w	8006f12 <_printf_float+0xc2>
 80072a2:	f108 0801 	add.w	r8, r8, #1
 80072a6:	68e3      	ldr	r3, [r4, #12]
 80072a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072aa:	1a5b      	subs	r3, r3, r1
 80072ac:	4543      	cmp	r3, r8
 80072ae:	dcf0      	bgt.n	8007292 <_printf_float+0x442>
 80072b0:	e6fa      	b.n	80070a8 <_printf_float+0x258>
 80072b2:	f04f 0800 	mov.w	r8, #0
 80072b6:	f104 0919 	add.w	r9, r4, #25
 80072ba:	e7f4      	b.n	80072a6 <_printf_float+0x456>

080072bc <_printf_common>:
 80072bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c0:	4616      	mov	r6, r2
 80072c2:	4699      	mov	r9, r3
 80072c4:	688a      	ldr	r2, [r1, #8]
 80072c6:	690b      	ldr	r3, [r1, #16]
 80072c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072cc:	4293      	cmp	r3, r2
 80072ce:	bfb8      	it	lt
 80072d0:	4613      	movlt	r3, r2
 80072d2:	6033      	str	r3, [r6, #0]
 80072d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072d8:	4607      	mov	r7, r0
 80072da:	460c      	mov	r4, r1
 80072dc:	b10a      	cbz	r2, 80072e2 <_printf_common+0x26>
 80072de:	3301      	adds	r3, #1
 80072e0:	6033      	str	r3, [r6, #0]
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	0699      	lsls	r1, r3, #26
 80072e6:	bf42      	ittt	mi
 80072e8:	6833      	ldrmi	r3, [r6, #0]
 80072ea:	3302      	addmi	r3, #2
 80072ec:	6033      	strmi	r3, [r6, #0]
 80072ee:	6825      	ldr	r5, [r4, #0]
 80072f0:	f015 0506 	ands.w	r5, r5, #6
 80072f4:	d106      	bne.n	8007304 <_printf_common+0x48>
 80072f6:	f104 0a19 	add.w	sl, r4, #25
 80072fa:	68e3      	ldr	r3, [r4, #12]
 80072fc:	6832      	ldr	r2, [r6, #0]
 80072fe:	1a9b      	subs	r3, r3, r2
 8007300:	42ab      	cmp	r3, r5
 8007302:	dc26      	bgt.n	8007352 <_printf_common+0x96>
 8007304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007308:	1e13      	subs	r3, r2, #0
 800730a:	6822      	ldr	r2, [r4, #0]
 800730c:	bf18      	it	ne
 800730e:	2301      	movne	r3, #1
 8007310:	0692      	lsls	r2, r2, #26
 8007312:	d42b      	bmi.n	800736c <_printf_common+0xb0>
 8007314:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007318:	4649      	mov	r1, r9
 800731a:	4638      	mov	r0, r7
 800731c:	47c0      	blx	r8
 800731e:	3001      	adds	r0, #1
 8007320:	d01e      	beq.n	8007360 <_printf_common+0xa4>
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	68e5      	ldr	r5, [r4, #12]
 8007326:	6832      	ldr	r2, [r6, #0]
 8007328:	f003 0306 	and.w	r3, r3, #6
 800732c:	2b04      	cmp	r3, #4
 800732e:	bf08      	it	eq
 8007330:	1aad      	subeq	r5, r5, r2
 8007332:	68a3      	ldr	r3, [r4, #8]
 8007334:	6922      	ldr	r2, [r4, #16]
 8007336:	bf0c      	ite	eq
 8007338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800733c:	2500      	movne	r5, #0
 800733e:	4293      	cmp	r3, r2
 8007340:	bfc4      	itt	gt
 8007342:	1a9b      	subgt	r3, r3, r2
 8007344:	18ed      	addgt	r5, r5, r3
 8007346:	2600      	movs	r6, #0
 8007348:	341a      	adds	r4, #26
 800734a:	42b5      	cmp	r5, r6
 800734c:	d11a      	bne.n	8007384 <_printf_common+0xc8>
 800734e:	2000      	movs	r0, #0
 8007350:	e008      	b.n	8007364 <_printf_common+0xa8>
 8007352:	2301      	movs	r3, #1
 8007354:	4652      	mov	r2, sl
 8007356:	4649      	mov	r1, r9
 8007358:	4638      	mov	r0, r7
 800735a:	47c0      	blx	r8
 800735c:	3001      	adds	r0, #1
 800735e:	d103      	bne.n	8007368 <_printf_common+0xac>
 8007360:	f04f 30ff 	mov.w	r0, #4294967295
 8007364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007368:	3501      	adds	r5, #1
 800736a:	e7c6      	b.n	80072fa <_printf_common+0x3e>
 800736c:	18e1      	adds	r1, r4, r3
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	2030      	movs	r0, #48	; 0x30
 8007372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007376:	4422      	add	r2, r4
 8007378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800737c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007380:	3302      	adds	r3, #2
 8007382:	e7c7      	b.n	8007314 <_printf_common+0x58>
 8007384:	2301      	movs	r3, #1
 8007386:	4622      	mov	r2, r4
 8007388:	4649      	mov	r1, r9
 800738a:	4638      	mov	r0, r7
 800738c:	47c0      	blx	r8
 800738e:	3001      	adds	r0, #1
 8007390:	d0e6      	beq.n	8007360 <_printf_common+0xa4>
 8007392:	3601      	adds	r6, #1
 8007394:	e7d9      	b.n	800734a <_printf_common+0x8e>
	...

08007398 <_printf_i>:
 8007398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800739c:	460c      	mov	r4, r1
 800739e:	4691      	mov	r9, r2
 80073a0:	7e27      	ldrb	r7, [r4, #24]
 80073a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80073a4:	2f78      	cmp	r7, #120	; 0x78
 80073a6:	4680      	mov	r8, r0
 80073a8:	469a      	mov	sl, r3
 80073aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073ae:	d807      	bhi.n	80073c0 <_printf_i+0x28>
 80073b0:	2f62      	cmp	r7, #98	; 0x62
 80073b2:	d80a      	bhi.n	80073ca <_printf_i+0x32>
 80073b4:	2f00      	cmp	r7, #0
 80073b6:	f000 80d8 	beq.w	800756a <_printf_i+0x1d2>
 80073ba:	2f58      	cmp	r7, #88	; 0x58
 80073bc:	f000 80a3 	beq.w	8007506 <_printf_i+0x16e>
 80073c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073c8:	e03a      	b.n	8007440 <_printf_i+0xa8>
 80073ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073ce:	2b15      	cmp	r3, #21
 80073d0:	d8f6      	bhi.n	80073c0 <_printf_i+0x28>
 80073d2:	a001      	add	r0, pc, #4	; (adr r0, 80073d8 <_printf_i+0x40>)
 80073d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80073d8:	08007431 	.word	0x08007431
 80073dc:	08007445 	.word	0x08007445
 80073e0:	080073c1 	.word	0x080073c1
 80073e4:	080073c1 	.word	0x080073c1
 80073e8:	080073c1 	.word	0x080073c1
 80073ec:	080073c1 	.word	0x080073c1
 80073f0:	08007445 	.word	0x08007445
 80073f4:	080073c1 	.word	0x080073c1
 80073f8:	080073c1 	.word	0x080073c1
 80073fc:	080073c1 	.word	0x080073c1
 8007400:	080073c1 	.word	0x080073c1
 8007404:	08007551 	.word	0x08007551
 8007408:	08007475 	.word	0x08007475
 800740c:	08007533 	.word	0x08007533
 8007410:	080073c1 	.word	0x080073c1
 8007414:	080073c1 	.word	0x080073c1
 8007418:	08007573 	.word	0x08007573
 800741c:	080073c1 	.word	0x080073c1
 8007420:	08007475 	.word	0x08007475
 8007424:	080073c1 	.word	0x080073c1
 8007428:	080073c1 	.word	0x080073c1
 800742c:	0800753b 	.word	0x0800753b
 8007430:	680b      	ldr	r3, [r1, #0]
 8007432:	1d1a      	adds	r2, r3, #4
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	600a      	str	r2, [r1, #0]
 8007438:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800743c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007440:	2301      	movs	r3, #1
 8007442:	e0a3      	b.n	800758c <_printf_i+0x1f4>
 8007444:	6825      	ldr	r5, [r4, #0]
 8007446:	6808      	ldr	r0, [r1, #0]
 8007448:	062e      	lsls	r6, r5, #24
 800744a:	f100 0304 	add.w	r3, r0, #4
 800744e:	d50a      	bpl.n	8007466 <_printf_i+0xce>
 8007450:	6805      	ldr	r5, [r0, #0]
 8007452:	600b      	str	r3, [r1, #0]
 8007454:	2d00      	cmp	r5, #0
 8007456:	da03      	bge.n	8007460 <_printf_i+0xc8>
 8007458:	232d      	movs	r3, #45	; 0x2d
 800745a:	426d      	negs	r5, r5
 800745c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007460:	485e      	ldr	r0, [pc, #376]	; (80075dc <_printf_i+0x244>)
 8007462:	230a      	movs	r3, #10
 8007464:	e019      	b.n	800749a <_printf_i+0x102>
 8007466:	f015 0f40 	tst.w	r5, #64	; 0x40
 800746a:	6805      	ldr	r5, [r0, #0]
 800746c:	600b      	str	r3, [r1, #0]
 800746e:	bf18      	it	ne
 8007470:	b22d      	sxthne	r5, r5
 8007472:	e7ef      	b.n	8007454 <_printf_i+0xbc>
 8007474:	680b      	ldr	r3, [r1, #0]
 8007476:	6825      	ldr	r5, [r4, #0]
 8007478:	1d18      	adds	r0, r3, #4
 800747a:	6008      	str	r0, [r1, #0]
 800747c:	0628      	lsls	r0, r5, #24
 800747e:	d501      	bpl.n	8007484 <_printf_i+0xec>
 8007480:	681d      	ldr	r5, [r3, #0]
 8007482:	e002      	b.n	800748a <_printf_i+0xf2>
 8007484:	0669      	lsls	r1, r5, #25
 8007486:	d5fb      	bpl.n	8007480 <_printf_i+0xe8>
 8007488:	881d      	ldrh	r5, [r3, #0]
 800748a:	4854      	ldr	r0, [pc, #336]	; (80075dc <_printf_i+0x244>)
 800748c:	2f6f      	cmp	r7, #111	; 0x6f
 800748e:	bf0c      	ite	eq
 8007490:	2308      	moveq	r3, #8
 8007492:	230a      	movne	r3, #10
 8007494:	2100      	movs	r1, #0
 8007496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800749a:	6866      	ldr	r6, [r4, #4]
 800749c:	60a6      	str	r6, [r4, #8]
 800749e:	2e00      	cmp	r6, #0
 80074a0:	bfa2      	ittt	ge
 80074a2:	6821      	ldrge	r1, [r4, #0]
 80074a4:	f021 0104 	bicge.w	r1, r1, #4
 80074a8:	6021      	strge	r1, [r4, #0]
 80074aa:	b90d      	cbnz	r5, 80074b0 <_printf_i+0x118>
 80074ac:	2e00      	cmp	r6, #0
 80074ae:	d04d      	beq.n	800754c <_printf_i+0x1b4>
 80074b0:	4616      	mov	r6, r2
 80074b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80074b6:	fb03 5711 	mls	r7, r3, r1, r5
 80074ba:	5dc7      	ldrb	r7, [r0, r7]
 80074bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074c0:	462f      	mov	r7, r5
 80074c2:	42bb      	cmp	r3, r7
 80074c4:	460d      	mov	r5, r1
 80074c6:	d9f4      	bls.n	80074b2 <_printf_i+0x11a>
 80074c8:	2b08      	cmp	r3, #8
 80074ca:	d10b      	bne.n	80074e4 <_printf_i+0x14c>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	07df      	lsls	r7, r3, #31
 80074d0:	d508      	bpl.n	80074e4 <_printf_i+0x14c>
 80074d2:	6923      	ldr	r3, [r4, #16]
 80074d4:	6861      	ldr	r1, [r4, #4]
 80074d6:	4299      	cmp	r1, r3
 80074d8:	bfde      	ittt	le
 80074da:	2330      	movle	r3, #48	; 0x30
 80074dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80074e4:	1b92      	subs	r2, r2, r6
 80074e6:	6122      	str	r2, [r4, #16]
 80074e8:	f8cd a000 	str.w	sl, [sp]
 80074ec:	464b      	mov	r3, r9
 80074ee:	aa03      	add	r2, sp, #12
 80074f0:	4621      	mov	r1, r4
 80074f2:	4640      	mov	r0, r8
 80074f4:	f7ff fee2 	bl	80072bc <_printf_common>
 80074f8:	3001      	adds	r0, #1
 80074fa:	d14c      	bne.n	8007596 <_printf_i+0x1fe>
 80074fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007500:	b004      	add	sp, #16
 8007502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007506:	4835      	ldr	r0, [pc, #212]	; (80075dc <_printf_i+0x244>)
 8007508:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	680e      	ldr	r6, [r1, #0]
 8007510:	061f      	lsls	r7, r3, #24
 8007512:	f856 5b04 	ldr.w	r5, [r6], #4
 8007516:	600e      	str	r6, [r1, #0]
 8007518:	d514      	bpl.n	8007544 <_printf_i+0x1ac>
 800751a:	07d9      	lsls	r1, r3, #31
 800751c:	bf44      	itt	mi
 800751e:	f043 0320 	orrmi.w	r3, r3, #32
 8007522:	6023      	strmi	r3, [r4, #0]
 8007524:	b91d      	cbnz	r5, 800752e <_printf_i+0x196>
 8007526:	6823      	ldr	r3, [r4, #0]
 8007528:	f023 0320 	bic.w	r3, r3, #32
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	2310      	movs	r3, #16
 8007530:	e7b0      	b.n	8007494 <_printf_i+0xfc>
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	f043 0320 	orr.w	r3, r3, #32
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	2378      	movs	r3, #120	; 0x78
 800753c:	4828      	ldr	r0, [pc, #160]	; (80075e0 <_printf_i+0x248>)
 800753e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007542:	e7e3      	b.n	800750c <_printf_i+0x174>
 8007544:	065e      	lsls	r6, r3, #25
 8007546:	bf48      	it	mi
 8007548:	b2ad      	uxthmi	r5, r5
 800754a:	e7e6      	b.n	800751a <_printf_i+0x182>
 800754c:	4616      	mov	r6, r2
 800754e:	e7bb      	b.n	80074c8 <_printf_i+0x130>
 8007550:	680b      	ldr	r3, [r1, #0]
 8007552:	6826      	ldr	r6, [r4, #0]
 8007554:	6960      	ldr	r0, [r4, #20]
 8007556:	1d1d      	adds	r5, r3, #4
 8007558:	600d      	str	r5, [r1, #0]
 800755a:	0635      	lsls	r5, r6, #24
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	d501      	bpl.n	8007564 <_printf_i+0x1cc>
 8007560:	6018      	str	r0, [r3, #0]
 8007562:	e002      	b.n	800756a <_printf_i+0x1d2>
 8007564:	0671      	lsls	r1, r6, #25
 8007566:	d5fb      	bpl.n	8007560 <_printf_i+0x1c8>
 8007568:	8018      	strh	r0, [r3, #0]
 800756a:	2300      	movs	r3, #0
 800756c:	6123      	str	r3, [r4, #16]
 800756e:	4616      	mov	r6, r2
 8007570:	e7ba      	b.n	80074e8 <_printf_i+0x150>
 8007572:	680b      	ldr	r3, [r1, #0]
 8007574:	1d1a      	adds	r2, r3, #4
 8007576:	600a      	str	r2, [r1, #0]
 8007578:	681e      	ldr	r6, [r3, #0]
 800757a:	6862      	ldr	r2, [r4, #4]
 800757c:	2100      	movs	r1, #0
 800757e:	4630      	mov	r0, r6
 8007580:	f7f8 fe2e 	bl	80001e0 <memchr>
 8007584:	b108      	cbz	r0, 800758a <_printf_i+0x1f2>
 8007586:	1b80      	subs	r0, r0, r6
 8007588:	6060      	str	r0, [r4, #4]
 800758a:	6863      	ldr	r3, [r4, #4]
 800758c:	6123      	str	r3, [r4, #16]
 800758e:	2300      	movs	r3, #0
 8007590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007594:	e7a8      	b.n	80074e8 <_printf_i+0x150>
 8007596:	6923      	ldr	r3, [r4, #16]
 8007598:	4632      	mov	r2, r6
 800759a:	4649      	mov	r1, r9
 800759c:	4640      	mov	r0, r8
 800759e:	47d0      	blx	sl
 80075a0:	3001      	adds	r0, #1
 80075a2:	d0ab      	beq.n	80074fc <_printf_i+0x164>
 80075a4:	6823      	ldr	r3, [r4, #0]
 80075a6:	079b      	lsls	r3, r3, #30
 80075a8:	d413      	bmi.n	80075d2 <_printf_i+0x23a>
 80075aa:	68e0      	ldr	r0, [r4, #12]
 80075ac:	9b03      	ldr	r3, [sp, #12]
 80075ae:	4298      	cmp	r0, r3
 80075b0:	bfb8      	it	lt
 80075b2:	4618      	movlt	r0, r3
 80075b4:	e7a4      	b.n	8007500 <_printf_i+0x168>
 80075b6:	2301      	movs	r3, #1
 80075b8:	4632      	mov	r2, r6
 80075ba:	4649      	mov	r1, r9
 80075bc:	4640      	mov	r0, r8
 80075be:	47d0      	blx	sl
 80075c0:	3001      	adds	r0, #1
 80075c2:	d09b      	beq.n	80074fc <_printf_i+0x164>
 80075c4:	3501      	adds	r5, #1
 80075c6:	68e3      	ldr	r3, [r4, #12]
 80075c8:	9903      	ldr	r1, [sp, #12]
 80075ca:	1a5b      	subs	r3, r3, r1
 80075cc:	42ab      	cmp	r3, r5
 80075ce:	dcf2      	bgt.n	80075b6 <_printf_i+0x21e>
 80075d0:	e7eb      	b.n	80075aa <_printf_i+0x212>
 80075d2:	2500      	movs	r5, #0
 80075d4:	f104 0619 	add.w	r6, r4, #25
 80075d8:	e7f5      	b.n	80075c6 <_printf_i+0x22e>
 80075da:	bf00      	nop
 80075dc:	0800b5b6 	.word	0x0800b5b6
 80075e0:	0800b5c7 	.word	0x0800b5c7

080075e4 <_scanf_float>:
 80075e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e8:	b087      	sub	sp, #28
 80075ea:	4617      	mov	r7, r2
 80075ec:	9303      	str	r3, [sp, #12]
 80075ee:	688b      	ldr	r3, [r1, #8]
 80075f0:	1e5a      	subs	r2, r3, #1
 80075f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80075f6:	bf83      	ittte	hi
 80075f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80075fc:	195b      	addhi	r3, r3, r5
 80075fe:	9302      	strhi	r3, [sp, #8]
 8007600:	2300      	movls	r3, #0
 8007602:	bf86      	itte	hi
 8007604:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007608:	608b      	strhi	r3, [r1, #8]
 800760a:	9302      	strls	r3, [sp, #8]
 800760c:	680b      	ldr	r3, [r1, #0]
 800760e:	468b      	mov	fp, r1
 8007610:	2500      	movs	r5, #0
 8007612:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007616:	f84b 3b1c 	str.w	r3, [fp], #28
 800761a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800761e:	4680      	mov	r8, r0
 8007620:	460c      	mov	r4, r1
 8007622:	465e      	mov	r6, fp
 8007624:	46aa      	mov	sl, r5
 8007626:	46a9      	mov	r9, r5
 8007628:	9501      	str	r5, [sp, #4]
 800762a:	68a2      	ldr	r2, [r4, #8]
 800762c:	b152      	cbz	r2, 8007644 <_scanf_float+0x60>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	2b4e      	cmp	r3, #78	; 0x4e
 8007634:	d864      	bhi.n	8007700 <_scanf_float+0x11c>
 8007636:	2b40      	cmp	r3, #64	; 0x40
 8007638:	d83c      	bhi.n	80076b4 <_scanf_float+0xd0>
 800763a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800763e:	b2c8      	uxtb	r0, r1
 8007640:	280e      	cmp	r0, #14
 8007642:	d93a      	bls.n	80076ba <_scanf_float+0xd6>
 8007644:	f1b9 0f00 	cmp.w	r9, #0
 8007648:	d003      	beq.n	8007652 <_scanf_float+0x6e>
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007656:	f1ba 0f01 	cmp.w	sl, #1
 800765a:	f200 8113 	bhi.w	8007884 <_scanf_float+0x2a0>
 800765e:	455e      	cmp	r6, fp
 8007660:	f200 8105 	bhi.w	800786e <_scanf_float+0x28a>
 8007664:	2501      	movs	r5, #1
 8007666:	4628      	mov	r0, r5
 8007668:	b007      	add	sp, #28
 800766a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007672:	2a0d      	cmp	r2, #13
 8007674:	d8e6      	bhi.n	8007644 <_scanf_float+0x60>
 8007676:	a101      	add	r1, pc, #4	; (adr r1, 800767c <_scanf_float+0x98>)
 8007678:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800767c:	080077bb 	.word	0x080077bb
 8007680:	08007645 	.word	0x08007645
 8007684:	08007645 	.word	0x08007645
 8007688:	08007645 	.word	0x08007645
 800768c:	0800781b 	.word	0x0800781b
 8007690:	080077f3 	.word	0x080077f3
 8007694:	08007645 	.word	0x08007645
 8007698:	08007645 	.word	0x08007645
 800769c:	080077c9 	.word	0x080077c9
 80076a0:	08007645 	.word	0x08007645
 80076a4:	08007645 	.word	0x08007645
 80076a8:	08007645 	.word	0x08007645
 80076ac:	08007645 	.word	0x08007645
 80076b0:	08007781 	.word	0x08007781
 80076b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80076b8:	e7db      	b.n	8007672 <_scanf_float+0x8e>
 80076ba:	290e      	cmp	r1, #14
 80076bc:	d8c2      	bhi.n	8007644 <_scanf_float+0x60>
 80076be:	a001      	add	r0, pc, #4	; (adr r0, 80076c4 <_scanf_float+0xe0>)
 80076c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80076c4:	08007773 	.word	0x08007773
 80076c8:	08007645 	.word	0x08007645
 80076cc:	08007773 	.word	0x08007773
 80076d0:	08007807 	.word	0x08007807
 80076d4:	08007645 	.word	0x08007645
 80076d8:	08007721 	.word	0x08007721
 80076dc:	0800775d 	.word	0x0800775d
 80076e0:	0800775d 	.word	0x0800775d
 80076e4:	0800775d 	.word	0x0800775d
 80076e8:	0800775d 	.word	0x0800775d
 80076ec:	0800775d 	.word	0x0800775d
 80076f0:	0800775d 	.word	0x0800775d
 80076f4:	0800775d 	.word	0x0800775d
 80076f8:	0800775d 	.word	0x0800775d
 80076fc:	0800775d 	.word	0x0800775d
 8007700:	2b6e      	cmp	r3, #110	; 0x6e
 8007702:	d809      	bhi.n	8007718 <_scanf_float+0x134>
 8007704:	2b60      	cmp	r3, #96	; 0x60
 8007706:	d8b2      	bhi.n	800766e <_scanf_float+0x8a>
 8007708:	2b54      	cmp	r3, #84	; 0x54
 800770a:	d077      	beq.n	80077fc <_scanf_float+0x218>
 800770c:	2b59      	cmp	r3, #89	; 0x59
 800770e:	d199      	bne.n	8007644 <_scanf_float+0x60>
 8007710:	2d07      	cmp	r5, #7
 8007712:	d197      	bne.n	8007644 <_scanf_float+0x60>
 8007714:	2508      	movs	r5, #8
 8007716:	e029      	b.n	800776c <_scanf_float+0x188>
 8007718:	2b74      	cmp	r3, #116	; 0x74
 800771a:	d06f      	beq.n	80077fc <_scanf_float+0x218>
 800771c:	2b79      	cmp	r3, #121	; 0x79
 800771e:	e7f6      	b.n	800770e <_scanf_float+0x12a>
 8007720:	6821      	ldr	r1, [r4, #0]
 8007722:	05c8      	lsls	r0, r1, #23
 8007724:	d51a      	bpl.n	800775c <_scanf_float+0x178>
 8007726:	9b02      	ldr	r3, [sp, #8]
 8007728:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800772c:	6021      	str	r1, [r4, #0]
 800772e:	f109 0901 	add.w	r9, r9, #1
 8007732:	b11b      	cbz	r3, 800773c <_scanf_float+0x158>
 8007734:	3b01      	subs	r3, #1
 8007736:	3201      	adds	r2, #1
 8007738:	9302      	str	r3, [sp, #8]
 800773a:	60a2      	str	r2, [r4, #8]
 800773c:	68a3      	ldr	r3, [r4, #8]
 800773e:	3b01      	subs	r3, #1
 8007740:	60a3      	str	r3, [r4, #8]
 8007742:	6923      	ldr	r3, [r4, #16]
 8007744:	3301      	adds	r3, #1
 8007746:	6123      	str	r3, [r4, #16]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3b01      	subs	r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	607b      	str	r3, [r7, #4]
 8007750:	f340 8084 	ble.w	800785c <_scanf_float+0x278>
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	3301      	adds	r3, #1
 8007758:	603b      	str	r3, [r7, #0]
 800775a:	e766      	b.n	800762a <_scanf_float+0x46>
 800775c:	eb1a 0f05 	cmn.w	sl, r5
 8007760:	f47f af70 	bne.w	8007644 <_scanf_float+0x60>
 8007764:	6822      	ldr	r2, [r4, #0]
 8007766:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800776a:	6022      	str	r2, [r4, #0]
 800776c:	f806 3b01 	strb.w	r3, [r6], #1
 8007770:	e7e4      	b.n	800773c <_scanf_float+0x158>
 8007772:	6822      	ldr	r2, [r4, #0]
 8007774:	0610      	lsls	r0, r2, #24
 8007776:	f57f af65 	bpl.w	8007644 <_scanf_float+0x60>
 800777a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800777e:	e7f4      	b.n	800776a <_scanf_float+0x186>
 8007780:	f1ba 0f00 	cmp.w	sl, #0
 8007784:	d10e      	bne.n	80077a4 <_scanf_float+0x1c0>
 8007786:	f1b9 0f00 	cmp.w	r9, #0
 800778a:	d10e      	bne.n	80077aa <_scanf_float+0x1c6>
 800778c:	6822      	ldr	r2, [r4, #0]
 800778e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007792:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007796:	d108      	bne.n	80077aa <_scanf_float+0x1c6>
 8007798:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800779c:	6022      	str	r2, [r4, #0]
 800779e:	f04f 0a01 	mov.w	sl, #1
 80077a2:	e7e3      	b.n	800776c <_scanf_float+0x188>
 80077a4:	f1ba 0f02 	cmp.w	sl, #2
 80077a8:	d055      	beq.n	8007856 <_scanf_float+0x272>
 80077aa:	2d01      	cmp	r5, #1
 80077ac:	d002      	beq.n	80077b4 <_scanf_float+0x1d0>
 80077ae:	2d04      	cmp	r5, #4
 80077b0:	f47f af48 	bne.w	8007644 <_scanf_float+0x60>
 80077b4:	3501      	adds	r5, #1
 80077b6:	b2ed      	uxtb	r5, r5
 80077b8:	e7d8      	b.n	800776c <_scanf_float+0x188>
 80077ba:	f1ba 0f01 	cmp.w	sl, #1
 80077be:	f47f af41 	bne.w	8007644 <_scanf_float+0x60>
 80077c2:	f04f 0a02 	mov.w	sl, #2
 80077c6:	e7d1      	b.n	800776c <_scanf_float+0x188>
 80077c8:	b97d      	cbnz	r5, 80077ea <_scanf_float+0x206>
 80077ca:	f1b9 0f00 	cmp.w	r9, #0
 80077ce:	f47f af3c 	bne.w	800764a <_scanf_float+0x66>
 80077d2:	6822      	ldr	r2, [r4, #0]
 80077d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80077d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80077dc:	f47f af39 	bne.w	8007652 <_scanf_float+0x6e>
 80077e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077e4:	6022      	str	r2, [r4, #0]
 80077e6:	2501      	movs	r5, #1
 80077e8:	e7c0      	b.n	800776c <_scanf_float+0x188>
 80077ea:	2d03      	cmp	r5, #3
 80077ec:	d0e2      	beq.n	80077b4 <_scanf_float+0x1d0>
 80077ee:	2d05      	cmp	r5, #5
 80077f0:	e7de      	b.n	80077b0 <_scanf_float+0x1cc>
 80077f2:	2d02      	cmp	r5, #2
 80077f4:	f47f af26 	bne.w	8007644 <_scanf_float+0x60>
 80077f8:	2503      	movs	r5, #3
 80077fa:	e7b7      	b.n	800776c <_scanf_float+0x188>
 80077fc:	2d06      	cmp	r5, #6
 80077fe:	f47f af21 	bne.w	8007644 <_scanf_float+0x60>
 8007802:	2507      	movs	r5, #7
 8007804:	e7b2      	b.n	800776c <_scanf_float+0x188>
 8007806:	6822      	ldr	r2, [r4, #0]
 8007808:	0591      	lsls	r1, r2, #22
 800780a:	f57f af1b 	bpl.w	8007644 <_scanf_float+0x60>
 800780e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007812:	6022      	str	r2, [r4, #0]
 8007814:	f8cd 9004 	str.w	r9, [sp, #4]
 8007818:	e7a8      	b.n	800776c <_scanf_float+0x188>
 800781a:	6822      	ldr	r2, [r4, #0]
 800781c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007820:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007824:	d006      	beq.n	8007834 <_scanf_float+0x250>
 8007826:	0550      	lsls	r0, r2, #21
 8007828:	f57f af0c 	bpl.w	8007644 <_scanf_float+0x60>
 800782c:	f1b9 0f00 	cmp.w	r9, #0
 8007830:	f43f af0f 	beq.w	8007652 <_scanf_float+0x6e>
 8007834:	0591      	lsls	r1, r2, #22
 8007836:	bf58      	it	pl
 8007838:	9901      	ldrpl	r1, [sp, #4]
 800783a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800783e:	bf58      	it	pl
 8007840:	eba9 0101 	subpl.w	r1, r9, r1
 8007844:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007848:	bf58      	it	pl
 800784a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800784e:	6022      	str	r2, [r4, #0]
 8007850:	f04f 0900 	mov.w	r9, #0
 8007854:	e78a      	b.n	800776c <_scanf_float+0x188>
 8007856:	f04f 0a03 	mov.w	sl, #3
 800785a:	e787      	b.n	800776c <_scanf_float+0x188>
 800785c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007860:	4639      	mov	r1, r7
 8007862:	4640      	mov	r0, r8
 8007864:	4798      	blx	r3
 8007866:	2800      	cmp	r0, #0
 8007868:	f43f aedf 	beq.w	800762a <_scanf_float+0x46>
 800786c:	e6ea      	b.n	8007644 <_scanf_float+0x60>
 800786e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007872:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007876:	463a      	mov	r2, r7
 8007878:	4640      	mov	r0, r8
 800787a:	4798      	blx	r3
 800787c:	6923      	ldr	r3, [r4, #16]
 800787e:	3b01      	subs	r3, #1
 8007880:	6123      	str	r3, [r4, #16]
 8007882:	e6ec      	b.n	800765e <_scanf_float+0x7a>
 8007884:	1e6b      	subs	r3, r5, #1
 8007886:	2b06      	cmp	r3, #6
 8007888:	d825      	bhi.n	80078d6 <_scanf_float+0x2f2>
 800788a:	2d02      	cmp	r5, #2
 800788c:	d836      	bhi.n	80078fc <_scanf_float+0x318>
 800788e:	455e      	cmp	r6, fp
 8007890:	f67f aee8 	bls.w	8007664 <_scanf_float+0x80>
 8007894:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007898:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800789c:	463a      	mov	r2, r7
 800789e:	4640      	mov	r0, r8
 80078a0:	4798      	blx	r3
 80078a2:	6923      	ldr	r3, [r4, #16]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	6123      	str	r3, [r4, #16]
 80078a8:	e7f1      	b.n	800788e <_scanf_float+0x2aa>
 80078aa:	9802      	ldr	r0, [sp, #8]
 80078ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80078b4:	9002      	str	r0, [sp, #8]
 80078b6:	463a      	mov	r2, r7
 80078b8:	4640      	mov	r0, r8
 80078ba:	4798      	blx	r3
 80078bc:	6923      	ldr	r3, [r4, #16]
 80078be:	3b01      	subs	r3, #1
 80078c0:	6123      	str	r3, [r4, #16]
 80078c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078c6:	fa5f fa8a 	uxtb.w	sl, sl
 80078ca:	f1ba 0f02 	cmp.w	sl, #2
 80078ce:	d1ec      	bne.n	80078aa <_scanf_float+0x2c6>
 80078d0:	3d03      	subs	r5, #3
 80078d2:	b2ed      	uxtb	r5, r5
 80078d4:	1b76      	subs	r6, r6, r5
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	05da      	lsls	r2, r3, #23
 80078da:	d52f      	bpl.n	800793c <_scanf_float+0x358>
 80078dc:	055b      	lsls	r3, r3, #21
 80078de:	d510      	bpl.n	8007902 <_scanf_float+0x31e>
 80078e0:	455e      	cmp	r6, fp
 80078e2:	f67f aebf 	bls.w	8007664 <_scanf_float+0x80>
 80078e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078ee:	463a      	mov	r2, r7
 80078f0:	4640      	mov	r0, r8
 80078f2:	4798      	blx	r3
 80078f4:	6923      	ldr	r3, [r4, #16]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	6123      	str	r3, [r4, #16]
 80078fa:	e7f1      	b.n	80078e0 <_scanf_float+0x2fc>
 80078fc:	46aa      	mov	sl, r5
 80078fe:	9602      	str	r6, [sp, #8]
 8007900:	e7df      	b.n	80078c2 <_scanf_float+0x2de>
 8007902:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007906:	6923      	ldr	r3, [r4, #16]
 8007908:	2965      	cmp	r1, #101	; 0x65
 800790a:	f103 33ff 	add.w	r3, r3, #4294967295
 800790e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007912:	6123      	str	r3, [r4, #16]
 8007914:	d00c      	beq.n	8007930 <_scanf_float+0x34c>
 8007916:	2945      	cmp	r1, #69	; 0x45
 8007918:	d00a      	beq.n	8007930 <_scanf_float+0x34c>
 800791a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800791e:	463a      	mov	r2, r7
 8007920:	4640      	mov	r0, r8
 8007922:	4798      	blx	r3
 8007924:	6923      	ldr	r3, [r4, #16]
 8007926:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800792a:	3b01      	subs	r3, #1
 800792c:	1eb5      	subs	r5, r6, #2
 800792e:	6123      	str	r3, [r4, #16]
 8007930:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007934:	463a      	mov	r2, r7
 8007936:	4640      	mov	r0, r8
 8007938:	4798      	blx	r3
 800793a:	462e      	mov	r6, r5
 800793c:	6825      	ldr	r5, [r4, #0]
 800793e:	f015 0510 	ands.w	r5, r5, #16
 8007942:	d158      	bne.n	80079f6 <_scanf_float+0x412>
 8007944:	7035      	strb	r5, [r6, #0]
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800794c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007950:	d11c      	bne.n	800798c <_scanf_float+0x3a8>
 8007952:	9b01      	ldr	r3, [sp, #4]
 8007954:	454b      	cmp	r3, r9
 8007956:	eba3 0209 	sub.w	r2, r3, r9
 800795a:	d124      	bne.n	80079a6 <_scanf_float+0x3c2>
 800795c:	2200      	movs	r2, #0
 800795e:	4659      	mov	r1, fp
 8007960:	4640      	mov	r0, r8
 8007962:	f000 fe9b 	bl	800869c <_strtod_r>
 8007966:	9b03      	ldr	r3, [sp, #12]
 8007968:	6821      	ldr	r1, [r4, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f011 0f02 	tst.w	r1, #2
 8007970:	ec57 6b10 	vmov	r6, r7, d0
 8007974:	f103 0204 	add.w	r2, r3, #4
 8007978:	d020      	beq.n	80079bc <_scanf_float+0x3d8>
 800797a:	9903      	ldr	r1, [sp, #12]
 800797c:	600a      	str	r2, [r1, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	e9c3 6700 	strd	r6, r7, [r3]
 8007984:	68e3      	ldr	r3, [r4, #12]
 8007986:	3301      	adds	r3, #1
 8007988:	60e3      	str	r3, [r4, #12]
 800798a:	e66c      	b.n	8007666 <_scanf_float+0x82>
 800798c:	9b04      	ldr	r3, [sp, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0e4      	beq.n	800795c <_scanf_float+0x378>
 8007992:	9905      	ldr	r1, [sp, #20]
 8007994:	230a      	movs	r3, #10
 8007996:	462a      	mov	r2, r5
 8007998:	3101      	adds	r1, #1
 800799a:	4640      	mov	r0, r8
 800799c:	f000 ff08 	bl	80087b0 <_strtol_r>
 80079a0:	9b04      	ldr	r3, [sp, #16]
 80079a2:	9e05      	ldr	r6, [sp, #20]
 80079a4:	1ac2      	subs	r2, r0, r3
 80079a6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80079aa:	429e      	cmp	r6, r3
 80079ac:	bf28      	it	cs
 80079ae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80079b2:	4912      	ldr	r1, [pc, #72]	; (80079fc <_scanf_float+0x418>)
 80079b4:	4630      	mov	r0, r6
 80079b6:	f000 f82b 	bl	8007a10 <siprintf>
 80079ba:	e7cf      	b.n	800795c <_scanf_float+0x378>
 80079bc:	f011 0f04 	tst.w	r1, #4
 80079c0:	9903      	ldr	r1, [sp, #12]
 80079c2:	600a      	str	r2, [r1, #0]
 80079c4:	d1db      	bne.n	800797e <_scanf_float+0x39a>
 80079c6:	f8d3 8000 	ldr.w	r8, [r3]
 80079ca:	ee10 2a10 	vmov	r2, s0
 80079ce:	ee10 0a10 	vmov	r0, s0
 80079d2:	463b      	mov	r3, r7
 80079d4:	4639      	mov	r1, r7
 80079d6:	f7f9 f8a9 	bl	8000b2c <__aeabi_dcmpun>
 80079da:	b128      	cbz	r0, 80079e8 <_scanf_float+0x404>
 80079dc:	4808      	ldr	r0, [pc, #32]	; (8007a00 <_scanf_float+0x41c>)
 80079de:	f000 f811 	bl	8007a04 <nanf>
 80079e2:	ed88 0a00 	vstr	s0, [r8]
 80079e6:	e7cd      	b.n	8007984 <_scanf_float+0x3a0>
 80079e8:	4630      	mov	r0, r6
 80079ea:	4639      	mov	r1, r7
 80079ec:	f7f9 f8fc 	bl	8000be8 <__aeabi_d2f>
 80079f0:	f8c8 0000 	str.w	r0, [r8]
 80079f4:	e7c6      	b.n	8007984 <_scanf_float+0x3a0>
 80079f6:	2500      	movs	r5, #0
 80079f8:	e635      	b.n	8007666 <_scanf_float+0x82>
 80079fa:	bf00      	nop
 80079fc:	0800b5d8 	.word	0x0800b5d8
 8007a00:	0800b9f0 	.word	0x0800b9f0

08007a04 <nanf>:
 8007a04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007a0c <nanf+0x8>
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	7fc00000 	.word	0x7fc00000

08007a10 <siprintf>:
 8007a10:	b40e      	push	{r1, r2, r3}
 8007a12:	b500      	push	{lr}
 8007a14:	b09c      	sub	sp, #112	; 0x70
 8007a16:	ab1d      	add	r3, sp, #116	; 0x74
 8007a18:	9002      	str	r0, [sp, #8]
 8007a1a:	9006      	str	r0, [sp, #24]
 8007a1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a20:	4809      	ldr	r0, [pc, #36]	; (8007a48 <siprintf+0x38>)
 8007a22:	9107      	str	r1, [sp, #28]
 8007a24:	9104      	str	r1, [sp, #16]
 8007a26:	4909      	ldr	r1, [pc, #36]	; (8007a4c <siprintf+0x3c>)
 8007a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a2c:	9105      	str	r1, [sp, #20]
 8007a2e:	6800      	ldr	r0, [r0, #0]
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	a902      	add	r1, sp, #8
 8007a34:	f002 fea4 	bl	800a780 <_svfiprintf_r>
 8007a38:	9b02      	ldr	r3, [sp, #8]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	701a      	strb	r2, [r3, #0]
 8007a3e:	b01c      	add	sp, #112	; 0x70
 8007a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a44:	b003      	add	sp, #12
 8007a46:	4770      	bx	lr
 8007a48:	20000440 	.word	0x20000440
 8007a4c:	ffff0208 	.word	0xffff0208

08007a50 <sulp>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	4604      	mov	r4, r0
 8007a54:	460d      	mov	r5, r1
 8007a56:	ec45 4b10 	vmov	d0, r4, r5
 8007a5a:	4616      	mov	r6, r2
 8007a5c:	f002 fc2c 	bl	800a2b8 <__ulp>
 8007a60:	ec51 0b10 	vmov	r0, r1, d0
 8007a64:	b17e      	cbz	r6, 8007a86 <sulp+0x36>
 8007a66:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007a6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	dd09      	ble.n	8007a86 <sulp+0x36>
 8007a72:	051b      	lsls	r3, r3, #20
 8007a74:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007a78:	2400      	movs	r4, #0
 8007a7a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a7e:	4622      	mov	r2, r4
 8007a80:	462b      	mov	r3, r5
 8007a82:	f7f8 fdb9 	bl	80005f8 <__aeabi_dmul>
 8007a86:	bd70      	pop	{r4, r5, r6, pc}

08007a88 <_strtod_l>:
 8007a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8c:	b0a3      	sub	sp, #140	; 0x8c
 8007a8e:	461f      	mov	r7, r3
 8007a90:	2300      	movs	r3, #0
 8007a92:	931e      	str	r3, [sp, #120]	; 0x78
 8007a94:	4ba4      	ldr	r3, [pc, #656]	; (8007d28 <_strtod_l+0x2a0>)
 8007a96:	9219      	str	r2, [sp, #100]	; 0x64
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	9307      	str	r3, [sp, #28]
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	4688      	mov	r8, r1
 8007aa2:	f7f8 fb95 	bl	80001d0 <strlen>
 8007aa6:	f04f 0a00 	mov.w	sl, #0
 8007aaa:	4605      	mov	r5, r0
 8007aac:	f04f 0b00 	mov.w	fp, #0
 8007ab0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007ab4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ab6:	781a      	ldrb	r2, [r3, #0]
 8007ab8:	2a2b      	cmp	r2, #43	; 0x2b
 8007aba:	d04c      	beq.n	8007b56 <_strtod_l+0xce>
 8007abc:	d839      	bhi.n	8007b32 <_strtod_l+0xaa>
 8007abe:	2a0d      	cmp	r2, #13
 8007ac0:	d832      	bhi.n	8007b28 <_strtod_l+0xa0>
 8007ac2:	2a08      	cmp	r2, #8
 8007ac4:	d832      	bhi.n	8007b2c <_strtod_l+0xa4>
 8007ac6:	2a00      	cmp	r2, #0
 8007ac8:	d03c      	beq.n	8007b44 <_strtod_l+0xbc>
 8007aca:	2300      	movs	r3, #0
 8007acc:	930e      	str	r3, [sp, #56]	; 0x38
 8007ace:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007ad0:	7833      	ldrb	r3, [r6, #0]
 8007ad2:	2b30      	cmp	r3, #48	; 0x30
 8007ad4:	f040 80b4 	bne.w	8007c40 <_strtod_l+0x1b8>
 8007ad8:	7873      	ldrb	r3, [r6, #1]
 8007ada:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ade:	2b58      	cmp	r3, #88	; 0x58
 8007ae0:	d16c      	bne.n	8007bbc <_strtod_l+0x134>
 8007ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ae4:	9301      	str	r3, [sp, #4]
 8007ae6:	ab1e      	add	r3, sp, #120	; 0x78
 8007ae8:	9702      	str	r7, [sp, #8]
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	4a8f      	ldr	r2, [pc, #572]	; (8007d2c <_strtod_l+0x2a4>)
 8007aee:	ab1f      	add	r3, sp, #124	; 0x7c
 8007af0:	a91d      	add	r1, sp, #116	; 0x74
 8007af2:	4620      	mov	r0, r4
 8007af4:	f001 fd40 	bl	8009578 <__gethex>
 8007af8:	f010 0707 	ands.w	r7, r0, #7
 8007afc:	4605      	mov	r5, r0
 8007afe:	d005      	beq.n	8007b0c <_strtod_l+0x84>
 8007b00:	2f06      	cmp	r7, #6
 8007b02:	d12a      	bne.n	8007b5a <_strtod_l+0xd2>
 8007b04:	3601      	adds	r6, #1
 8007b06:	2300      	movs	r3, #0
 8007b08:	961d      	str	r6, [sp, #116]	; 0x74
 8007b0a:	930e      	str	r3, [sp, #56]	; 0x38
 8007b0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f040 8596 	bne.w	8008640 <_strtod_l+0xbb8>
 8007b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b16:	b1db      	cbz	r3, 8007b50 <_strtod_l+0xc8>
 8007b18:	4652      	mov	r2, sl
 8007b1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b1e:	ec43 2b10 	vmov	d0, r2, r3
 8007b22:	b023      	add	sp, #140	; 0x8c
 8007b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b28:	2a20      	cmp	r2, #32
 8007b2a:	d1ce      	bne.n	8007aca <_strtod_l+0x42>
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	931d      	str	r3, [sp, #116]	; 0x74
 8007b30:	e7c0      	b.n	8007ab4 <_strtod_l+0x2c>
 8007b32:	2a2d      	cmp	r2, #45	; 0x2d
 8007b34:	d1c9      	bne.n	8007aca <_strtod_l+0x42>
 8007b36:	2201      	movs	r2, #1
 8007b38:	920e      	str	r2, [sp, #56]	; 0x38
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	921d      	str	r2, [sp, #116]	; 0x74
 8007b3e:	785b      	ldrb	r3, [r3, #1]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1c4      	bne.n	8007ace <_strtod_l+0x46>
 8007b44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b46:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f040 8576 	bne.w	800863c <_strtod_l+0xbb4>
 8007b50:	4652      	mov	r2, sl
 8007b52:	465b      	mov	r3, fp
 8007b54:	e7e3      	b.n	8007b1e <_strtod_l+0x96>
 8007b56:	2200      	movs	r2, #0
 8007b58:	e7ee      	b.n	8007b38 <_strtod_l+0xb0>
 8007b5a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007b5c:	b13a      	cbz	r2, 8007b6e <_strtod_l+0xe6>
 8007b5e:	2135      	movs	r1, #53	; 0x35
 8007b60:	a820      	add	r0, sp, #128	; 0x80
 8007b62:	f002 fcb4 	bl	800a4ce <__copybits>
 8007b66:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f002 f879 	bl	8009c60 <_Bfree>
 8007b6e:	3f01      	subs	r7, #1
 8007b70:	2f05      	cmp	r7, #5
 8007b72:	d807      	bhi.n	8007b84 <_strtod_l+0xfc>
 8007b74:	e8df f007 	tbb	[pc, r7]
 8007b78:	1d180b0e 	.word	0x1d180b0e
 8007b7c:	030e      	.short	0x030e
 8007b7e:	f04f 0b00 	mov.w	fp, #0
 8007b82:	46da      	mov	sl, fp
 8007b84:	0728      	lsls	r0, r5, #28
 8007b86:	d5c1      	bpl.n	8007b0c <_strtod_l+0x84>
 8007b88:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007b8c:	e7be      	b.n	8007b0c <_strtod_l+0x84>
 8007b8e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007b92:	e7f7      	b.n	8007b84 <_strtod_l+0xfc>
 8007b94:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007b98:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007b9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007ba2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007ba6:	e7ed      	b.n	8007b84 <_strtod_l+0xfc>
 8007ba8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007d30 <_strtod_l+0x2a8>
 8007bac:	f04f 0a00 	mov.w	sl, #0
 8007bb0:	e7e8      	b.n	8007b84 <_strtod_l+0xfc>
 8007bb2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007bb6:	f04f 3aff 	mov.w	sl, #4294967295
 8007bba:	e7e3      	b.n	8007b84 <_strtod_l+0xfc>
 8007bbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	921d      	str	r2, [sp, #116]	; 0x74
 8007bc2:	785b      	ldrb	r3, [r3, #1]
 8007bc4:	2b30      	cmp	r3, #48	; 0x30
 8007bc6:	d0f9      	beq.n	8007bbc <_strtod_l+0x134>
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d09f      	beq.n	8007b0c <_strtod_l+0x84>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	f04f 0900 	mov.w	r9, #0
 8007bd2:	9304      	str	r3, [sp, #16]
 8007bd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8007bd8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007bdc:	464f      	mov	r7, r9
 8007bde:	220a      	movs	r2, #10
 8007be0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007be2:	7806      	ldrb	r6, [r0, #0]
 8007be4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007be8:	b2d9      	uxtb	r1, r3
 8007bea:	2909      	cmp	r1, #9
 8007bec:	d92a      	bls.n	8007c44 <_strtod_l+0x1bc>
 8007bee:	9907      	ldr	r1, [sp, #28]
 8007bf0:	462a      	mov	r2, r5
 8007bf2:	f002 fedd 	bl	800a9b0 <strncmp>
 8007bf6:	b398      	cbz	r0, 8007c60 <_strtod_l+0x1d8>
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	4633      	mov	r3, r6
 8007bfc:	463d      	mov	r5, r7
 8007bfe:	9007      	str	r0, [sp, #28]
 8007c00:	4602      	mov	r2, r0
 8007c02:	2b65      	cmp	r3, #101	; 0x65
 8007c04:	d001      	beq.n	8007c0a <_strtod_l+0x182>
 8007c06:	2b45      	cmp	r3, #69	; 0x45
 8007c08:	d118      	bne.n	8007c3c <_strtod_l+0x1b4>
 8007c0a:	b91d      	cbnz	r5, 8007c14 <_strtod_l+0x18c>
 8007c0c:	9b04      	ldr	r3, [sp, #16]
 8007c0e:	4303      	orrs	r3, r0
 8007c10:	d098      	beq.n	8007b44 <_strtod_l+0xbc>
 8007c12:	2500      	movs	r5, #0
 8007c14:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007c18:	f108 0301 	add.w	r3, r8, #1
 8007c1c:	931d      	str	r3, [sp, #116]	; 0x74
 8007c1e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007c22:	2b2b      	cmp	r3, #43	; 0x2b
 8007c24:	d075      	beq.n	8007d12 <_strtod_l+0x28a>
 8007c26:	2b2d      	cmp	r3, #45	; 0x2d
 8007c28:	d07b      	beq.n	8007d22 <_strtod_l+0x29a>
 8007c2a:	f04f 0c00 	mov.w	ip, #0
 8007c2e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007c32:	2909      	cmp	r1, #9
 8007c34:	f240 8082 	bls.w	8007d3c <_strtod_l+0x2b4>
 8007c38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007c3c:	2600      	movs	r6, #0
 8007c3e:	e09d      	b.n	8007d7c <_strtod_l+0x2f4>
 8007c40:	2300      	movs	r3, #0
 8007c42:	e7c4      	b.n	8007bce <_strtod_l+0x146>
 8007c44:	2f08      	cmp	r7, #8
 8007c46:	bfd8      	it	le
 8007c48:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007c4a:	f100 0001 	add.w	r0, r0, #1
 8007c4e:	bfda      	itte	le
 8007c50:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c54:	9309      	strle	r3, [sp, #36]	; 0x24
 8007c56:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007c5a:	3701      	adds	r7, #1
 8007c5c:	901d      	str	r0, [sp, #116]	; 0x74
 8007c5e:	e7bf      	b.n	8007be0 <_strtod_l+0x158>
 8007c60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c62:	195a      	adds	r2, r3, r5
 8007c64:	921d      	str	r2, [sp, #116]	; 0x74
 8007c66:	5d5b      	ldrb	r3, [r3, r5]
 8007c68:	2f00      	cmp	r7, #0
 8007c6a:	d037      	beq.n	8007cdc <_strtod_l+0x254>
 8007c6c:	9007      	str	r0, [sp, #28]
 8007c6e:	463d      	mov	r5, r7
 8007c70:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007c74:	2a09      	cmp	r2, #9
 8007c76:	d912      	bls.n	8007c9e <_strtod_l+0x216>
 8007c78:	2201      	movs	r2, #1
 8007c7a:	e7c2      	b.n	8007c02 <_strtod_l+0x17a>
 8007c7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	921d      	str	r2, [sp, #116]	; 0x74
 8007c82:	785b      	ldrb	r3, [r3, #1]
 8007c84:	3001      	adds	r0, #1
 8007c86:	2b30      	cmp	r3, #48	; 0x30
 8007c88:	d0f8      	beq.n	8007c7c <_strtod_l+0x1f4>
 8007c8a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007c8e:	2a08      	cmp	r2, #8
 8007c90:	f200 84db 	bhi.w	800864a <_strtod_l+0xbc2>
 8007c94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007c96:	9007      	str	r0, [sp, #28]
 8007c98:	2000      	movs	r0, #0
 8007c9a:	920a      	str	r2, [sp, #40]	; 0x28
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	3b30      	subs	r3, #48	; 0x30
 8007ca0:	f100 0201 	add.w	r2, r0, #1
 8007ca4:	d014      	beq.n	8007cd0 <_strtod_l+0x248>
 8007ca6:	9907      	ldr	r1, [sp, #28]
 8007ca8:	4411      	add	r1, r2
 8007caa:	9107      	str	r1, [sp, #28]
 8007cac:	462a      	mov	r2, r5
 8007cae:	eb00 0e05 	add.w	lr, r0, r5
 8007cb2:	210a      	movs	r1, #10
 8007cb4:	4572      	cmp	r2, lr
 8007cb6:	d113      	bne.n	8007ce0 <_strtod_l+0x258>
 8007cb8:	182a      	adds	r2, r5, r0
 8007cba:	2a08      	cmp	r2, #8
 8007cbc:	f105 0501 	add.w	r5, r5, #1
 8007cc0:	4405      	add	r5, r0
 8007cc2:	dc1c      	bgt.n	8007cfe <_strtod_l+0x276>
 8007cc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cc6:	220a      	movs	r2, #10
 8007cc8:	fb02 3301 	mla	r3, r2, r1, r3
 8007ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8007cce:	2200      	movs	r2, #0
 8007cd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007cd2:	1c59      	adds	r1, r3, #1
 8007cd4:	911d      	str	r1, [sp, #116]	; 0x74
 8007cd6:	785b      	ldrb	r3, [r3, #1]
 8007cd8:	4610      	mov	r0, r2
 8007cda:	e7c9      	b.n	8007c70 <_strtod_l+0x1e8>
 8007cdc:	4638      	mov	r0, r7
 8007cde:	e7d2      	b.n	8007c86 <_strtod_l+0x1fe>
 8007ce0:	2a08      	cmp	r2, #8
 8007ce2:	dc04      	bgt.n	8007cee <_strtod_l+0x266>
 8007ce4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007ce6:	434e      	muls	r6, r1
 8007ce8:	9609      	str	r6, [sp, #36]	; 0x24
 8007cea:	3201      	adds	r2, #1
 8007cec:	e7e2      	b.n	8007cb4 <_strtod_l+0x22c>
 8007cee:	f102 0c01 	add.w	ip, r2, #1
 8007cf2:	f1bc 0f10 	cmp.w	ip, #16
 8007cf6:	bfd8      	it	le
 8007cf8:	fb01 f909 	mulle.w	r9, r1, r9
 8007cfc:	e7f5      	b.n	8007cea <_strtod_l+0x262>
 8007cfe:	2d10      	cmp	r5, #16
 8007d00:	bfdc      	itt	le
 8007d02:	220a      	movle	r2, #10
 8007d04:	fb02 3909 	mlale	r9, r2, r9, r3
 8007d08:	e7e1      	b.n	8007cce <_strtod_l+0x246>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	9307      	str	r3, [sp, #28]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	e77c      	b.n	8007c0c <_strtod_l+0x184>
 8007d12:	f04f 0c00 	mov.w	ip, #0
 8007d16:	f108 0302 	add.w	r3, r8, #2
 8007d1a:	931d      	str	r3, [sp, #116]	; 0x74
 8007d1c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007d20:	e785      	b.n	8007c2e <_strtod_l+0x1a6>
 8007d22:	f04f 0c01 	mov.w	ip, #1
 8007d26:	e7f6      	b.n	8007d16 <_strtod_l+0x28e>
 8007d28:	0800b830 	.word	0x0800b830
 8007d2c:	0800b5e0 	.word	0x0800b5e0
 8007d30:	7ff00000 	.word	0x7ff00000
 8007d34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d36:	1c59      	adds	r1, r3, #1
 8007d38:	911d      	str	r1, [sp, #116]	; 0x74
 8007d3a:	785b      	ldrb	r3, [r3, #1]
 8007d3c:	2b30      	cmp	r3, #48	; 0x30
 8007d3e:	d0f9      	beq.n	8007d34 <_strtod_l+0x2ac>
 8007d40:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007d44:	2908      	cmp	r1, #8
 8007d46:	f63f af79 	bhi.w	8007c3c <_strtod_l+0x1b4>
 8007d4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007d4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d50:	9308      	str	r3, [sp, #32]
 8007d52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d54:	1c59      	adds	r1, r3, #1
 8007d56:	911d      	str	r1, [sp, #116]	; 0x74
 8007d58:	785b      	ldrb	r3, [r3, #1]
 8007d5a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007d5e:	2e09      	cmp	r6, #9
 8007d60:	d937      	bls.n	8007dd2 <_strtod_l+0x34a>
 8007d62:	9e08      	ldr	r6, [sp, #32]
 8007d64:	1b89      	subs	r1, r1, r6
 8007d66:	2908      	cmp	r1, #8
 8007d68:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007d6c:	dc02      	bgt.n	8007d74 <_strtod_l+0x2ec>
 8007d6e:	4576      	cmp	r6, lr
 8007d70:	bfa8      	it	ge
 8007d72:	4676      	movge	r6, lr
 8007d74:	f1bc 0f00 	cmp.w	ip, #0
 8007d78:	d000      	beq.n	8007d7c <_strtod_l+0x2f4>
 8007d7a:	4276      	negs	r6, r6
 8007d7c:	2d00      	cmp	r5, #0
 8007d7e:	d14f      	bne.n	8007e20 <_strtod_l+0x398>
 8007d80:	9904      	ldr	r1, [sp, #16]
 8007d82:	4301      	orrs	r1, r0
 8007d84:	f47f aec2 	bne.w	8007b0c <_strtod_l+0x84>
 8007d88:	2a00      	cmp	r2, #0
 8007d8a:	f47f aedb 	bne.w	8007b44 <_strtod_l+0xbc>
 8007d8e:	2b69      	cmp	r3, #105	; 0x69
 8007d90:	d027      	beq.n	8007de2 <_strtod_l+0x35a>
 8007d92:	dc24      	bgt.n	8007dde <_strtod_l+0x356>
 8007d94:	2b49      	cmp	r3, #73	; 0x49
 8007d96:	d024      	beq.n	8007de2 <_strtod_l+0x35a>
 8007d98:	2b4e      	cmp	r3, #78	; 0x4e
 8007d9a:	f47f aed3 	bne.w	8007b44 <_strtod_l+0xbc>
 8007d9e:	499e      	ldr	r1, [pc, #632]	; (8008018 <_strtod_l+0x590>)
 8007da0:	a81d      	add	r0, sp, #116	; 0x74
 8007da2:	f001 fe41 	bl	8009a28 <__match>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	f43f aecc 	beq.w	8007b44 <_strtod_l+0xbc>
 8007dac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b28      	cmp	r3, #40	; 0x28
 8007db2:	d12d      	bne.n	8007e10 <_strtod_l+0x388>
 8007db4:	4999      	ldr	r1, [pc, #612]	; (800801c <_strtod_l+0x594>)
 8007db6:	aa20      	add	r2, sp, #128	; 0x80
 8007db8:	a81d      	add	r0, sp, #116	; 0x74
 8007dba:	f001 fe49 	bl	8009a50 <__hexnan>
 8007dbe:	2805      	cmp	r0, #5
 8007dc0:	d126      	bne.n	8007e10 <_strtod_l+0x388>
 8007dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dc4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007dc8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007dcc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007dd0:	e69c      	b.n	8007b0c <_strtod_l+0x84>
 8007dd2:	210a      	movs	r1, #10
 8007dd4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007dd8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007ddc:	e7b9      	b.n	8007d52 <_strtod_l+0x2ca>
 8007dde:	2b6e      	cmp	r3, #110	; 0x6e
 8007de0:	e7db      	b.n	8007d9a <_strtod_l+0x312>
 8007de2:	498f      	ldr	r1, [pc, #572]	; (8008020 <_strtod_l+0x598>)
 8007de4:	a81d      	add	r0, sp, #116	; 0x74
 8007de6:	f001 fe1f 	bl	8009a28 <__match>
 8007dea:	2800      	cmp	r0, #0
 8007dec:	f43f aeaa 	beq.w	8007b44 <_strtod_l+0xbc>
 8007df0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007df2:	498c      	ldr	r1, [pc, #560]	; (8008024 <_strtod_l+0x59c>)
 8007df4:	3b01      	subs	r3, #1
 8007df6:	a81d      	add	r0, sp, #116	; 0x74
 8007df8:	931d      	str	r3, [sp, #116]	; 0x74
 8007dfa:	f001 fe15 	bl	8009a28 <__match>
 8007dfe:	b910      	cbnz	r0, 8007e06 <_strtod_l+0x37e>
 8007e00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e02:	3301      	adds	r3, #1
 8007e04:	931d      	str	r3, [sp, #116]	; 0x74
 8007e06:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008034 <_strtod_l+0x5ac>
 8007e0a:	f04f 0a00 	mov.w	sl, #0
 8007e0e:	e67d      	b.n	8007b0c <_strtod_l+0x84>
 8007e10:	4885      	ldr	r0, [pc, #532]	; (8008028 <_strtod_l+0x5a0>)
 8007e12:	f002 fdb5 	bl	800a980 <nan>
 8007e16:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007e1a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007e1e:	e675      	b.n	8007b0c <_strtod_l+0x84>
 8007e20:	9b07      	ldr	r3, [sp, #28]
 8007e22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e24:	1af3      	subs	r3, r6, r3
 8007e26:	2f00      	cmp	r7, #0
 8007e28:	bf08      	it	eq
 8007e2a:	462f      	moveq	r7, r5
 8007e2c:	2d10      	cmp	r5, #16
 8007e2e:	9308      	str	r3, [sp, #32]
 8007e30:	46a8      	mov	r8, r5
 8007e32:	bfa8      	it	ge
 8007e34:	f04f 0810 	movge.w	r8, #16
 8007e38:	f7f8 fb64 	bl	8000504 <__aeabi_ui2d>
 8007e3c:	2d09      	cmp	r5, #9
 8007e3e:	4682      	mov	sl, r0
 8007e40:	468b      	mov	fp, r1
 8007e42:	dd13      	ble.n	8007e6c <_strtod_l+0x3e4>
 8007e44:	4b79      	ldr	r3, [pc, #484]	; (800802c <_strtod_l+0x5a4>)
 8007e46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007e4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007e4e:	f7f8 fbd3 	bl	80005f8 <__aeabi_dmul>
 8007e52:	4682      	mov	sl, r0
 8007e54:	4648      	mov	r0, r9
 8007e56:	468b      	mov	fp, r1
 8007e58:	f7f8 fb54 	bl	8000504 <__aeabi_ui2d>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4650      	mov	r0, sl
 8007e62:	4659      	mov	r1, fp
 8007e64:	f7f8 fa12 	bl	800028c <__adddf3>
 8007e68:	4682      	mov	sl, r0
 8007e6a:	468b      	mov	fp, r1
 8007e6c:	2d0f      	cmp	r5, #15
 8007e6e:	dc38      	bgt.n	8007ee2 <_strtod_l+0x45a>
 8007e70:	9b08      	ldr	r3, [sp, #32]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f43f ae4a 	beq.w	8007b0c <_strtod_l+0x84>
 8007e78:	dd24      	ble.n	8007ec4 <_strtod_l+0x43c>
 8007e7a:	2b16      	cmp	r3, #22
 8007e7c:	dc0b      	bgt.n	8007e96 <_strtod_l+0x40e>
 8007e7e:	4d6b      	ldr	r5, [pc, #428]	; (800802c <_strtod_l+0x5a4>)
 8007e80:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007e84:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007e88:	4652      	mov	r2, sl
 8007e8a:	465b      	mov	r3, fp
 8007e8c:	f7f8 fbb4 	bl	80005f8 <__aeabi_dmul>
 8007e90:	4682      	mov	sl, r0
 8007e92:	468b      	mov	fp, r1
 8007e94:	e63a      	b.n	8007b0c <_strtod_l+0x84>
 8007e96:	9a08      	ldr	r2, [sp, #32]
 8007e98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	db20      	blt.n	8007ee2 <_strtod_l+0x45a>
 8007ea0:	4c62      	ldr	r4, [pc, #392]	; (800802c <_strtod_l+0x5a4>)
 8007ea2:	f1c5 050f 	rsb	r5, r5, #15
 8007ea6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007eaa:	4652      	mov	r2, sl
 8007eac:	465b      	mov	r3, fp
 8007eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eb2:	f7f8 fba1 	bl	80005f8 <__aeabi_dmul>
 8007eb6:	9b08      	ldr	r3, [sp, #32]
 8007eb8:	1b5d      	subs	r5, r3, r5
 8007eba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007ebe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007ec2:	e7e3      	b.n	8007e8c <_strtod_l+0x404>
 8007ec4:	9b08      	ldr	r3, [sp, #32]
 8007ec6:	3316      	adds	r3, #22
 8007ec8:	db0b      	blt.n	8007ee2 <_strtod_l+0x45a>
 8007eca:	9b07      	ldr	r3, [sp, #28]
 8007ecc:	4a57      	ldr	r2, [pc, #348]	; (800802c <_strtod_l+0x5a4>)
 8007ece:	1b9e      	subs	r6, r3, r6
 8007ed0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007ed4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ed8:	4650      	mov	r0, sl
 8007eda:	4659      	mov	r1, fp
 8007edc:	f7f8 fcb6 	bl	800084c <__aeabi_ddiv>
 8007ee0:	e7d6      	b.n	8007e90 <_strtod_l+0x408>
 8007ee2:	9b08      	ldr	r3, [sp, #32]
 8007ee4:	eba5 0808 	sub.w	r8, r5, r8
 8007ee8:	4498      	add	r8, r3
 8007eea:	f1b8 0f00 	cmp.w	r8, #0
 8007eee:	dd71      	ble.n	8007fd4 <_strtod_l+0x54c>
 8007ef0:	f018 030f 	ands.w	r3, r8, #15
 8007ef4:	d00a      	beq.n	8007f0c <_strtod_l+0x484>
 8007ef6:	494d      	ldr	r1, [pc, #308]	; (800802c <_strtod_l+0x5a4>)
 8007ef8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007efc:	4652      	mov	r2, sl
 8007efe:	465b      	mov	r3, fp
 8007f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f04:	f7f8 fb78 	bl	80005f8 <__aeabi_dmul>
 8007f08:	4682      	mov	sl, r0
 8007f0a:	468b      	mov	fp, r1
 8007f0c:	f038 080f 	bics.w	r8, r8, #15
 8007f10:	d04d      	beq.n	8007fae <_strtod_l+0x526>
 8007f12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007f16:	dd22      	ble.n	8007f5e <_strtod_l+0x4d6>
 8007f18:	2500      	movs	r5, #0
 8007f1a:	462e      	mov	r6, r5
 8007f1c:	9509      	str	r5, [sp, #36]	; 0x24
 8007f1e:	9507      	str	r5, [sp, #28]
 8007f20:	2322      	movs	r3, #34	; 0x22
 8007f22:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008034 <_strtod_l+0x5ac>
 8007f26:	6023      	str	r3, [r4, #0]
 8007f28:	f04f 0a00 	mov.w	sl, #0
 8007f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f43f adec 	beq.w	8007b0c <_strtod_l+0x84>
 8007f34:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007f36:	4620      	mov	r0, r4
 8007f38:	f001 fe92 	bl	8009c60 <_Bfree>
 8007f3c:	9907      	ldr	r1, [sp, #28]
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f001 fe8e 	bl	8009c60 <_Bfree>
 8007f44:	4631      	mov	r1, r6
 8007f46:	4620      	mov	r0, r4
 8007f48:	f001 fe8a 	bl	8009c60 <_Bfree>
 8007f4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f001 fe86 	bl	8009c60 <_Bfree>
 8007f54:	4629      	mov	r1, r5
 8007f56:	4620      	mov	r0, r4
 8007f58:	f001 fe82 	bl	8009c60 <_Bfree>
 8007f5c:	e5d6      	b.n	8007b0c <_strtod_l+0x84>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007f64:	4650      	mov	r0, sl
 8007f66:	4659      	mov	r1, fp
 8007f68:	4699      	mov	r9, r3
 8007f6a:	f1b8 0f01 	cmp.w	r8, #1
 8007f6e:	dc21      	bgt.n	8007fb4 <_strtod_l+0x52c>
 8007f70:	b10b      	cbz	r3, 8007f76 <_strtod_l+0x4ee>
 8007f72:	4682      	mov	sl, r0
 8007f74:	468b      	mov	fp, r1
 8007f76:	4b2e      	ldr	r3, [pc, #184]	; (8008030 <_strtod_l+0x5a8>)
 8007f78:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007f7c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007f80:	4652      	mov	r2, sl
 8007f82:	465b      	mov	r3, fp
 8007f84:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007f88:	f7f8 fb36 	bl	80005f8 <__aeabi_dmul>
 8007f8c:	4b29      	ldr	r3, [pc, #164]	; (8008034 <_strtod_l+0x5ac>)
 8007f8e:	460a      	mov	r2, r1
 8007f90:	400b      	ands	r3, r1
 8007f92:	4929      	ldr	r1, [pc, #164]	; (8008038 <_strtod_l+0x5b0>)
 8007f94:	428b      	cmp	r3, r1
 8007f96:	4682      	mov	sl, r0
 8007f98:	d8be      	bhi.n	8007f18 <_strtod_l+0x490>
 8007f9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f9e:	428b      	cmp	r3, r1
 8007fa0:	bf86      	itte	hi
 8007fa2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800803c <_strtod_l+0x5b4>
 8007fa6:	f04f 3aff 	movhi.w	sl, #4294967295
 8007faa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007fae:	2300      	movs	r3, #0
 8007fb0:	9304      	str	r3, [sp, #16]
 8007fb2:	e081      	b.n	80080b8 <_strtod_l+0x630>
 8007fb4:	f018 0f01 	tst.w	r8, #1
 8007fb8:	d007      	beq.n	8007fca <_strtod_l+0x542>
 8007fba:	4b1d      	ldr	r3, [pc, #116]	; (8008030 <_strtod_l+0x5a8>)
 8007fbc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc4:	f7f8 fb18 	bl	80005f8 <__aeabi_dmul>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	f109 0901 	add.w	r9, r9, #1
 8007fce:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007fd2:	e7ca      	b.n	8007f6a <_strtod_l+0x4e2>
 8007fd4:	d0eb      	beq.n	8007fae <_strtod_l+0x526>
 8007fd6:	f1c8 0800 	rsb	r8, r8, #0
 8007fda:	f018 020f 	ands.w	r2, r8, #15
 8007fde:	d00a      	beq.n	8007ff6 <_strtod_l+0x56e>
 8007fe0:	4b12      	ldr	r3, [pc, #72]	; (800802c <_strtod_l+0x5a4>)
 8007fe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fe6:	4650      	mov	r0, sl
 8007fe8:	4659      	mov	r1, fp
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	f7f8 fc2d 	bl	800084c <__aeabi_ddiv>
 8007ff2:	4682      	mov	sl, r0
 8007ff4:	468b      	mov	fp, r1
 8007ff6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007ffa:	d0d8      	beq.n	8007fae <_strtod_l+0x526>
 8007ffc:	f1b8 0f1f 	cmp.w	r8, #31
 8008000:	dd1e      	ble.n	8008040 <_strtod_l+0x5b8>
 8008002:	2500      	movs	r5, #0
 8008004:	462e      	mov	r6, r5
 8008006:	9509      	str	r5, [sp, #36]	; 0x24
 8008008:	9507      	str	r5, [sp, #28]
 800800a:	2322      	movs	r3, #34	; 0x22
 800800c:	f04f 0a00 	mov.w	sl, #0
 8008010:	f04f 0b00 	mov.w	fp, #0
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	e789      	b.n	8007f2c <_strtod_l+0x4a4>
 8008018:	0800b5b1 	.word	0x0800b5b1
 800801c:	0800b5f4 	.word	0x0800b5f4
 8008020:	0800b5a9 	.word	0x0800b5a9
 8008024:	0800b734 	.word	0x0800b734
 8008028:	0800b9f0 	.word	0x0800b9f0
 800802c:	0800b8d0 	.word	0x0800b8d0
 8008030:	0800b8a8 	.word	0x0800b8a8
 8008034:	7ff00000 	.word	0x7ff00000
 8008038:	7ca00000 	.word	0x7ca00000
 800803c:	7fefffff 	.word	0x7fefffff
 8008040:	f018 0310 	ands.w	r3, r8, #16
 8008044:	bf18      	it	ne
 8008046:	236a      	movne	r3, #106	; 0x6a
 8008048:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008400 <_strtod_l+0x978>
 800804c:	9304      	str	r3, [sp, #16]
 800804e:	4650      	mov	r0, sl
 8008050:	4659      	mov	r1, fp
 8008052:	2300      	movs	r3, #0
 8008054:	f018 0f01 	tst.w	r8, #1
 8008058:	d004      	beq.n	8008064 <_strtod_l+0x5dc>
 800805a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800805e:	f7f8 facb 	bl	80005f8 <__aeabi_dmul>
 8008062:	2301      	movs	r3, #1
 8008064:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008068:	f109 0908 	add.w	r9, r9, #8
 800806c:	d1f2      	bne.n	8008054 <_strtod_l+0x5cc>
 800806e:	b10b      	cbz	r3, 8008074 <_strtod_l+0x5ec>
 8008070:	4682      	mov	sl, r0
 8008072:	468b      	mov	fp, r1
 8008074:	9b04      	ldr	r3, [sp, #16]
 8008076:	b1bb      	cbz	r3, 80080a8 <_strtod_l+0x620>
 8008078:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800807c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008080:	2b00      	cmp	r3, #0
 8008082:	4659      	mov	r1, fp
 8008084:	dd10      	ble.n	80080a8 <_strtod_l+0x620>
 8008086:	2b1f      	cmp	r3, #31
 8008088:	f340 8128 	ble.w	80082dc <_strtod_l+0x854>
 800808c:	2b34      	cmp	r3, #52	; 0x34
 800808e:	bfde      	ittt	le
 8008090:	3b20      	suble	r3, #32
 8008092:	f04f 32ff 	movle.w	r2, #4294967295
 8008096:	fa02 f303 	lslle.w	r3, r2, r3
 800809a:	f04f 0a00 	mov.w	sl, #0
 800809e:	bfcc      	ite	gt
 80080a0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80080a4:	ea03 0b01 	andle.w	fp, r3, r1
 80080a8:	2200      	movs	r2, #0
 80080aa:	2300      	movs	r3, #0
 80080ac:	4650      	mov	r0, sl
 80080ae:	4659      	mov	r1, fp
 80080b0:	f7f8 fd0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d1a4      	bne.n	8008002 <_strtod_l+0x57a>
 80080b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80080be:	462b      	mov	r3, r5
 80080c0:	463a      	mov	r2, r7
 80080c2:	4620      	mov	r0, r4
 80080c4:	f001 fe38 	bl	8009d38 <__s2b>
 80080c8:	9009      	str	r0, [sp, #36]	; 0x24
 80080ca:	2800      	cmp	r0, #0
 80080cc:	f43f af24 	beq.w	8007f18 <_strtod_l+0x490>
 80080d0:	9b07      	ldr	r3, [sp, #28]
 80080d2:	1b9e      	subs	r6, r3, r6
 80080d4:	9b08      	ldr	r3, [sp, #32]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bfb4      	ite	lt
 80080da:	4633      	movlt	r3, r6
 80080dc:	2300      	movge	r3, #0
 80080de:	9310      	str	r3, [sp, #64]	; 0x40
 80080e0:	9b08      	ldr	r3, [sp, #32]
 80080e2:	2500      	movs	r5, #0
 80080e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80080e8:	9318      	str	r3, [sp, #96]	; 0x60
 80080ea:	462e      	mov	r6, r5
 80080ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ee:	4620      	mov	r0, r4
 80080f0:	6859      	ldr	r1, [r3, #4]
 80080f2:	f001 fd75 	bl	8009be0 <_Balloc>
 80080f6:	9007      	str	r0, [sp, #28]
 80080f8:	2800      	cmp	r0, #0
 80080fa:	f43f af11 	beq.w	8007f20 <_strtod_l+0x498>
 80080fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008100:	691a      	ldr	r2, [r3, #16]
 8008102:	3202      	adds	r2, #2
 8008104:	f103 010c 	add.w	r1, r3, #12
 8008108:	0092      	lsls	r2, r2, #2
 800810a:	300c      	adds	r0, #12
 800810c:	f001 fd5a 	bl	8009bc4 <memcpy>
 8008110:	ec4b ab10 	vmov	d0, sl, fp
 8008114:	aa20      	add	r2, sp, #128	; 0x80
 8008116:	a91f      	add	r1, sp, #124	; 0x7c
 8008118:	4620      	mov	r0, r4
 800811a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800811e:	f002 f947 	bl	800a3b0 <__d2b>
 8008122:	901e      	str	r0, [sp, #120]	; 0x78
 8008124:	2800      	cmp	r0, #0
 8008126:	f43f aefb 	beq.w	8007f20 <_strtod_l+0x498>
 800812a:	2101      	movs	r1, #1
 800812c:	4620      	mov	r0, r4
 800812e:	f001 fe9d 	bl	8009e6c <__i2b>
 8008132:	4606      	mov	r6, r0
 8008134:	2800      	cmp	r0, #0
 8008136:	f43f aef3 	beq.w	8007f20 <_strtod_l+0x498>
 800813a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800813c:	9904      	ldr	r1, [sp, #16]
 800813e:	2b00      	cmp	r3, #0
 8008140:	bfab      	itete	ge
 8008142:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008144:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008146:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008148:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800814c:	bfac      	ite	ge
 800814e:	eb03 0902 	addge.w	r9, r3, r2
 8008152:	1ad7      	sublt	r7, r2, r3
 8008154:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008156:	eba3 0801 	sub.w	r8, r3, r1
 800815a:	4490      	add	r8, r2
 800815c:	4ba3      	ldr	r3, [pc, #652]	; (80083ec <_strtod_l+0x964>)
 800815e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008162:	4598      	cmp	r8, r3
 8008164:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008168:	f280 80cc 	bge.w	8008304 <_strtod_l+0x87c>
 800816c:	eba3 0308 	sub.w	r3, r3, r8
 8008170:	2b1f      	cmp	r3, #31
 8008172:	eba2 0203 	sub.w	r2, r2, r3
 8008176:	f04f 0101 	mov.w	r1, #1
 800817a:	f300 80b6 	bgt.w	80082ea <_strtod_l+0x862>
 800817e:	fa01 f303 	lsl.w	r3, r1, r3
 8008182:	9311      	str	r3, [sp, #68]	; 0x44
 8008184:	2300      	movs	r3, #0
 8008186:	930c      	str	r3, [sp, #48]	; 0x30
 8008188:	eb09 0802 	add.w	r8, r9, r2
 800818c:	9b04      	ldr	r3, [sp, #16]
 800818e:	45c1      	cmp	r9, r8
 8008190:	4417      	add	r7, r2
 8008192:	441f      	add	r7, r3
 8008194:	464b      	mov	r3, r9
 8008196:	bfa8      	it	ge
 8008198:	4643      	movge	r3, r8
 800819a:	42bb      	cmp	r3, r7
 800819c:	bfa8      	it	ge
 800819e:	463b      	movge	r3, r7
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	bfc2      	ittt	gt
 80081a4:	eba8 0803 	subgt.w	r8, r8, r3
 80081a8:	1aff      	subgt	r7, r7, r3
 80081aa:	eba9 0903 	subgt.w	r9, r9, r3
 80081ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	dd17      	ble.n	80081e4 <_strtod_l+0x75c>
 80081b4:	4631      	mov	r1, r6
 80081b6:	461a      	mov	r2, r3
 80081b8:	4620      	mov	r0, r4
 80081ba:	f001 ff13 	bl	8009fe4 <__pow5mult>
 80081be:	4606      	mov	r6, r0
 80081c0:	2800      	cmp	r0, #0
 80081c2:	f43f aead 	beq.w	8007f20 <_strtod_l+0x498>
 80081c6:	4601      	mov	r1, r0
 80081c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80081ca:	4620      	mov	r0, r4
 80081cc:	f001 fe64 	bl	8009e98 <__multiply>
 80081d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80081d2:	2800      	cmp	r0, #0
 80081d4:	f43f aea4 	beq.w	8007f20 <_strtod_l+0x498>
 80081d8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80081da:	4620      	mov	r0, r4
 80081dc:	f001 fd40 	bl	8009c60 <_Bfree>
 80081e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081e2:	931e      	str	r3, [sp, #120]	; 0x78
 80081e4:	f1b8 0f00 	cmp.w	r8, #0
 80081e8:	f300 8091 	bgt.w	800830e <_strtod_l+0x886>
 80081ec:	9b08      	ldr	r3, [sp, #32]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	dd08      	ble.n	8008204 <_strtod_l+0x77c>
 80081f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80081f4:	9907      	ldr	r1, [sp, #28]
 80081f6:	4620      	mov	r0, r4
 80081f8:	f001 fef4 	bl	8009fe4 <__pow5mult>
 80081fc:	9007      	str	r0, [sp, #28]
 80081fe:	2800      	cmp	r0, #0
 8008200:	f43f ae8e 	beq.w	8007f20 <_strtod_l+0x498>
 8008204:	2f00      	cmp	r7, #0
 8008206:	dd08      	ble.n	800821a <_strtod_l+0x792>
 8008208:	9907      	ldr	r1, [sp, #28]
 800820a:	463a      	mov	r2, r7
 800820c:	4620      	mov	r0, r4
 800820e:	f001 ff43 	bl	800a098 <__lshift>
 8008212:	9007      	str	r0, [sp, #28]
 8008214:	2800      	cmp	r0, #0
 8008216:	f43f ae83 	beq.w	8007f20 <_strtod_l+0x498>
 800821a:	f1b9 0f00 	cmp.w	r9, #0
 800821e:	dd08      	ble.n	8008232 <_strtod_l+0x7aa>
 8008220:	4631      	mov	r1, r6
 8008222:	464a      	mov	r2, r9
 8008224:	4620      	mov	r0, r4
 8008226:	f001 ff37 	bl	800a098 <__lshift>
 800822a:	4606      	mov	r6, r0
 800822c:	2800      	cmp	r0, #0
 800822e:	f43f ae77 	beq.w	8007f20 <_strtod_l+0x498>
 8008232:	9a07      	ldr	r2, [sp, #28]
 8008234:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008236:	4620      	mov	r0, r4
 8008238:	f001 ffb6 	bl	800a1a8 <__mdiff>
 800823c:	4605      	mov	r5, r0
 800823e:	2800      	cmp	r0, #0
 8008240:	f43f ae6e 	beq.w	8007f20 <_strtod_l+0x498>
 8008244:	68c3      	ldr	r3, [r0, #12]
 8008246:	930f      	str	r3, [sp, #60]	; 0x3c
 8008248:	2300      	movs	r3, #0
 800824a:	60c3      	str	r3, [r0, #12]
 800824c:	4631      	mov	r1, r6
 800824e:	f001 ff8f 	bl	800a170 <__mcmp>
 8008252:	2800      	cmp	r0, #0
 8008254:	da65      	bge.n	8008322 <_strtod_l+0x89a>
 8008256:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008258:	ea53 030a 	orrs.w	r3, r3, sl
 800825c:	f040 8087 	bne.w	800836e <_strtod_l+0x8e6>
 8008260:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008264:	2b00      	cmp	r3, #0
 8008266:	f040 8082 	bne.w	800836e <_strtod_l+0x8e6>
 800826a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800826e:	0d1b      	lsrs	r3, r3, #20
 8008270:	051b      	lsls	r3, r3, #20
 8008272:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008276:	d97a      	bls.n	800836e <_strtod_l+0x8e6>
 8008278:	696b      	ldr	r3, [r5, #20]
 800827a:	b913      	cbnz	r3, 8008282 <_strtod_l+0x7fa>
 800827c:	692b      	ldr	r3, [r5, #16]
 800827e:	2b01      	cmp	r3, #1
 8008280:	dd75      	ble.n	800836e <_strtod_l+0x8e6>
 8008282:	4629      	mov	r1, r5
 8008284:	2201      	movs	r2, #1
 8008286:	4620      	mov	r0, r4
 8008288:	f001 ff06 	bl	800a098 <__lshift>
 800828c:	4631      	mov	r1, r6
 800828e:	4605      	mov	r5, r0
 8008290:	f001 ff6e 	bl	800a170 <__mcmp>
 8008294:	2800      	cmp	r0, #0
 8008296:	dd6a      	ble.n	800836e <_strtod_l+0x8e6>
 8008298:	9904      	ldr	r1, [sp, #16]
 800829a:	4a55      	ldr	r2, [pc, #340]	; (80083f0 <_strtod_l+0x968>)
 800829c:	465b      	mov	r3, fp
 800829e:	2900      	cmp	r1, #0
 80082a0:	f000 8085 	beq.w	80083ae <_strtod_l+0x926>
 80082a4:	ea02 010b 	and.w	r1, r2, fp
 80082a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80082ac:	dc7f      	bgt.n	80083ae <_strtod_l+0x926>
 80082ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80082b2:	f77f aeaa 	ble.w	800800a <_strtod_l+0x582>
 80082b6:	4a4f      	ldr	r2, [pc, #316]	; (80083f4 <_strtod_l+0x96c>)
 80082b8:	2300      	movs	r3, #0
 80082ba:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80082be:	4650      	mov	r0, sl
 80082c0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80082c4:	4659      	mov	r1, fp
 80082c6:	f7f8 f997 	bl	80005f8 <__aeabi_dmul>
 80082ca:	460b      	mov	r3, r1
 80082cc:	4303      	orrs	r3, r0
 80082ce:	bf08      	it	eq
 80082d0:	2322      	moveq	r3, #34	; 0x22
 80082d2:	4682      	mov	sl, r0
 80082d4:	468b      	mov	fp, r1
 80082d6:	bf08      	it	eq
 80082d8:	6023      	streq	r3, [r4, #0]
 80082da:	e62b      	b.n	8007f34 <_strtod_l+0x4ac>
 80082dc:	f04f 32ff 	mov.w	r2, #4294967295
 80082e0:	fa02 f303 	lsl.w	r3, r2, r3
 80082e4:	ea03 0a0a 	and.w	sl, r3, sl
 80082e8:	e6de      	b.n	80080a8 <_strtod_l+0x620>
 80082ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80082ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80082f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80082f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80082fa:	fa01 f308 	lsl.w	r3, r1, r8
 80082fe:	930c      	str	r3, [sp, #48]	; 0x30
 8008300:	9111      	str	r1, [sp, #68]	; 0x44
 8008302:	e741      	b.n	8008188 <_strtod_l+0x700>
 8008304:	2300      	movs	r3, #0
 8008306:	930c      	str	r3, [sp, #48]	; 0x30
 8008308:	2301      	movs	r3, #1
 800830a:	9311      	str	r3, [sp, #68]	; 0x44
 800830c:	e73c      	b.n	8008188 <_strtod_l+0x700>
 800830e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008310:	4642      	mov	r2, r8
 8008312:	4620      	mov	r0, r4
 8008314:	f001 fec0 	bl	800a098 <__lshift>
 8008318:	901e      	str	r0, [sp, #120]	; 0x78
 800831a:	2800      	cmp	r0, #0
 800831c:	f47f af66 	bne.w	80081ec <_strtod_l+0x764>
 8008320:	e5fe      	b.n	8007f20 <_strtod_l+0x498>
 8008322:	465f      	mov	r7, fp
 8008324:	d16e      	bne.n	8008404 <_strtod_l+0x97c>
 8008326:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008328:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800832c:	b342      	cbz	r2, 8008380 <_strtod_l+0x8f8>
 800832e:	4a32      	ldr	r2, [pc, #200]	; (80083f8 <_strtod_l+0x970>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d128      	bne.n	8008386 <_strtod_l+0x8fe>
 8008334:	9b04      	ldr	r3, [sp, #16]
 8008336:	4650      	mov	r0, sl
 8008338:	b1eb      	cbz	r3, 8008376 <_strtod_l+0x8ee>
 800833a:	4a2d      	ldr	r2, [pc, #180]	; (80083f0 <_strtod_l+0x968>)
 800833c:	403a      	ands	r2, r7
 800833e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008342:	f04f 31ff 	mov.w	r1, #4294967295
 8008346:	d819      	bhi.n	800837c <_strtod_l+0x8f4>
 8008348:	0d12      	lsrs	r2, r2, #20
 800834a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800834e:	fa01 f303 	lsl.w	r3, r1, r3
 8008352:	4298      	cmp	r0, r3
 8008354:	d117      	bne.n	8008386 <_strtod_l+0x8fe>
 8008356:	4b29      	ldr	r3, [pc, #164]	; (80083fc <_strtod_l+0x974>)
 8008358:	429f      	cmp	r7, r3
 800835a:	d102      	bne.n	8008362 <_strtod_l+0x8da>
 800835c:	3001      	adds	r0, #1
 800835e:	f43f addf 	beq.w	8007f20 <_strtod_l+0x498>
 8008362:	4b23      	ldr	r3, [pc, #140]	; (80083f0 <_strtod_l+0x968>)
 8008364:	403b      	ands	r3, r7
 8008366:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800836a:	f04f 0a00 	mov.w	sl, #0
 800836e:	9b04      	ldr	r3, [sp, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1a0      	bne.n	80082b6 <_strtod_l+0x82e>
 8008374:	e5de      	b.n	8007f34 <_strtod_l+0x4ac>
 8008376:	f04f 33ff 	mov.w	r3, #4294967295
 800837a:	e7ea      	b.n	8008352 <_strtod_l+0x8ca>
 800837c:	460b      	mov	r3, r1
 800837e:	e7e8      	b.n	8008352 <_strtod_l+0x8ca>
 8008380:	ea53 030a 	orrs.w	r3, r3, sl
 8008384:	d088      	beq.n	8008298 <_strtod_l+0x810>
 8008386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008388:	b1db      	cbz	r3, 80083c2 <_strtod_l+0x93a>
 800838a:	423b      	tst	r3, r7
 800838c:	d0ef      	beq.n	800836e <_strtod_l+0x8e6>
 800838e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008390:	9a04      	ldr	r2, [sp, #16]
 8008392:	4650      	mov	r0, sl
 8008394:	4659      	mov	r1, fp
 8008396:	b1c3      	cbz	r3, 80083ca <_strtod_l+0x942>
 8008398:	f7ff fb5a 	bl	8007a50 <sulp>
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80083a4:	f7f7 ff72 	bl	800028c <__adddf3>
 80083a8:	4682      	mov	sl, r0
 80083aa:	468b      	mov	fp, r1
 80083ac:	e7df      	b.n	800836e <_strtod_l+0x8e6>
 80083ae:	4013      	ands	r3, r2
 80083b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80083b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80083b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80083bc:	f04f 3aff 	mov.w	sl, #4294967295
 80083c0:	e7d5      	b.n	800836e <_strtod_l+0x8e6>
 80083c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083c4:	ea13 0f0a 	tst.w	r3, sl
 80083c8:	e7e0      	b.n	800838c <_strtod_l+0x904>
 80083ca:	f7ff fb41 	bl	8007a50 <sulp>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80083d6:	f7f7 ff57 	bl	8000288 <__aeabi_dsub>
 80083da:	2200      	movs	r2, #0
 80083dc:	2300      	movs	r3, #0
 80083de:	4682      	mov	sl, r0
 80083e0:	468b      	mov	fp, r1
 80083e2:	f7f8 fb71 	bl	8000ac8 <__aeabi_dcmpeq>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d0c1      	beq.n	800836e <_strtod_l+0x8e6>
 80083ea:	e60e      	b.n	800800a <_strtod_l+0x582>
 80083ec:	fffffc02 	.word	0xfffffc02
 80083f0:	7ff00000 	.word	0x7ff00000
 80083f4:	39500000 	.word	0x39500000
 80083f8:	000fffff 	.word	0x000fffff
 80083fc:	7fefffff 	.word	0x7fefffff
 8008400:	0800b608 	.word	0x0800b608
 8008404:	4631      	mov	r1, r6
 8008406:	4628      	mov	r0, r5
 8008408:	f002 f82e 	bl	800a468 <__ratio>
 800840c:	ec59 8b10 	vmov	r8, r9, d0
 8008410:	ee10 0a10 	vmov	r0, s0
 8008414:	2200      	movs	r2, #0
 8008416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800841a:	4649      	mov	r1, r9
 800841c:	f7f8 fb68 	bl	8000af0 <__aeabi_dcmple>
 8008420:	2800      	cmp	r0, #0
 8008422:	d07c      	beq.n	800851e <_strtod_l+0xa96>
 8008424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008426:	2b00      	cmp	r3, #0
 8008428:	d04c      	beq.n	80084c4 <_strtod_l+0xa3c>
 800842a:	4b95      	ldr	r3, [pc, #596]	; (8008680 <_strtod_l+0xbf8>)
 800842c:	2200      	movs	r2, #0
 800842e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008432:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008680 <_strtod_l+0xbf8>
 8008436:	f04f 0800 	mov.w	r8, #0
 800843a:	4b92      	ldr	r3, [pc, #584]	; (8008684 <_strtod_l+0xbfc>)
 800843c:	403b      	ands	r3, r7
 800843e:	9311      	str	r3, [sp, #68]	; 0x44
 8008440:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008442:	4b91      	ldr	r3, [pc, #580]	; (8008688 <_strtod_l+0xc00>)
 8008444:	429a      	cmp	r2, r3
 8008446:	f040 80b2 	bne.w	80085ae <_strtod_l+0xb26>
 800844a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800844e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008452:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008456:	ec4b ab10 	vmov	d0, sl, fp
 800845a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800845e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008462:	f001 ff29 	bl	800a2b8 <__ulp>
 8008466:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800846a:	ec53 2b10 	vmov	r2, r3, d0
 800846e:	f7f8 f8c3 	bl	80005f8 <__aeabi_dmul>
 8008472:	4652      	mov	r2, sl
 8008474:	465b      	mov	r3, fp
 8008476:	f7f7 ff09 	bl	800028c <__adddf3>
 800847a:	460b      	mov	r3, r1
 800847c:	4981      	ldr	r1, [pc, #516]	; (8008684 <_strtod_l+0xbfc>)
 800847e:	4a83      	ldr	r2, [pc, #524]	; (800868c <_strtod_l+0xc04>)
 8008480:	4019      	ands	r1, r3
 8008482:	4291      	cmp	r1, r2
 8008484:	4682      	mov	sl, r0
 8008486:	d95e      	bls.n	8008546 <_strtod_l+0xabe>
 8008488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800848a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800848e:	4293      	cmp	r3, r2
 8008490:	d103      	bne.n	800849a <_strtod_l+0xa12>
 8008492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008494:	3301      	adds	r3, #1
 8008496:	f43f ad43 	beq.w	8007f20 <_strtod_l+0x498>
 800849a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008698 <_strtod_l+0xc10>
 800849e:	f04f 3aff 	mov.w	sl, #4294967295
 80084a2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80084a4:	4620      	mov	r0, r4
 80084a6:	f001 fbdb 	bl	8009c60 <_Bfree>
 80084aa:	9907      	ldr	r1, [sp, #28]
 80084ac:	4620      	mov	r0, r4
 80084ae:	f001 fbd7 	bl	8009c60 <_Bfree>
 80084b2:	4631      	mov	r1, r6
 80084b4:	4620      	mov	r0, r4
 80084b6:	f001 fbd3 	bl	8009c60 <_Bfree>
 80084ba:	4629      	mov	r1, r5
 80084bc:	4620      	mov	r0, r4
 80084be:	f001 fbcf 	bl	8009c60 <_Bfree>
 80084c2:	e613      	b.n	80080ec <_strtod_l+0x664>
 80084c4:	f1ba 0f00 	cmp.w	sl, #0
 80084c8:	d11b      	bne.n	8008502 <_strtod_l+0xa7a>
 80084ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084ce:	b9f3      	cbnz	r3, 800850e <_strtod_l+0xa86>
 80084d0:	4b6b      	ldr	r3, [pc, #428]	; (8008680 <_strtod_l+0xbf8>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	4640      	mov	r0, r8
 80084d6:	4649      	mov	r1, r9
 80084d8:	f7f8 fb00 	bl	8000adc <__aeabi_dcmplt>
 80084dc:	b9d0      	cbnz	r0, 8008514 <_strtod_l+0xa8c>
 80084de:	4640      	mov	r0, r8
 80084e0:	4649      	mov	r1, r9
 80084e2:	4b6b      	ldr	r3, [pc, #428]	; (8008690 <_strtod_l+0xc08>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	f7f8 f887 	bl	80005f8 <__aeabi_dmul>
 80084ea:	4680      	mov	r8, r0
 80084ec:	4689      	mov	r9, r1
 80084ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80084f2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80084f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80084f8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80084fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008500:	e79b      	b.n	800843a <_strtod_l+0x9b2>
 8008502:	f1ba 0f01 	cmp.w	sl, #1
 8008506:	d102      	bne.n	800850e <_strtod_l+0xa86>
 8008508:	2f00      	cmp	r7, #0
 800850a:	f43f ad7e 	beq.w	800800a <_strtod_l+0x582>
 800850e:	4b61      	ldr	r3, [pc, #388]	; (8008694 <_strtod_l+0xc0c>)
 8008510:	2200      	movs	r2, #0
 8008512:	e78c      	b.n	800842e <_strtod_l+0x9a6>
 8008514:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008690 <_strtod_l+0xc08>
 8008518:	f04f 0800 	mov.w	r8, #0
 800851c:	e7e7      	b.n	80084ee <_strtod_l+0xa66>
 800851e:	4b5c      	ldr	r3, [pc, #368]	; (8008690 <_strtod_l+0xc08>)
 8008520:	4640      	mov	r0, r8
 8008522:	4649      	mov	r1, r9
 8008524:	2200      	movs	r2, #0
 8008526:	f7f8 f867 	bl	80005f8 <__aeabi_dmul>
 800852a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800852c:	4680      	mov	r8, r0
 800852e:	4689      	mov	r9, r1
 8008530:	b933      	cbnz	r3, 8008540 <_strtod_l+0xab8>
 8008532:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008536:	9012      	str	r0, [sp, #72]	; 0x48
 8008538:	9313      	str	r3, [sp, #76]	; 0x4c
 800853a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800853e:	e7dd      	b.n	80084fc <_strtod_l+0xa74>
 8008540:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008544:	e7f9      	b.n	800853a <_strtod_l+0xab2>
 8008546:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800854a:	9b04      	ldr	r3, [sp, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1a8      	bne.n	80084a2 <_strtod_l+0xa1a>
 8008550:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008554:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008556:	0d1b      	lsrs	r3, r3, #20
 8008558:	051b      	lsls	r3, r3, #20
 800855a:	429a      	cmp	r2, r3
 800855c:	d1a1      	bne.n	80084a2 <_strtod_l+0xa1a>
 800855e:	4640      	mov	r0, r8
 8008560:	4649      	mov	r1, r9
 8008562:	f7f8 fba9 	bl	8000cb8 <__aeabi_d2lz>
 8008566:	f7f8 f819 	bl	800059c <__aeabi_l2d>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4640      	mov	r0, r8
 8008570:	4649      	mov	r1, r9
 8008572:	f7f7 fe89 	bl	8000288 <__aeabi_dsub>
 8008576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008578:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800857c:	ea43 030a 	orr.w	r3, r3, sl
 8008580:	4313      	orrs	r3, r2
 8008582:	4680      	mov	r8, r0
 8008584:	4689      	mov	r9, r1
 8008586:	d053      	beq.n	8008630 <_strtod_l+0xba8>
 8008588:	a335      	add	r3, pc, #212	; (adr r3, 8008660 <_strtod_l+0xbd8>)
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	f7f8 faa5 	bl	8000adc <__aeabi_dcmplt>
 8008592:	2800      	cmp	r0, #0
 8008594:	f47f acce 	bne.w	8007f34 <_strtod_l+0x4ac>
 8008598:	a333      	add	r3, pc, #204	; (adr r3, 8008668 <_strtod_l+0xbe0>)
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	4640      	mov	r0, r8
 80085a0:	4649      	mov	r1, r9
 80085a2:	f7f8 fab9 	bl	8000b18 <__aeabi_dcmpgt>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	f43f af7b 	beq.w	80084a2 <_strtod_l+0xa1a>
 80085ac:	e4c2      	b.n	8007f34 <_strtod_l+0x4ac>
 80085ae:	9b04      	ldr	r3, [sp, #16]
 80085b0:	b333      	cbz	r3, 8008600 <_strtod_l+0xb78>
 80085b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80085b8:	d822      	bhi.n	8008600 <_strtod_l+0xb78>
 80085ba:	a32d      	add	r3, pc, #180	; (adr r3, 8008670 <_strtod_l+0xbe8>)
 80085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c0:	4640      	mov	r0, r8
 80085c2:	4649      	mov	r1, r9
 80085c4:	f7f8 fa94 	bl	8000af0 <__aeabi_dcmple>
 80085c8:	b1a0      	cbz	r0, 80085f4 <_strtod_l+0xb6c>
 80085ca:	4649      	mov	r1, r9
 80085cc:	4640      	mov	r0, r8
 80085ce:	f7f8 faeb 	bl	8000ba8 <__aeabi_d2uiz>
 80085d2:	2801      	cmp	r0, #1
 80085d4:	bf38      	it	cc
 80085d6:	2001      	movcc	r0, #1
 80085d8:	f7f7 ff94 	bl	8000504 <__aeabi_ui2d>
 80085dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085de:	4680      	mov	r8, r0
 80085e0:	4689      	mov	r9, r1
 80085e2:	bb13      	cbnz	r3, 800862a <_strtod_l+0xba2>
 80085e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085e8:	9014      	str	r0, [sp, #80]	; 0x50
 80085ea:	9315      	str	r3, [sp, #84]	; 0x54
 80085ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80085f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80085f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80085f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80085fc:	1a9b      	subs	r3, r3, r2
 80085fe:	930d      	str	r3, [sp, #52]	; 0x34
 8008600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008604:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008608:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800860c:	f001 fe54 	bl	800a2b8 <__ulp>
 8008610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008614:	ec53 2b10 	vmov	r2, r3, d0
 8008618:	f7f7 ffee 	bl	80005f8 <__aeabi_dmul>
 800861c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008620:	f7f7 fe34 	bl	800028c <__adddf3>
 8008624:	4682      	mov	sl, r0
 8008626:	468b      	mov	fp, r1
 8008628:	e78f      	b.n	800854a <_strtod_l+0xac2>
 800862a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800862e:	e7dd      	b.n	80085ec <_strtod_l+0xb64>
 8008630:	a311      	add	r3, pc, #68	; (adr r3, 8008678 <_strtod_l+0xbf0>)
 8008632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008636:	f7f8 fa51 	bl	8000adc <__aeabi_dcmplt>
 800863a:	e7b4      	b.n	80085a6 <_strtod_l+0xb1e>
 800863c:	2300      	movs	r3, #0
 800863e:	930e      	str	r3, [sp, #56]	; 0x38
 8008640:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008642:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008644:	6013      	str	r3, [r2, #0]
 8008646:	f7ff ba65 	b.w	8007b14 <_strtod_l+0x8c>
 800864a:	2b65      	cmp	r3, #101	; 0x65
 800864c:	f43f ab5d 	beq.w	8007d0a <_strtod_l+0x282>
 8008650:	2b45      	cmp	r3, #69	; 0x45
 8008652:	f43f ab5a 	beq.w	8007d0a <_strtod_l+0x282>
 8008656:	2201      	movs	r2, #1
 8008658:	f7ff bb92 	b.w	8007d80 <_strtod_l+0x2f8>
 800865c:	f3af 8000 	nop.w
 8008660:	94a03595 	.word	0x94a03595
 8008664:	3fdfffff 	.word	0x3fdfffff
 8008668:	35afe535 	.word	0x35afe535
 800866c:	3fe00000 	.word	0x3fe00000
 8008670:	ffc00000 	.word	0xffc00000
 8008674:	41dfffff 	.word	0x41dfffff
 8008678:	94a03595 	.word	0x94a03595
 800867c:	3fcfffff 	.word	0x3fcfffff
 8008680:	3ff00000 	.word	0x3ff00000
 8008684:	7ff00000 	.word	0x7ff00000
 8008688:	7fe00000 	.word	0x7fe00000
 800868c:	7c9fffff 	.word	0x7c9fffff
 8008690:	3fe00000 	.word	0x3fe00000
 8008694:	bff00000 	.word	0xbff00000
 8008698:	7fefffff 	.word	0x7fefffff

0800869c <_strtod_r>:
 800869c:	4b01      	ldr	r3, [pc, #4]	; (80086a4 <_strtod_r+0x8>)
 800869e:	f7ff b9f3 	b.w	8007a88 <_strtod_l>
 80086a2:	bf00      	nop
 80086a4:	200004a8 	.word	0x200004a8

080086a8 <_strtol_l.isra.0>:
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086ae:	d001      	beq.n	80086b4 <_strtol_l.isra.0+0xc>
 80086b0:	2b24      	cmp	r3, #36	; 0x24
 80086b2:	d906      	bls.n	80086c2 <_strtol_l.isra.0+0x1a>
 80086b4:	f7fe fafa 	bl	8006cac <__errno>
 80086b8:	2316      	movs	r3, #22
 80086ba:	6003      	str	r3, [r0, #0]
 80086bc:	2000      	movs	r0, #0
 80086be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c2:	4f3a      	ldr	r7, [pc, #232]	; (80087ac <_strtol_l.isra.0+0x104>)
 80086c4:	468e      	mov	lr, r1
 80086c6:	4676      	mov	r6, lr
 80086c8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80086cc:	5de5      	ldrb	r5, [r4, r7]
 80086ce:	f015 0508 	ands.w	r5, r5, #8
 80086d2:	d1f8      	bne.n	80086c6 <_strtol_l.isra.0+0x1e>
 80086d4:	2c2d      	cmp	r4, #45	; 0x2d
 80086d6:	d134      	bne.n	8008742 <_strtol_l.isra.0+0x9a>
 80086d8:	f89e 4000 	ldrb.w	r4, [lr]
 80086dc:	f04f 0801 	mov.w	r8, #1
 80086e0:	f106 0e02 	add.w	lr, r6, #2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d05c      	beq.n	80087a2 <_strtol_l.isra.0+0xfa>
 80086e8:	2b10      	cmp	r3, #16
 80086ea:	d10c      	bne.n	8008706 <_strtol_l.isra.0+0x5e>
 80086ec:	2c30      	cmp	r4, #48	; 0x30
 80086ee:	d10a      	bne.n	8008706 <_strtol_l.isra.0+0x5e>
 80086f0:	f89e 4000 	ldrb.w	r4, [lr]
 80086f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80086f8:	2c58      	cmp	r4, #88	; 0x58
 80086fa:	d14d      	bne.n	8008798 <_strtol_l.isra.0+0xf0>
 80086fc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008700:	2310      	movs	r3, #16
 8008702:	f10e 0e02 	add.w	lr, lr, #2
 8008706:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800870a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800870e:	2600      	movs	r6, #0
 8008710:	fbbc f9f3 	udiv	r9, ip, r3
 8008714:	4635      	mov	r5, r6
 8008716:	fb03 ca19 	mls	sl, r3, r9, ip
 800871a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800871e:	2f09      	cmp	r7, #9
 8008720:	d818      	bhi.n	8008754 <_strtol_l.isra.0+0xac>
 8008722:	463c      	mov	r4, r7
 8008724:	42a3      	cmp	r3, r4
 8008726:	dd24      	ble.n	8008772 <_strtol_l.isra.0+0xca>
 8008728:	2e00      	cmp	r6, #0
 800872a:	db1f      	blt.n	800876c <_strtol_l.isra.0+0xc4>
 800872c:	45a9      	cmp	r9, r5
 800872e:	d31d      	bcc.n	800876c <_strtol_l.isra.0+0xc4>
 8008730:	d101      	bne.n	8008736 <_strtol_l.isra.0+0x8e>
 8008732:	45a2      	cmp	sl, r4
 8008734:	db1a      	blt.n	800876c <_strtol_l.isra.0+0xc4>
 8008736:	fb05 4503 	mla	r5, r5, r3, r4
 800873a:	2601      	movs	r6, #1
 800873c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008740:	e7eb      	b.n	800871a <_strtol_l.isra.0+0x72>
 8008742:	2c2b      	cmp	r4, #43	; 0x2b
 8008744:	bf08      	it	eq
 8008746:	f89e 4000 	ldrbeq.w	r4, [lr]
 800874a:	46a8      	mov	r8, r5
 800874c:	bf08      	it	eq
 800874e:	f106 0e02 	addeq.w	lr, r6, #2
 8008752:	e7c7      	b.n	80086e4 <_strtol_l.isra.0+0x3c>
 8008754:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008758:	2f19      	cmp	r7, #25
 800875a:	d801      	bhi.n	8008760 <_strtol_l.isra.0+0xb8>
 800875c:	3c37      	subs	r4, #55	; 0x37
 800875e:	e7e1      	b.n	8008724 <_strtol_l.isra.0+0x7c>
 8008760:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008764:	2f19      	cmp	r7, #25
 8008766:	d804      	bhi.n	8008772 <_strtol_l.isra.0+0xca>
 8008768:	3c57      	subs	r4, #87	; 0x57
 800876a:	e7db      	b.n	8008724 <_strtol_l.isra.0+0x7c>
 800876c:	f04f 36ff 	mov.w	r6, #4294967295
 8008770:	e7e4      	b.n	800873c <_strtol_l.isra.0+0x94>
 8008772:	2e00      	cmp	r6, #0
 8008774:	da05      	bge.n	8008782 <_strtol_l.isra.0+0xda>
 8008776:	2322      	movs	r3, #34	; 0x22
 8008778:	6003      	str	r3, [r0, #0]
 800877a:	4665      	mov	r5, ip
 800877c:	b942      	cbnz	r2, 8008790 <_strtol_l.isra.0+0xe8>
 800877e:	4628      	mov	r0, r5
 8008780:	e79d      	b.n	80086be <_strtol_l.isra.0+0x16>
 8008782:	f1b8 0f00 	cmp.w	r8, #0
 8008786:	d000      	beq.n	800878a <_strtol_l.isra.0+0xe2>
 8008788:	426d      	negs	r5, r5
 800878a:	2a00      	cmp	r2, #0
 800878c:	d0f7      	beq.n	800877e <_strtol_l.isra.0+0xd6>
 800878e:	b10e      	cbz	r6, 8008794 <_strtol_l.isra.0+0xec>
 8008790:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008794:	6011      	str	r1, [r2, #0]
 8008796:	e7f2      	b.n	800877e <_strtol_l.isra.0+0xd6>
 8008798:	2430      	movs	r4, #48	; 0x30
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1b3      	bne.n	8008706 <_strtol_l.isra.0+0x5e>
 800879e:	2308      	movs	r3, #8
 80087a0:	e7b1      	b.n	8008706 <_strtol_l.isra.0+0x5e>
 80087a2:	2c30      	cmp	r4, #48	; 0x30
 80087a4:	d0a4      	beq.n	80086f0 <_strtol_l.isra.0+0x48>
 80087a6:	230a      	movs	r3, #10
 80087a8:	e7ad      	b.n	8008706 <_strtol_l.isra.0+0x5e>
 80087aa:	bf00      	nop
 80087ac:	0800b631 	.word	0x0800b631

080087b0 <_strtol_r>:
 80087b0:	f7ff bf7a 	b.w	80086a8 <_strtol_l.isra.0>

080087b4 <quorem>:
 80087b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b8:	6903      	ldr	r3, [r0, #16]
 80087ba:	690c      	ldr	r4, [r1, #16]
 80087bc:	42a3      	cmp	r3, r4
 80087be:	4607      	mov	r7, r0
 80087c0:	f2c0 8081 	blt.w	80088c6 <quorem+0x112>
 80087c4:	3c01      	subs	r4, #1
 80087c6:	f101 0814 	add.w	r8, r1, #20
 80087ca:	f100 0514 	add.w	r5, r0, #20
 80087ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087d2:	9301      	str	r3, [sp, #4]
 80087d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087dc:	3301      	adds	r3, #1
 80087de:	429a      	cmp	r2, r3
 80087e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80087ec:	d331      	bcc.n	8008852 <quorem+0x9e>
 80087ee:	f04f 0e00 	mov.w	lr, #0
 80087f2:	4640      	mov	r0, r8
 80087f4:	46ac      	mov	ip, r5
 80087f6:	46f2      	mov	sl, lr
 80087f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80087fc:	b293      	uxth	r3, r2
 80087fe:	fb06 e303 	mla	r3, r6, r3, lr
 8008802:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008806:	b29b      	uxth	r3, r3
 8008808:	ebaa 0303 	sub.w	r3, sl, r3
 800880c:	0c12      	lsrs	r2, r2, #16
 800880e:	f8dc a000 	ldr.w	sl, [ip]
 8008812:	fb06 e202 	mla	r2, r6, r2, lr
 8008816:	fa13 f38a 	uxtah	r3, r3, sl
 800881a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800881e:	fa1f fa82 	uxth.w	sl, r2
 8008822:	f8dc 2000 	ldr.w	r2, [ip]
 8008826:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800882a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800882e:	b29b      	uxth	r3, r3
 8008830:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008834:	4581      	cmp	r9, r0
 8008836:	f84c 3b04 	str.w	r3, [ip], #4
 800883a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800883e:	d2db      	bcs.n	80087f8 <quorem+0x44>
 8008840:	f855 300b 	ldr.w	r3, [r5, fp]
 8008844:	b92b      	cbnz	r3, 8008852 <quorem+0x9e>
 8008846:	9b01      	ldr	r3, [sp, #4]
 8008848:	3b04      	subs	r3, #4
 800884a:	429d      	cmp	r5, r3
 800884c:	461a      	mov	r2, r3
 800884e:	d32e      	bcc.n	80088ae <quorem+0xfa>
 8008850:	613c      	str	r4, [r7, #16]
 8008852:	4638      	mov	r0, r7
 8008854:	f001 fc8c 	bl	800a170 <__mcmp>
 8008858:	2800      	cmp	r0, #0
 800885a:	db24      	blt.n	80088a6 <quorem+0xf2>
 800885c:	3601      	adds	r6, #1
 800885e:	4628      	mov	r0, r5
 8008860:	f04f 0c00 	mov.w	ip, #0
 8008864:	f858 2b04 	ldr.w	r2, [r8], #4
 8008868:	f8d0 e000 	ldr.w	lr, [r0]
 800886c:	b293      	uxth	r3, r2
 800886e:	ebac 0303 	sub.w	r3, ip, r3
 8008872:	0c12      	lsrs	r2, r2, #16
 8008874:	fa13 f38e 	uxtah	r3, r3, lr
 8008878:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800887c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008880:	b29b      	uxth	r3, r3
 8008882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008886:	45c1      	cmp	r9, r8
 8008888:	f840 3b04 	str.w	r3, [r0], #4
 800888c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008890:	d2e8      	bcs.n	8008864 <quorem+0xb0>
 8008892:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008896:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800889a:	b922      	cbnz	r2, 80088a6 <quorem+0xf2>
 800889c:	3b04      	subs	r3, #4
 800889e:	429d      	cmp	r5, r3
 80088a0:	461a      	mov	r2, r3
 80088a2:	d30a      	bcc.n	80088ba <quorem+0x106>
 80088a4:	613c      	str	r4, [r7, #16]
 80088a6:	4630      	mov	r0, r6
 80088a8:	b003      	add	sp, #12
 80088aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ae:	6812      	ldr	r2, [r2, #0]
 80088b0:	3b04      	subs	r3, #4
 80088b2:	2a00      	cmp	r2, #0
 80088b4:	d1cc      	bne.n	8008850 <quorem+0x9c>
 80088b6:	3c01      	subs	r4, #1
 80088b8:	e7c7      	b.n	800884a <quorem+0x96>
 80088ba:	6812      	ldr	r2, [r2, #0]
 80088bc:	3b04      	subs	r3, #4
 80088be:	2a00      	cmp	r2, #0
 80088c0:	d1f0      	bne.n	80088a4 <quorem+0xf0>
 80088c2:	3c01      	subs	r4, #1
 80088c4:	e7eb      	b.n	800889e <quorem+0xea>
 80088c6:	2000      	movs	r0, #0
 80088c8:	e7ee      	b.n	80088a8 <quorem+0xf4>
 80088ca:	0000      	movs	r0, r0
 80088cc:	0000      	movs	r0, r0
	...

080088d0 <_dtoa_r>:
 80088d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d4:	ed2d 8b02 	vpush	{d8}
 80088d8:	ec57 6b10 	vmov	r6, r7, d0
 80088dc:	b095      	sub	sp, #84	; 0x54
 80088de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80088e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80088e4:	9105      	str	r1, [sp, #20]
 80088e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80088ea:	4604      	mov	r4, r0
 80088ec:	9209      	str	r2, [sp, #36]	; 0x24
 80088ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80088f0:	b975      	cbnz	r5, 8008910 <_dtoa_r+0x40>
 80088f2:	2010      	movs	r0, #16
 80088f4:	f001 f94c 	bl	8009b90 <malloc>
 80088f8:	4602      	mov	r2, r0
 80088fa:	6260      	str	r0, [r4, #36]	; 0x24
 80088fc:	b920      	cbnz	r0, 8008908 <_dtoa_r+0x38>
 80088fe:	4bb2      	ldr	r3, [pc, #712]	; (8008bc8 <_dtoa_r+0x2f8>)
 8008900:	21ea      	movs	r1, #234	; 0xea
 8008902:	48b2      	ldr	r0, [pc, #712]	; (8008bcc <_dtoa_r+0x2fc>)
 8008904:	f002 f874 	bl	800a9f0 <__assert_func>
 8008908:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800890c:	6005      	str	r5, [r0, #0]
 800890e:	60c5      	str	r5, [r0, #12]
 8008910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008912:	6819      	ldr	r1, [r3, #0]
 8008914:	b151      	cbz	r1, 800892c <_dtoa_r+0x5c>
 8008916:	685a      	ldr	r2, [r3, #4]
 8008918:	604a      	str	r2, [r1, #4]
 800891a:	2301      	movs	r3, #1
 800891c:	4093      	lsls	r3, r2
 800891e:	608b      	str	r3, [r1, #8]
 8008920:	4620      	mov	r0, r4
 8008922:	f001 f99d 	bl	8009c60 <_Bfree>
 8008926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	1e3b      	subs	r3, r7, #0
 800892e:	bfb9      	ittee	lt
 8008930:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008934:	9303      	strlt	r3, [sp, #12]
 8008936:	2300      	movge	r3, #0
 8008938:	f8c8 3000 	strge.w	r3, [r8]
 800893c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008940:	4ba3      	ldr	r3, [pc, #652]	; (8008bd0 <_dtoa_r+0x300>)
 8008942:	bfbc      	itt	lt
 8008944:	2201      	movlt	r2, #1
 8008946:	f8c8 2000 	strlt.w	r2, [r8]
 800894a:	ea33 0309 	bics.w	r3, r3, r9
 800894e:	d11b      	bne.n	8008988 <_dtoa_r+0xb8>
 8008950:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008952:	f242 730f 	movw	r3, #9999	; 0x270f
 8008956:	6013      	str	r3, [r2, #0]
 8008958:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800895c:	4333      	orrs	r3, r6
 800895e:	f000 857a 	beq.w	8009456 <_dtoa_r+0xb86>
 8008962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008964:	b963      	cbnz	r3, 8008980 <_dtoa_r+0xb0>
 8008966:	4b9b      	ldr	r3, [pc, #620]	; (8008bd4 <_dtoa_r+0x304>)
 8008968:	e024      	b.n	80089b4 <_dtoa_r+0xe4>
 800896a:	4b9b      	ldr	r3, [pc, #620]	; (8008bd8 <_dtoa_r+0x308>)
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	3308      	adds	r3, #8
 8008970:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008972:	6013      	str	r3, [r2, #0]
 8008974:	9800      	ldr	r0, [sp, #0]
 8008976:	b015      	add	sp, #84	; 0x54
 8008978:	ecbd 8b02 	vpop	{d8}
 800897c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008980:	4b94      	ldr	r3, [pc, #592]	; (8008bd4 <_dtoa_r+0x304>)
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	3303      	adds	r3, #3
 8008986:	e7f3      	b.n	8008970 <_dtoa_r+0xa0>
 8008988:	ed9d 7b02 	vldr	d7, [sp, #8]
 800898c:	2200      	movs	r2, #0
 800898e:	ec51 0b17 	vmov	r0, r1, d7
 8008992:	2300      	movs	r3, #0
 8008994:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008998:	f7f8 f896 	bl	8000ac8 <__aeabi_dcmpeq>
 800899c:	4680      	mov	r8, r0
 800899e:	b158      	cbz	r0, 80089b8 <_dtoa_r+0xe8>
 80089a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089a2:	2301      	movs	r3, #1
 80089a4:	6013      	str	r3, [r2, #0]
 80089a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 8551 	beq.w	8009450 <_dtoa_r+0xb80>
 80089ae:	488b      	ldr	r0, [pc, #556]	; (8008bdc <_dtoa_r+0x30c>)
 80089b0:	6018      	str	r0, [r3, #0]
 80089b2:	1e43      	subs	r3, r0, #1
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	e7dd      	b.n	8008974 <_dtoa_r+0xa4>
 80089b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80089bc:	aa12      	add	r2, sp, #72	; 0x48
 80089be:	a913      	add	r1, sp, #76	; 0x4c
 80089c0:	4620      	mov	r0, r4
 80089c2:	f001 fcf5 	bl	800a3b0 <__d2b>
 80089c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80089ca:	4683      	mov	fp, r0
 80089cc:	2d00      	cmp	r5, #0
 80089ce:	d07c      	beq.n	8008aca <_dtoa_r+0x1fa>
 80089d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80089d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80089de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80089e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80089e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80089ea:	4b7d      	ldr	r3, [pc, #500]	; (8008be0 <_dtoa_r+0x310>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	4630      	mov	r0, r6
 80089f0:	4639      	mov	r1, r7
 80089f2:	f7f7 fc49 	bl	8000288 <__aeabi_dsub>
 80089f6:	a36e      	add	r3, pc, #440	; (adr r3, 8008bb0 <_dtoa_r+0x2e0>)
 80089f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fc:	f7f7 fdfc 	bl	80005f8 <__aeabi_dmul>
 8008a00:	a36d      	add	r3, pc, #436	; (adr r3, 8008bb8 <_dtoa_r+0x2e8>)
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	f7f7 fc41 	bl	800028c <__adddf3>
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	460f      	mov	r7, r1
 8008a10:	f7f7 fd88 	bl	8000524 <__aeabi_i2d>
 8008a14:	a36a      	add	r3, pc, #424	; (adr r3, 8008bc0 <_dtoa_r+0x2f0>)
 8008a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1a:	f7f7 fded 	bl	80005f8 <__aeabi_dmul>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	460b      	mov	r3, r1
 8008a22:	4630      	mov	r0, r6
 8008a24:	4639      	mov	r1, r7
 8008a26:	f7f7 fc31 	bl	800028c <__adddf3>
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460f      	mov	r7, r1
 8008a2e:	f7f8 f893 	bl	8000b58 <__aeabi_d2iz>
 8008a32:	2200      	movs	r2, #0
 8008a34:	4682      	mov	sl, r0
 8008a36:	2300      	movs	r3, #0
 8008a38:	4630      	mov	r0, r6
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	f7f8 f84e 	bl	8000adc <__aeabi_dcmplt>
 8008a40:	b148      	cbz	r0, 8008a56 <_dtoa_r+0x186>
 8008a42:	4650      	mov	r0, sl
 8008a44:	f7f7 fd6e 	bl	8000524 <__aeabi_i2d>
 8008a48:	4632      	mov	r2, r6
 8008a4a:	463b      	mov	r3, r7
 8008a4c:	f7f8 f83c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a50:	b908      	cbnz	r0, 8008a56 <_dtoa_r+0x186>
 8008a52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a56:	f1ba 0f16 	cmp.w	sl, #22
 8008a5a:	d854      	bhi.n	8008b06 <_dtoa_r+0x236>
 8008a5c:	4b61      	ldr	r3, [pc, #388]	; (8008be4 <_dtoa_r+0x314>)
 8008a5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a6a:	f7f8 f837 	bl	8000adc <__aeabi_dcmplt>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d04b      	beq.n	8008b0a <_dtoa_r+0x23a>
 8008a72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a76:	2300      	movs	r3, #0
 8008a78:	930e      	str	r3, [sp, #56]	; 0x38
 8008a7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a7c:	1b5d      	subs	r5, r3, r5
 8008a7e:	1e6b      	subs	r3, r5, #1
 8008a80:	9304      	str	r3, [sp, #16]
 8008a82:	bf43      	ittte	mi
 8008a84:	2300      	movmi	r3, #0
 8008a86:	f1c5 0801 	rsbmi	r8, r5, #1
 8008a8a:	9304      	strmi	r3, [sp, #16]
 8008a8c:	f04f 0800 	movpl.w	r8, #0
 8008a90:	f1ba 0f00 	cmp.w	sl, #0
 8008a94:	db3b      	blt.n	8008b0e <_dtoa_r+0x23e>
 8008a96:	9b04      	ldr	r3, [sp, #16]
 8008a98:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008a9c:	4453      	add	r3, sl
 8008a9e:	9304      	str	r3, [sp, #16]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	9306      	str	r3, [sp, #24]
 8008aa4:	9b05      	ldr	r3, [sp, #20]
 8008aa6:	2b09      	cmp	r3, #9
 8008aa8:	d869      	bhi.n	8008b7e <_dtoa_r+0x2ae>
 8008aaa:	2b05      	cmp	r3, #5
 8008aac:	bfc4      	itt	gt
 8008aae:	3b04      	subgt	r3, #4
 8008ab0:	9305      	strgt	r3, [sp, #20]
 8008ab2:	9b05      	ldr	r3, [sp, #20]
 8008ab4:	f1a3 0302 	sub.w	r3, r3, #2
 8008ab8:	bfcc      	ite	gt
 8008aba:	2500      	movgt	r5, #0
 8008abc:	2501      	movle	r5, #1
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d869      	bhi.n	8008b96 <_dtoa_r+0x2c6>
 8008ac2:	e8df f003 	tbb	[pc, r3]
 8008ac6:	4e2c      	.short	0x4e2c
 8008ac8:	5a4c      	.short	0x5a4c
 8008aca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008ace:	441d      	add	r5, r3
 8008ad0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ad4:	2b20      	cmp	r3, #32
 8008ad6:	bfc1      	itttt	gt
 8008ad8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008adc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008ae0:	fa09 f303 	lslgt.w	r3, r9, r3
 8008ae4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008ae8:	bfda      	itte	le
 8008aea:	f1c3 0320 	rsble	r3, r3, #32
 8008aee:	fa06 f003 	lslle.w	r0, r6, r3
 8008af2:	4318      	orrgt	r0, r3
 8008af4:	f7f7 fd06 	bl	8000504 <__aeabi_ui2d>
 8008af8:	2301      	movs	r3, #1
 8008afa:	4606      	mov	r6, r0
 8008afc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008b00:	3d01      	subs	r5, #1
 8008b02:	9310      	str	r3, [sp, #64]	; 0x40
 8008b04:	e771      	b.n	80089ea <_dtoa_r+0x11a>
 8008b06:	2301      	movs	r3, #1
 8008b08:	e7b6      	b.n	8008a78 <_dtoa_r+0x1a8>
 8008b0a:	900e      	str	r0, [sp, #56]	; 0x38
 8008b0c:	e7b5      	b.n	8008a7a <_dtoa_r+0x1aa>
 8008b0e:	f1ca 0300 	rsb	r3, sl, #0
 8008b12:	9306      	str	r3, [sp, #24]
 8008b14:	2300      	movs	r3, #0
 8008b16:	eba8 080a 	sub.w	r8, r8, sl
 8008b1a:	930d      	str	r3, [sp, #52]	; 0x34
 8008b1c:	e7c2      	b.n	8008aa4 <_dtoa_r+0x1d4>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	9308      	str	r3, [sp, #32]
 8008b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	dc39      	bgt.n	8008b9c <_dtoa_r+0x2cc>
 8008b28:	f04f 0901 	mov.w	r9, #1
 8008b2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b30:	464b      	mov	r3, r9
 8008b32:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008b36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b38:	2200      	movs	r2, #0
 8008b3a:	6042      	str	r2, [r0, #4]
 8008b3c:	2204      	movs	r2, #4
 8008b3e:	f102 0614 	add.w	r6, r2, #20
 8008b42:	429e      	cmp	r6, r3
 8008b44:	6841      	ldr	r1, [r0, #4]
 8008b46:	d92f      	bls.n	8008ba8 <_dtoa_r+0x2d8>
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f001 f849 	bl	8009be0 <_Balloc>
 8008b4e:	9000      	str	r0, [sp, #0]
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d14b      	bne.n	8008bec <_dtoa_r+0x31c>
 8008b54:	4b24      	ldr	r3, [pc, #144]	; (8008be8 <_dtoa_r+0x318>)
 8008b56:	4602      	mov	r2, r0
 8008b58:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b5c:	e6d1      	b.n	8008902 <_dtoa_r+0x32>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e7de      	b.n	8008b20 <_dtoa_r+0x250>
 8008b62:	2300      	movs	r3, #0
 8008b64:	9308      	str	r3, [sp, #32]
 8008b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b68:	eb0a 0903 	add.w	r9, sl, r3
 8008b6c:	f109 0301 	add.w	r3, r9, #1
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	9301      	str	r3, [sp, #4]
 8008b74:	bfb8      	it	lt
 8008b76:	2301      	movlt	r3, #1
 8008b78:	e7dd      	b.n	8008b36 <_dtoa_r+0x266>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e7f2      	b.n	8008b64 <_dtoa_r+0x294>
 8008b7e:	2501      	movs	r5, #1
 8008b80:	2300      	movs	r3, #0
 8008b82:	9305      	str	r3, [sp, #20]
 8008b84:	9508      	str	r5, [sp, #32]
 8008b86:	f04f 39ff 	mov.w	r9, #4294967295
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b90:	2312      	movs	r3, #18
 8008b92:	9209      	str	r2, [sp, #36]	; 0x24
 8008b94:	e7cf      	b.n	8008b36 <_dtoa_r+0x266>
 8008b96:	2301      	movs	r3, #1
 8008b98:	9308      	str	r3, [sp, #32]
 8008b9a:	e7f4      	b.n	8008b86 <_dtoa_r+0x2b6>
 8008b9c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008ba0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ba4:	464b      	mov	r3, r9
 8008ba6:	e7c6      	b.n	8008b36 <_dtoa_r+0x266>
 8008ba8:	3101      	adds	r1, #1
 8008baa:	6041      	str	r1, [r0, #4]
 8008bac:	0052      	lsls	r2, r2, #1
 8008bae:	e7c6      	b.n	8008b3e <_dtoa_r+0x26e>
 8008bb0:	636f4361 	.word	0x636f4361
 8008bb4:	3fd287a7 	.word	0x3fd287a7
 8008bb8:	8b60c8b3 	.word	0x8b60c8b3
 8008bbc:	3fc68a28 	.word	0x3fc68a28
 8008bc0:	509f79fb 	.word	0x509f79fb
 8008bc4:	3fd34413 	.word	0x3fd34413
 8008bc8:	0800b73e 	.word	0x0800b73e
 8008bcc:	0800b755 	.word	0x0800b755
 8008bd0:	7ff00000 	.word	0x7ff00000
 8008bd4:	0800b73a 	.word	0x0800b73a
 8008bd8:	0800b731 	.word	0x0800b731
 8008bdc:	0800b5b5 	.word	0x0800b5b5
 8008be0:	3ff80000 	.word	0x3ff80000
 8008be4:	0800b8d0 	.word	0x0800b8d0
 8008be8:	0800b7b4 	.word	0x0800b7b4
 8008bec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bee:	9a00      	ldr	r2, [sp, #0]
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	9b01      	ldr	r3, [sp, #4]
 8008bf4:	2b0e      	cmp	r3, #14
 8008bf6:	f200 80ad 	bhi.w	8008d54 <_dtoa_r+0x484>
 8008bfa:	2d00      	cmp	r5, #0
 8008bfc:	f000 80aa 	beq.w	8008d54 <_dtoa_r+0x484>
 8008c00:	f1ba 0f00 	cmp.w	sl, #0
 8008c04:	dd36      	ble.n	8008c74 <_dtoa_r+0x3a4>
 8008c06:	4ac3      	ldr	r2, [pc, #780]	; (8008f14 <_dtoa_r+0x644>)
 8008c08:	f00a 030f 	and.w	r3, sl, #15
 8008c0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c10:	ed93 7b00 	vldr	d7, [r3]
 8008c14:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008c18:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008c1c:	eeb0 8a47 	vmov.f32	s16, s14
 8008c20:	eef0 8a67 	vmov.f32	s17, s15
 8008c24:	d016      	beq.n	8008c54 <_dtoa_r+0x384>
 8008c26:	4bbc      	ldr	r3, [pc, #752]	; (8008f18 <_dtoa_r+0x648>)
 8008c28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c30:	f7f7 fe0c 	bl	800084c <__aeabi_ddiv>
 8008c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c38:	f007 070f 	and.w	r7, r7, #15
 8008c3c:	2503      	movs	r5, #3
 8008c3e:	4eb6      	ldr	r6, [pc, #728]	; (8008f18 <_dtoa_r+0x648>)
 8008c40:	b957      	cbnz	r7, 8008c58 <_dtoa_r+0x388>
 8008c42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c46:	ec53 2b18 	vmov	r2, r3, d8
 8008c4a:	f7f7 fdff 	bl	800084c <__aeabi_ddiv>
 8008c4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c52:	e029      	b.n	8008ca8 <_dtoa_r+0x3d8>
 8008c54:	2502      	movs	r5, #2
 8008c56:	e7f2      	b.n	8008c3e <_dtoa_r+0x36e>
 8008c58:	07f9      	lsls	r1, r7, #31
 8008c5a:	d508      	bpl.n	8008c6e <_dtoa_r+0x39e>
 8008c5c:	ec51 0b18 	vmov	r0, r1, d8
 8008c60:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c64:	f7f7 fcc8 	bl	80005f8 <__aeabi_dmul>
 8008c68:	ec41 0b18 	vmov	d8, r0, r1
 8008c6c:	3501      	adds	r5, #1
 8008c6e:	107f      	asrs	r7, r7, #1
 8008c70:	3608      	adds	r6, #8
 8008c72:	e7e5      	b.n	8008c40 <_dtoa_r+0x370>
 8008c74:	f000 80a6 	beq.w	8008dc4 <_dtoa_r+0x4f4>
 8008c78:	f1ca 0600 	rsb	r6, sl, #0
 8008c7c:	4ba5      	ldr	r3, [pc, #660]	; (8008f14 <_dtoa_r+0x644>)
 8008c7e:	4fa6      	ldr	r7, [pc, #664]	; (8008f18 <_dtoa_r+0x648>)
 8008c80:	f006 020f 	and.w	r2, r6, #15
 8008c84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c90:	f7f7 fcb2 	bl	80005f8 <__aeabi_dmul>
 8008c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c98:	1136      	asrs	r6, r6, #4
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	2502      	movs	r5, #2
 8008c9e:	2e00      	cmp	r6, #0
 8008ca0:	f040 8085 	bne.w	8008dae <_dtoa_r+0x4de>
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1d2      	bne.n	8008c4e <_dtoa_r+0x37e>
 8008ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 808c 	beq.w	8008dc8 <_dtoa_r+0x4f8>
 8008cb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008cb4:	4b99      	ldr	r3, [pc, #612]	; (8008f1c <_dtoa_r+0x64c>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	4630      	mov	r0, r6
 8008cba:	4639      	mov	r1, r7
 8008cbc:	f7f7 ff0e 	bl	8000adc <__aeabi_dcmplt>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	f000 8081 	beq.w	8008dc8 <_dtoa_r+0x4f8>
 8008cc6:	9b01      	ldr	r3, [sp, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d07d      	beq.n	8008dc8 <_dtoa_r+0x4f8>
 8008ccc:	f1b9 0f00 	cmp.w	r9, #0
 8008cd0:	dd3c      	ble.n	8008d4c <_dtoa_r+0x47c>
 8008cd2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008cd6:	9307      	str	r3, [sp, #28]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	4b91      	ldr	r3, [pc, #580]	; (8008f20 <_dtoa_r+0x650>)
 8008cdc:	4630      	mov	r0, r6
 8008cde:	4639      	mov	r1, r7
 8008ce0:	f7f7 fc8a 	bl	80005f8 <__aeabi_dmul>
 8008ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ce8:	3501      	adds	r5, #1
 8008cea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008cee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	f7f7 fc16 	bl	8000524 <__aeabi_i2d>
 8008cf8:	4632      	mov	r2, r6
 8008cfa:	463b      	mov	r3, r7
 8008cfc:	f7f7 fc7c 	bl	80005f8 <__aeabi_dmul>
 8008d00:	4b88      	ldr	r3, [pc, #544]	; (8008f24 <_dtoa_r+0x654>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	f7f7 fac2 	bl	800028c <__adddf3>
 8008d08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d10:	9303      	str	r3, [sp, #12]
 8008d12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d15c      	bne.n	8008dd2 <_dtoa_r+0x502>
 8008d18:	4b83      	ldr	r3, [pc, #524]	; (8008f28 <_dtoa_r+0x658>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	4639      	mov	r1, r7
 8008d20:	f7f7 fab2 	bl	8000288 <__aeabi_dsub>
 8008d24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d28:	4606      	mov	r6, r0
 8008d2a:	460f      	mov	r7, r1
 8008d2c:	f7f7 fef4 	bl	8000b18 <__aeabi_dcmpgt>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	f040 8296 	bne.w	8009262 <_dtoa_r+0x992>
 8008d36:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d40:	4639      	mov	r1, r7
 8008d42:	f7f7 fecb 	bl	8000adc <__aeabi_dcmplt>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	f040 8288 	bne.w	800925c <_dtoa_r+0x98c>
 8008d4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f2c0 8158 	blt.w	800900c <_dtoa_r+0x73c>
 8008d5c:	f1ba 0f0e 	cmp.w	sl, #14
 8008d60:	f300 8154 	bgt.w	800900c <_dtoa_r+0x73c>
 8008d64:	4b6b      	ldr	r3, [pc, #428]	; (8008f14 <_dtoa_r+0x644>)
 8008d66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f280 80e3 	bge.w	8008f3c <_dtoa_r+0x66c>
 8008d76:	9b01      	ldr	r3, [sp, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f300 80df 	bgt.w	8008f3c <_dtoa_r+0x66c>
 8008d7e:	f040 826d 	bne.w	800925c <_dtoa_r+0x98c>
 8008d82:	4b69      	ldr	r3, [pc, #420]	; (8008f28 <_dtoa_r+0x658>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	4640      	mov	r0, r8
 8008d88:	4649      	mov	r1, r9
 8008d8a:	f7f7 fc35 	bl	80005f8 <__aeabi_dmul>
 8008d8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d92:	f7f7 feb7 	bl	8000b04 <__aeabi_dcmpge>
 8008d96:	9e01      	ldr	r6, [sp, #4]
 8008d98:	4637      	mov	r7, r6
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	f040 8243 	bne.w	8009226 <_dtoa_r+0x956>
 8008da0:	9d00      	ldr	r5, [sp, #0]
 8008da2:	2331      	movs	r3, #49	; 0x31
 8008da4:	f805 3b01 	strb.w	r3, [r5], #1
 8008da8:	f10a 0a01 	add.w	sl, sl, #1
 8008dac:	e23f      	b.n	800922e <_dtoa_r+0x95e>
 8008dae:	07f2      	lsls	r2, r6, #31
 8008db0:	d505      	bpl.n	8008dbe <_dtoa_r+0x4ee>
 8008db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008db6:	f7f7 fc1f 	bl	80005f8 <__aeabi_dmul>
 8008dba:	3501      	adds	r5, #1
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	1076      	asrs	r6, r6, #1
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	e76c      	b.n	8008c9e <_dtoa_r+0x3ce>
 8008dc4:	2502      	movs	r5, #2
 8008dc6:	e76f      	b.n	8008ca8 <_dtoa_r+0x3d8>
 8008dc8:	9b01      	ldr	r3, [sp, #4]
 8008dca:	f8cd a01c 	str.w	sl, [sp, #28]
 8008dce:	930c      	str	r3, [sp, #48]	; 0x30
 8008dd0:	e78d      	b.n	8008cee <_dtoa_r+0x41e>
 8008dd2:	9900      	ldr	r1, [sp, #0]
 8008dd4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008dd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dd8:	4b4e      	ldr	r3, [pc, #312]	; (8008f14 <_dtoa_r+0x644>)
 8008dda:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008dde:	4401      	add	r1, r0
 8008de0:	9102      	str	r1, [sp, #8]
 8008de2:	9908      	ldr	r1, [sp, #32]
 8008de4:	eeb0 8a47 	vmov.f32	s16, s14
 8008de8:	eef0 8a67 	vmov.f32	s17, s15
 8008dec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008df0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008df4:	2900      	cmp	r1, #0
 8008df6:	d045      	beq.n	8008e84 <_dtoa_r+0x5b4>
 8008df8:	494c      	ldr	r1, [pc, #304]	; (8008f2c <_dtoa_r+0x65c>)
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	f7f7 fd26 	bl	800084c <__aeabi_ddiv>
 8008e00:	ec53 2b18 	vmov	r2, r3, d8
 8008e04:	f7f7 fa40 	bl	8000288 <__aeabi_dsub>
 8008e08:	9d00      	ldr	r5, [sp, #0]
 8008e0a:	ec41 0b18 	vmov	d8, r0, r1
 8008e0e:	4639      	mov	r1, r7
 8008e10:	4630      	mov	r0, r6
 8008e12:	f7f7 fea1 	bl	8000b58 <__aeabi_d2iz>
 8008e16:	900c      	str	r0, [sp, #48]	; 0x30
 8008e18:	f7f7 fb84 	bl	8000524 <__aeabi_i2d>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	4630      	mov	r0, r6
 8008e22:	4639      	mov	r1, r7
 8008e24:	f7f7 fa30 	bl	8000288 <__aeabi_dsub>
 8008e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e2a:	3330      	adds	r3, #48	; 0x30
 8008e2c:	f805 3b01 	strb.w	r3, [r5], #1
 8008e30:	ec53 2b18 	vmov	r2, r3, d8
 8008e34:	4606      	mov	r6, r0
 8008e36:	460f      	mov	r7, r1
 8008e38:	f7f7 fe50 	bl	8000adc <__aeabi_dcmplt>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d165      	bne.n	8008f0c <_dtoa_r+0x63c>
 8008e40:	4632      	mov	r2, r6
 8008e42:	463b      	mov	r3, r7
 8008e44:	4935      	ldr	r1, [pc, #212]	; (8008f1c <_dtoa_r+0x64c>)
 8008e46:	2000      	movs	r0, #0
 8008e48:	f7f7 fa1e 	bl	8000288 <__aeabi_dsub>
 8008e4c:	ec53 2b18 	vmov	r2, r3, d8
 8008e50:	f7f7 fe44 	bl	8000adc <__aeabi_dcmplt>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	f040 80b9 	bne.w	8008fcc <_dtoa_r+0x6fc>
 8008e5a:	9b02      	ldr	r3, [sp, #8]
 8008e5c:	429d      	cmp	r5, r3
 8008e5e:	f43f af75 	beq.w	8008d4c <_dtoa_r+0x47c>
 8008e62:	4b2f      	ldr	r3, [pc, #188]	; (8008f20 <_dtoa_r+0x650>)
 8008e64:	ec51 0b18 	vmov	r0, r1, d8
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f7f7 fbc5 	bl	80005f8 <__aeabi_dmul>
 8008e6e:	4b2c      	ldr	r3, [pc, #176]	; (8008f20 <_dtoa_r+0x650>)
 8008e70:	ec41 0b18 	vmov	d8, r0, r1
 8008e74:	2200      	movs	r2, #0
 8008e76:	4630      	mov	r0, r6
 8008e78:	4639      	mov	r1, r7
 8008e7a:	f7f7 fbbd 	bl	80005f8 <__aeabi_dmul>
 8008e7e:	4606      	mov	r6, r0
 8008e80:	460f      	mov	r7, r1
 8008e82:	e7c4      	b.n	8008e0e <_dtoa_r+0x53e>
 8008e84:	ec51 0b17 	vmov	r0, r1, d7
 8008e88:	f7f7 fbb6 	bl	80005f8 <__aeabi_dmul>
 8008e8c:	9b02      	ldr	r3, [sp, #8]
 8008e8e:	9d00      	ldr	r5, [sp, #0]
 8008e90:	930c      	str	r3, [sp, #48]	; 0x30
 8008e92:	ec41 0b18 	vmov	d8, r0, r1
 8008e96:	4639      	mov	r1, r7
 8008e98:	4630      	mov	r0, r6
 8008e9a:	f7f7 fe5d 	bl	8000b58 <__aeabi_d2iz>
 8008e9e:	9011      	str	r0, [sp, #68]	; 0x44
 8008ea0:	f7f7 fb40 	bl	8000524 <__aeabi_i2d>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	4639      	mov	r1, r7
 8008eac:	f7f7 f9ec 	bl	8000288 <__aeabi_dsub>
 8008eb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008eb2:	3330      	adds	r3, #48	; 0x30
 8008eb4:	f805 3b01 	strb.w	r3, [r5], #1
 8008eb8:	9b02      	ldr	r3, [sp, #8]
 8008eba:	429d      	cmp	r5, r3
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	460f      	mov	r7, r1
 8008ec0:	f04f 0200 	mov.w	r2, #0
 8008ec4:	d134      	bne.n	8008f30 <_dtoa_r+0x660>
 8008ec6:	4b19      	ldr	r3, [pc, #100]	; (8008f2c <_dtoa_r+0x65c>)
 8008ec8:	ec51 0b18 	vmov	r0, r1, d8
 8008ecc:	f7f7 f9de 	bl	800028c <__adddf3>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	4639      	mov	r1, r7
 8008ed8:	f7f7 fe1e 	bl	8000b18 <__aeabi_dcmpgt>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d175      	bne.n	8008fcc <_dtoa_r+0x6fc>
 8008ee0:	ec53 2b18 	vmov	r2, r3, d8
 8008ee4:	4911      	ldr	r1, [pc, #68]	; (8008f2c <_dtoa_r+0x65c>)
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	f7f7 f9ce 	bl	8000288 <__aeabi_dsub>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	4639      	mov	r1, r7
 8008ef4:	f7f7 fdf2 	bl	8000adc <__aeabi_dcmplt>
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	f43f af27 	beq.w	8008d4c <_dtoa_r+0x47c>
 8008efe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f00:	1e6b      	subs	r3, r5, #1
 8008f02:	930c      	str	r3, [sp, #48]	; 0x30
 8008f04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f08:	2b30      	cmp	r3, #48	; 0x30
 8008f0a:	d0f8      	beq.n	8008efe <_dtoa_r+0x62e>
 8008f0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008f10:	e04a      	b.n	8008fa8 <_dtoa_r+0x6d8>
 8008f12:	bf00      	nop
 8008f14:	0800b8d0 	.word	0x0800b8d0
 8008f18:	0800b8a8 	.word	0x0800b8a8
 8008f1c:	3ff00000 	.word	0x3ff00000
 8008f20:	40240000 	.word	0x40240000
 8008f24:	401c0000 	.word	0x401c0000
 8008f28:	40140000 	.word	0x40140000
 8008f2c:	3fe00000 	.word	0x3fe00000
 8008f30:	4baf      	ldr	r3, [pc, #700]	; (80091f0 <_dtoa_r+0x920>)
 8008f32:	f7f7 fb61 	bl	80005f8 <__aeabi_dmul>
 8008f36:	4606      	mov	r6, r0
 8008f38:	460f      	mov	r7, r1
 8008f3a:	e7ac      	b.n	8008e96 <_dtoa_r+0x5c6>
 8008f3c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f40:	9d00      	ldr	r5, [sp, #0]
 8008f42:	4642      	mov	r2, r8
 8008f44:	464b      	mov	r3, r9
 8008f46:	4630      	mov	r0, r6
 8008f48:	4639      	mov	r1, r7
 8008f4a:	f7f7 fc7f 	bl	800084c <__aeabi_ddiv>
 8008f4e:	f7f7 fe03 	bl	8000b58 <__aeabi_d2iz>
 8008f52:	9002      	str	r0, [sp, #8]
 8008f54:	f7f7 fae6 	bl	8000524 <__aeabi_i2d>
 8008f58:	4642      	mov	r2, r8
 8008f5a:	464b      	mov	r3, r9
 8008f5c:	f7f7 fb4c 	bl	80005f8 <__aeabi_dmul>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	4630      	mov	r0, r6
 8008f66:	4639      	mov	r1, r7
 8008f68:	f7f7 f98e 	bl	8000288 <__aeabi_dsub>
 8008f6c:	9e02      	ldr	r6, [sp, #8]
 8008f6e:	9f01      	ldr	r7, [sp, #4]
 8008f70:	3630      	adds	r6, #48	; 0x30
 8008f72:	f805 6b01 	strb.w	r6, [r5], #1
 8008f76:	9e00      	ldr	r6, [sp, #0]
 8008f78:	1bae      	subs	r6, r5, r6
 8008f7a:	42b7      	cmp	r7, r6
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	d137      	bne.n	8008ff2 <_dtoa_r+0x722>
 8008f82:	f7f7 f983 	bl	800028c <__adddf3>
 8008f86:	4642      	mov	r2, r8
 8008f88:	464b      	mov	r3, r9
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	460f      	mov	r7, r1
 8008f8e:	f7f7 fdc3 	bl	8000b18 <__aeabi_dcmpgt>
 8008f92:	b9c8      	cbnz	r0, 8008fc8 <_dtoa_r+0x6f8>
 8008f94:	4642      	mov	r2, r8
 8008f96:	464b      	mov	r3, r9
 8008f98:	4630      	mov	r0, r6
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	f7f7 fd94 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fa0:	b110      	cbz	r0, 8008fa8 <_dtoa_r+0x6d8>
 8008fa2:	9b02      	ldr	r3, [sp, #8]
 8008fa4:	07d9      	lsls	r1, r3, #31
 8008fa6:	d40f      	bmi.n	8008fc8 <_dtoa_r+0x6f8>
 8008fa8:	4620      	mov	r0, r4
 8008faa:	4659      	mov	r1, fp
 8008fac:	f000 fe58 	bl	8009c60 <_Bfree>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	702b      	strb	r3, [r5, #0]
 8008fb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fb6:	f10a 0001 	add.w	r0, sl, #1
 8008fba:	6018      	str	r0, [r3, #0]
 8008fbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f43f acd8 	beq.w	8008974 <_dtoa_r+0xa4>
 8008fc4:	601d      	str	r5, [r3, #0]
 8008fc6:	e4d5      	b.n	8008974 <_dtoa_r+0xa4>
 8008fc8:	f8cd a01c 	str.w	sl, [sp, #28]
 8008fcc:	462b      	mov	r3, r5
 8008fce:	461d      	mov	r5, r3
 8008fd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fd4:	2a39      	cmp	r2, #57	; 0x39
 8008fd6:	d108      	bne.n	8008fea <_dtoa_r+0x71a>
 8008fd8:	9a00      	ldr	r2, [sp, #0]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d1f7      	bne.n	8008fce <_dtoa_r+0x6fe>
 8008fde:	9a07      	ldr	r2, [sp, #28]
 8008fe0:	9900      	ldr	r1, [sp, #0]
 8008fe2:	3201      	adds	r2, #1
 8008fe4:	9207      	str	r2, [sp, #28]
 8008fe6:	2230      	movs	r2, #48	; 0x30
 8008fe8:	700a      	strb	r2, [r1, #0]
 8008fea:	781a      	ldrb	r2, [r3, #0]
 8008fec:	3201      	adds	r2, #1
 8008fee:	701a      	strb	r2, [r3, #0]
 8008ff0:	e78c      	b.n	8008f0c <_dtoa_r+0x63c>
 8008ff2:	4b7f      	ldr	r3, [pc, #508]	; (80091f0 <_dtoa_r+0x920>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f7f7 faff 	bl	80005f8 <__aeabi_dmul>
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	4606      	mov	r6, r0
 8009000:	460f      	mov	r7, r1
 8009002:	f7f7 fd61 	bl	8000ac8 <__aeabi_dcmpeq>
 8009006:	2800      	cmp	r0, #0
 8009008:	d09b      	beq.n	8008f42 <_dtoa_r+0x672>
 800900a:	e7cd      	b.n	8008fa8 <_dtoa_r+0x6d8>
 800900c:	9a08      	ldr	r2, [sp, #32]
 800900e:	2a00      	cmp	r2, #0
 8009010:	f000 80c4 	beq.w	800919c <_dtoa_r+0x8cc>
 8009014:	9a05      	ldr	r2, [sp, #20]
 8009016:	2a01      	cmp	r2, #1
 8009018:	f300 80a8 	bgt.w	800916c <_dtoa_r+0x89c>
 800901c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800901e:	2a00      	cmp	r2, #0
 8009020:	f000 80a0 	beq.w	8009164 <_dtoa_r+0x894>
 8009024:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009028:	9e06      	ldr	r6, [sp, #24]
 800902a:	4645      	mov	r5, r8
 800902c:	9a04      	ldr	r2, [sp, #16]
 800902e:	2101      	movs	r1, #1
 8009030:	441a      	add	r2, r3
 8009032:	4620      	mov	r0, r4
 8009034:	4498      	add	r8, r3
 8009036:	9204      	str	r2, [sp, #16]
 8009038:	f000 ff18 	bl	8009e6c <__i2b>
 800903c:	4607      	mov	r7, r0
 800903e:	2d00      	cmp	r5, #0
 8009040:	dd0b      	ble.n	800905a <_dtoa_r+0x78a>
 8009042:	9b04      	ldr	r3, [sp, #16]
 8009044:	2b00      	cmp	r3, #0
 8009046:	dd08      	ble.n	800905a <_dtoa_r+0x78a>
 8009048:	42ab      	cmp	r3, r5
 800904a:	9a04      	ldr	r2, [sp, #16]
 800904c:	bfa8      	it	ge
 800904e:	462b      	movge	r3, r5
 8009050:	eba8 0803 	sub.w	r8, r8, r3
 8009054:	1aed      	subs	r5, r5, r3
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	9304      	str	r3, [sp, #16]
 800905a:	9b06      	ldr	r3, [sp, #24]
 800905c:	b1fb      	cbz	r3, 800909e <_dtoa_r+0x7ce>
 800905e:	9b08      	ldr	r3, [sp, #32]
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 809f 	beq.w	80091a4 <_dtoa_r+0x8d4>
 8009066:	2e00      	cmp	r6, #0
 8009068:	dd11      	ble.n	800908e <_dtoa_r+0x7be>
 800906a:	4639      	mov	r1, r7
 800906c:	4632      	mov	r2, r6
 800906e:	4620      	mov	r0, r4
 8009070:	f000 ffb8 	bl	8009fe4 <__pow5mult>
 8009074:	465a      	mov	r2, fp
 8009076:	4601      	mov	r1, r0
 8009078:	4607      	mov	r7, r0
 800907a:	4620      	mov	r0, r4
 800907c:	f000 ff0c 	bl	8009e98 <__multiply>
 8009080:	4659      	mov	r1, fp
 8009082:	9007      	str	r0, [sp, #28]
 8009084:	4620      	mov	r0, r4
 8009086:	f000 fdeb 	bl	8009c60 <_Bfree>
 800908a:	9b07      	ldr	r3, [sp, #28]
 800908c:	469b      	mov	fp, r3
 800908e:	9b06      	ldr	r3, [sp, #24]
 8009090:	1b9a      	subs	r2, r3, r6
 8009092:	d004      	beq.n	800909e <_dtoa_r+0x7ce>
 8009094:	4659      	mov	r1, fp
 8009096:	4620      	mov	r0, r4
 8009098:	f000 ffa4 	bl	8009fe4 <__pow5mult>
 800909c:	4683      	mov	fp, r0
 800909e:	2101      	movs	r1, #1
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 fee3 	bl	8009e6c <__i2b>
 80090a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	4606      	mov	r6, r0
 80090ac:	dd7c      	ble.n	80091a8 <_dtoa_r+0x8d8>
 80090ae:	461a      	mov	r2, r3
 80090b0:	4601      	mov	r1, r0
 80090b2:	4620      	mov	r0, r4
 80090b4:	f000 ff96 	bl	8009fe4 <__pow5mult>
 80090b8:	9b05      	ldr	r3, [sp, #20]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	4606      	mov	r6, r0
 80090be:	dd76      	ble.n	80091ae <_dtoa_r+0x8de>
 80090c0:	2300      	movs	r3, #0
 80090c2:	9306      	str	r3, [sp, #24]
 80090c4:	6933      	ldr	r3, [r6, #16]
 80090c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80090ca:	6918      	ldr	r0, [r3, #16]
 80090cc:	f000 fe7e 	bl	8009dcc <__hi0bits>
 80090d0:	f1c0 0020 	rsb	r0, r0, #32
 80090d4:	9b04      	ldr	r3, [sp, #16]
 80090d6:	4418      	add	r0, r3
 80090d8:	f010 001f 	ands.w	r0, r0, #31
 80090dc:	f000 8086 	beq.w	80091ec <_dtoa_r+0x91c>
 80090e0:	f1c0 0320 	rsb	r3, r0, #32
 80090e4:	2b04      	cmp	r3, #4
 80090e6:	dd7f      	ble.n	80091e8 <_dtoa_r+0x918>
 80090e8:	f1c0 001c 	rsb	r0, r0, #28
 80090ec:	9b04      	ldr	r3, [sp, #16]
 80090ee:	4403      	add	r3, r0
 80090f0:	4480      	add	r8, r0
 80090f2:	4405      	add	r5, r0
 80090f4:	9304      	str	r3, [sp, #16]
 80090f6:	f1b8 0f00 	cmp.w	r8, #0
 80090fa:	dd05      	ble.n	8009108 <_dtoa_r+0x838>
 80090fc:	4659      	mov	r1, fp
 80090fe:	4642      	mov	r2, r8
 8009100:	4620      	mov	r0, r4
 8009102:	f000 ffc9 	bl	800a098 <__lshift>
 8009106:	4683      	mov	fp, r0
 8009108:	9b04      	ldr	r3, [sp, #16]
 800910a:	2b00      	cmp	r3, #0
 800910c:	dd05      	ble.n	800911a <_dtoa_r+0x84a>
 800910e:	4631      	mov	r1, r6
 8009110:	461a      	mov	r2, r3
 8009112:	4620      	mov	r0, r4
 8009114:	f000 ffc0 	bl	800a098 <__lshift>
 8009118:	4606      	mov	r6, r0
 800911a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800911c:	2b00      	cmp	r3, #0
 800911e:	d069      	beq.n	80091f4 <_dtoa_r+0x924>
 8009120:	4631      	mov	r1, r6
 8009122:	4658      	mov	r0, fp
 8009124:	f001 f824 	bl	800a170 <__mcmp>
 8009128:	2800      	cmp	r0, #0
 800912a:	da63      	bge.n	80091f4 <_dtoa_r+0x924>
 800912c:	2300      	movs	r3, #0
 800912e:	4659      	mov	r1, fp
 8009130:	220a      	movs	r2, #10
 8009132:	4620      	mov	r0, r4
 8009134:	f000 fdb6 	bl	8009ca4 <__multadd>
 8009138:	9b08      	ldr	r3, [sp, #32]
 800913a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800913e:	4683      	mov	fp, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	f000 818f 	beq.w	8009464 <_dtoa_r+0xb94>
 8009146:	4639      	mov	r1, r7
 8009148:	2300      	movs	r3, #0
 800914a:	220a      	movs	r2, #10
 800914c:	4620      	mov	r0, r4
 800914e:	f000 fda9 	bl	8009ca4 <__multadd>
 8009152:	f1b9 0f00 	cmp.w	r9, #0
 8009156:	4607      	mov	r7, r0
 8009158:	f300 808e 	bgt.w	8009278 <_dtoa_r+0x9a8>
 800915c:	9b05      	ldr	r3, [sp, #20]
 800915e:	2b02      	cmp	r3, #2
 8009160:	dc50      	bgt.n	8009204 <_dtoa_r+0x934>
 8009162:	e089      	b.n	8009278 <_dtoa_r+0x9a8>
 8009164:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009166:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800916a:	e75d      	b.n	8009028 <_dtoa_r+0x758>
 800916c:	9b01      	ldr	r3, [sp, #4]
 800916e:	1e5e      	subs	r6, r3, #1
 8009170:	9b06      	ldr	r3, [sp, #24]
 8009172:	42b3      	cmp	r3, r6
 8009174:	bfbf      	itttt	lt
 8009176:	9b06      	ldrlt	r3, [sp, #24]
 8009178:	9606      	strlt	r6, [sp, #24]
 800917a:	1af2      	sublt	r2, r6, r3
 800917c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800917e:	bfb6      	itet	lt
 8009180:	189b      	addlt	r3, r3, r2
 8009182:	1b9e      	subge	r6, r3, r6
 8009184:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009186:	9b01      	ldr	r3, [sp, #4]
 8009188:	bfb8      	it	lt
 800918a:	2600      	movlt	r6, #0
 800918c:	2b00      	cmp	r3, #0
 800918e:	bfb5      	itete	lt
 8009190:	eba8 0503 	sublt.w	r5, r8, r3
 8009194:	9b01      	ldrge	r3, [sp, #4]
 8009196:	2300      	movlt	r3, #0
 8009198:	4645      	movge	r5, r8
 800919a:	e747      	b.n	800902c <_dtoa_r+0x75c>
 800919c:	9e06      	ldr	r6, [sp, #24]
 800919e:	9f08      	ldr	r7, [sp, #32]
 80091a0:	4645      	mov	r5, r8
 80091a2:	e74c      	b.n	800903e <_dtoa_r+0x76e>
 80091a4:	9a06      	ldr	r2, [sp, #24]
 80091a6:	e775      	b.n	8009094 <_dtoa_r+0x7c4>
 80091a8:	9b05      	ldr	r3, [sp, #20]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	dc18      	bgt.n	80091e0 <_dtoa_r+0x910>
 80091ae:	9b02      	ldr	r3, [sp, #8]
 80091b0:	b9b3      	cbnz	r3, 80091e0 <_dtoa_r+0x910>
 80091b2:	9b03      	ldr	r3, [sp, #12]
 80091b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091b8:	b9a3      	cbnz	r3, 80091e4 <_dtoa_r+0x914>
 80091ba:	9b03      	ldr	r3, [sp, #12]
 80091bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091c0:	0d1b      	lsrs	r3, r3, #20
 80091c2:	051b      	lsls	r3, r3, #20
 80091c4:	b12b      	cbz	r3, 80091d2 <_dtoa_r+0x902>
 80091c6:	9b04      	ldr	r3, [sp, #16]
 80091c8:	3301      	adds	r3, #1
 80091ca:	9304      	str	r3, [sp, #16]
 80091cc:	f108 0801 	add.w	r8, r8, #1
 80091d0:	2301      	movs	r3, #1
 80091d2:	9306      	str	r3, [sp, #24]
 80091d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f47f af74 	bne.w	80090c4 <_dtoa_r+0x7f4>
 80091dc:	2001      	movs	r0, #1
 80091de:	e779      	b.n	80090d4 <_dtoa_r+0x804>
 80091e0:	2300      	movs	r3, #0
 80091e2:	e7f6      	b.n	80091d2 <_dtoa_r+0x902>
 80091e4:	9b02      	ldr	r3, [sp, #8]
 80091e6:	e7f4      	b.n	80091d2 <_dtoa_r+0x902>
 80091e8:	d085      	beq.n	80090f6 <_dtoa_r+0x826>
 80091ea:	4618      	mov	r0, r3
 80091ec:	301c      	adds	r0, #28
 80091ee:	e77d      	b.n	80090ec <_dtoa_r+0x81c>
 80091f0:	40240000 	.word	0x40240000
 80091f4:	9b01      	ldr	r3, [sp, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	dc38      	bgt.n	800926c <_dtoa_r+0x99c>
 80091fa:	9b05      	ldr	r3, [sp, #20]
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	dd35      	ble.n	800926c <_dtoa_r+0x99c>
 8009200:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009204:	f1b9 0f00 	cmp.w	r9, #0
 8009208:	d10d      	bne.n	8009226 <_dtoa_r+0x956>
 800920a:	4631      	mov	r1, r6
 800920c:	464b      	mov	r3, r9
 800920e:	2205      	movs	r2, #5
 8009210:	4620      	mov	r0, r4
 8009212:	f000 fd47 	bl	8009ca4 <__multadd>
 8009216:	4601      	mov	r1, r0
 8009218:	4606      	mov	r6, r0
 800921a:	4658      	mov	r0, fp
 800921c:	f000 ffa8 	bl	800a170 <__mcmp>
 8009220:	2800      	cmp	r0, #0
 8009222:	f73f adbd 	bgt.w	8008da0 <_dtoa_r+0x4d0>
 8009226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009228:	9d00      	ldr	r5, [sp, #0]
 800922a:	ea6f 0a03 	mvn.w	sl, r3
 800922e:	f04f 0800 	mov.w	r8, #0
 8009232:	4631      	mov	r1, r6
 8009234:	4620      	mov	r0, r4
 8009236:	f000 fd13 	bl	8009c60 <_Bfree>
 800923a:	2f00      	cmp	r7, #0
 800923c:	f43f aeb4 	beq.w	8008fa8 <_dtoa_r+0x6d8>
 8009240:	f1b8 0f00 	cmp.w	r8, #0
 8009244:	d005      	beq.n	8009252 <_dtoa_r+0x982>
 8009246:	45b8      	cmp	r8, r7
 8009248:	d003      	beq.n	8009252 <_dtoa_r+0x982>
 800924a:	4641      	mov	r1, r8
 800924c:	4620      	mov	r0, r4
 800924e:	f000 fd07 	bl	8009c60 <_Bfree>
 8009252:	4639      	mov	r1, r7
 8009254:	4620      	mov	r0, r4
 8009256:	f000 fd03 	bl	8009c60 <_Bfree>
 800925a:	e6a5      	b.n	8008fa8 <_dtoa_r+0x6d8>
 800925c:	2600      	movs	r6, #0
 800925e:	4637      	mov	r7, r6
 8009260:	e7e1      	b.n	8009226 <_dtoa_r+0x956>
 8009262:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009264:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009268:	4637      	mov	r7, r6
 800926a:	e599      	b.n	8008da0 <_dtoa_r+0x4d0>
 800926c:	9b08      	ldr	r3, [sp, #32]
 800926e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 80fd 	beq.w	8009472 <_dtoa_r+0xba2>
 8009278:	2d00      	cmp	r5, #0
 800927a:	dd05      	ble.n	8009288 <_dtoa_r+0x9b8>
 800927c:	4639      	mov	r1, r7
 800927e:	462a      	mov	r2, r5
 8009280:	4620      	mov	r0, r4
 8009282:	f000 ff09 	bl	800a098 <__lshift>
 8009286:	4607      	mov	r7, r0
 8009288:	9b06      	ldr	r3, [sp, #24]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d05c      	beq.n	8009348 <_dtoa_r+0xa78>
 800928e:	6879      	ldr	r1, [r7, #4]
 8009290:	4620      	mov	r0, r4
 8009292:	f000 fca5 	bl	8009be0 <_Balloc>
 8009296:	4605      	mov	r5, r0
 8009298:	b928      	cbnz	r0, 80092a6 <_dtoa_r+0x9d6>
 800929a:	4b80      	ldr	r3, [pc, #512]	; (800949c <_dtoa_r+0xbcc>)
 800929c:	4602      	mov	r2, r0
 800929e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80092a2:	f7ff bb2e 	b.w	8008902 <_dtoa_r+0x32>
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	3202      	adds	r2, #2
 80092aa:	0092      	lsls	r2, r2, #2
 80092ac:	f107 010c 	add.w	r1, r7, #12
 80092b0:	300c      	adds	r0, #12
 80092b2:	f000 fc87 	bl	8009bc4 <memcpy>
 80092b6:	2201      	movs	r2, #1
 80092b8:	4629      	mov	r1, r5
 80092ba:	4620      	mov	r0, r4
 80092bc:	f000 feec 	bl	800a098 <__lshift>
 80092c0:	9b00      	ldr	r3, [sp, #0]
 80092c2:	3301      	adds	r3, #1
 80092c4:	9301      	str	r3, [sp, #4]
 80092c6:	9b00      	ldr	r3, [sp, #0]
 80092c8:	444b      	add	r3, r9
 80092ca:	9307      	str	r3, [sp, #28]
 80092cc:	9b02      	ldr	r3, [sp, #8]
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	46b8      	mov	r8, r7
 80092d4:	9306      	str	r3, [sp, #24]
 80092d6:	4607      	mov	r7, r0
 80092d8:	9b01      	ldr	r3, [sp, #4]
 80092da:	4631      	mov	r1, r6
 80092dc:	3b01      	subs	r3, #1
 80092de:	4658      	mov	r0, fp
 80092e0:	9302      	str	r3, [sp, #8]
 80092e2:	f7ff fa67 	bl	80087b4 <quorem>
 80092e6:	4603      	mov	r3, r0
 80092e8:	3330      	adds	r3, #48	; 0x30
 80092ea:	9004      	str	r0, [sp, #16]
 80092ec:	4641      	mov	r1, r8
 80092ee:	4658      	mov	r0, fp
 80092f0:	9308      	str	r3, [sp, #32]
 80092f2:	f000 ff3d 	bl	800a170 <__mcmp>
 80092f6:	463a      	mov	r2, r7
 80092f8:	4681      	mov	r9, r0
 80092fa:	4631      	mov	r1, r6
 80092fc:	4620      	mov	r0, r4
 80092fe:	f000 ff53 	bl	800a1a8 <__mdiff>
 8009302:	68c2      	ldr	r2, [r0, #12]
 8009304:	9b08      	ldr	r3, [sp, #32]
 8009306:	4605      	mov	r5, r0
 8009308:	bb02      	cbnz	r2, 800934c <_dtoa_r+0xa7c>
 800930a:	4601      	mov	r1, r0
 800930c:	4658      	mov	r0, fp
 800930e:	f000 ff2f 	bl	800a170 <__mcmp>
 8009312:	9b08      	ldr	r3, [sp, #32]
 8009314:	4602      	mov	r2, r0
 8009316:	4629      	mov	r1, r5
 8009318:	4620      	mov	r0, r4
 800931a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800931e:	f000 fc9f 	bl	8009c60 <_Bfree>
 8009322:	9b05      	ldr	r3, [sp, #20]
 8009324:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009326:	9d01      	ldr	r5, [sp, #4]
 8009328:	ea43 0102 	orr.w	r1, r3, r2
 800932c:	9b06      	ldr	r3, [sp, #24]
 800932e:	430b      	orrs	r3, r1
 8009330:	9b08      	ldr	r3, [sp, #32]
 8009332:	d10d      	bne.n	8009350 <_dtoa_r+0xa80>
 8009334:	2b39      	cmp	r3, #57	; 0x39
 8009336:	d029      	beq.n	800938c <_dtoa_r+0xabc>
 8009338:	f1b9 0f00 	cmp.w	r9, #0
 800933c:	dd01      	ble.n	8009342 <_dtoa_r+0xa72>
 800933e:	9b04      	ldr	r3, [sp, #16]
 8009340:	3331      	adds	r3, #49	; 0x31
 8009342:	9a02      	ldr	r2, [sp, #8]
 8009344:	7013      	strb	r3, [r2, #0]
 8009346:	e774      	b.n	8009232 <_dtoa_r+0x962>
 8009348:	4638      	mov	r0, r7
 800934a:	e7b9      	b.n	80092c0 <_dtoa_r+0x9f0>
 800934c:	2201      	movs	r2, #1
 800934e:	e7e2      	b.n	8009316 <_dtoa_r+0xa46>
 8009350:	f1b9 0f00 	cmp.w	r9, #0
 8009354:	db06      	blt.n	8009364 <_dtoa_r+0xa94>
 8009356:	9905      	ldr	r1, [sp, #20]
 8009358:	ea41 0909 	orr.w	r9, r1, r9
 800935c:	9906      	ldr	r1, [sp, #24]
 800935e:	ea59 0101 	orrs.w	r1, r9, r1
 8009362:	d120      	bne.n	80093a6 <_dtoa_r+0xad6>
 8009364:	2a00      	cmp	r2, #0
 8009366:	ddec      	ble.n	8009342 <_dtoa_r+0xa72>
 8009368:	4659      	mov	r1, fp
 800936a:	2201      	movs	r2, #1
 800936c:	4620      	mov	r0, r4
 800936e:	9301      	str	r3, [sp, #4]
 8009370:	f000 fe92 	bl	800a098 <__lshift>
 8009374:	4631      	mov	r1, r6
 8009376:	4683      	mov	fp, r0
 8009378:	f000 fefa 	bl	800a170 <__mcmp>
 800937c:	2800      	cmp	r0, #0
 800937e:	9b01      	ldr	r3, [sp, #4]
 8009380:	dc02      	bgt.n	8009388 <_dtoa_r+0xab8>
 8009382:	d1de      	bne.n	8009342 <_dtoa_r+0xa72>
 8009384:	07da      	lsls	r2, r3, #31
 8009386:	d5dc      	bpl.n	8009342 <_dtoa_r+0xa72>
 8009388:	2b39      	cmp	r3, #57	; 0x39
 800938a:	d1d8      	bne.n	800933e <_dtoa_r+0xa6e>
 800938c:	9a02      	ldr	r2, [sp, #8]
 800938e:	2339      	movs	r3, #57	; 0x39
 8009390:	7013      	strb	r3, [r2, #0]
 8009392:	462b      	mov	r3, r5
 8009394:	461d      	mov	r5, r3
 8009396:	3b01      	subs	r3, #1
 8009398:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800939c:	2a39      	cmp	r2, #57	; 0x39
 800939e:	d050      	beq.n	8009442 <_dtoa_r+0xb72>
 80093a0:	3201      	adds	r2, #1
 80093a2:	701a      	strb	r2, [r3, #0]
 80093a4:	e745      	b.n	8009232 <_dtoa_r+0x962>
 80093a6:	2a00      	cmp	r2, #0
 80093a8:	dd03      	ble.n	80093b2 <_dtoa_r+0xae2>
 80093aa:	2b39      	cmp	r3, #57	; 0x39
 80093ac:	d0ee      	beq.n	800938c <_dtoa_r+0xabc>
 80093ae:	3301      	adds	r3, #1
 80093b0:	e7c7      	b.n	8009342 <_dtoa_r+0xa72>
 80093b2:	9a01      	ldr	r2, [sp, #4]
 80093b4:	9907      	ldr	r1, [sp, #28]
 80093b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80093ba:	428a      	cmp	r2, r1
 80093bc:	d02a      	beq.n	8009414 <_dtoa_r+0xb44>
 80093be:	4659      	mov	r1, fp
 80093c0:	2300      	movs	r3, #0
 80093c2:	220a      	movs	r2, #10
 80093c4:	4620      	mov	r0, r4
 80093c6:	f000 fc6d 	bl	8009ca4 <__multadd>
 80093ca:	45b8      	cmp	r8, r7
 80093cc:	4683      	mov	fp, r0
 80093ce:	f04f 0300 	mov.w	r3, #0
 80093d2:	f04f 020a 	mov.w	r2, #10
 80093d6:	4641      	mov	r1, r8
 80093d8:	4620      	mov	r0, r4
 80093da:	d107      	bne.n	80093ec <_dtoa_r+0xb1c>
 80093dc:	f000 fc62 	bl	8009ca4 <__multadd>
 80093e0:	4680      	mov	r8, r0
 80093e2:	4607      	mov	r7, r0
 80093e4:	9b01      	ldr	r3, [sp, #4]
 80093e6:	3301      	adds	r3, #1
 80093e8:	9301      	str	r3, [sp, #4]
 80093ea:	e775      	b.n	80092d8 <_dtoa_r+0xa08>
 80093ec:	f000 fc5a 	bl	8009ca4 <__multadd>
 80093f0:	4639      	mov	r1, r7
 80093f2:	4680      	mov	r8, r0
 80093f4:	2300      	movs	r3, #0
 80093f6:	220a      	movs	r2, #10
 80093f8:	4620      	mov	r0, r4
 80093fa:	f000 fc53 	bl	8009ca4 <__multadd>
 80093fe:	4607      	mov	r7, r0
 8009400:	e7f0      	b.n	80093e4 <_dtoa_r+0xb14>
 8009402:	f1b9 0f00 	cmp.w	r9, #0
 8009406:	9a00      	ldr	r2, [sp, #0]
 8009408:	bfcc      	ite	gt
 800940a:	464d      	movgt	r5, r9
 800940c:	2501      	movle	r5, #1
 800940e:	4415      	add	r5, r2
 8009410:	f04f 0800 	mov.w	r8, #0
 8009414:	4659      	mov	r1, fp
 8009416:	2201      	movs	r2, #1
 8009418:	4620      	mov	r0, r4
 800941a:	9301      	str	r3, [sp, #4]
 800941c:	f000 fe3c 	bl	800a098 <__lshift>
 8009420:	4631      	mov	r1, r6
 8009422:	4683      	mov	fp, r0
 8009424:	f000 fea4 	bl	800a170 <__mcmp>
 8009428:	2800      	cmp	r0, #0
 800942a:	dcb2      	bgt.n	8009392 <_dtoa_r+0xac2>
 800942c:	d102      	bne.n	8009434 <_dtoa_r+0xb64>
 800942e:	9b01      	ldr	r3, [sp, #4]
 8009430:	07db      	lsls	r3, r3, #31
 8009432:	d4ae      	bmi.n	8009392 <_dtoa_r+0xac2>
 8009434:	462b      	mov	r3, r5
 8009436:	461d      	mov	r5, r3
 8009438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800943c:	2a30      	cmp	r2, #48	; 0x30
 800943e:	d0fa      	beq.n	8009436 <_dtoa_r+0xb66>
 8009440:	e6f7      	b.n	8009232 <_dtoa_r+0x962>
 8009442:	9a00      	ldr	r2, [sp, #0]
 8009444:	429a      	cmp	r2, r3
 8009446:	d1a5      	bne.n	8009394 <_dtoa_r+0xac4>
 8009448:	f10a 0a01 	add.w	sl, sl, #1
 800944c:	2331      	movs	r3, #49	; 0x31
 800944e:	e779      	b.n	8009344 <_dtoa_r+0xa74>
 8009450:	4b13      	ldr	r3, [pc, #76]	; (80094a0 <_dtoa_r+0xbd0>)
 8009452:	f7ff baaf 	b.w	80089b4 <_dtoa_r+0xe4>
 8009456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009458:	2b00      	cmp	r3, #0
 800945a:	f47f aa86 	bne.w	800896a <_dtoa_r+0x9a>
 800945e:	4b11      	ldr	r3, [pc, #68]	; (80094a4 <_dtoa_r+0xbd4>)
 8009460:	f7ff baa8 	b.w	80089b4 <_dtoa_r+0xe4>
 8009464:	f1b9 0f00 	cmp.w	r9, #0
 8009468:	dc03      	bgt.n	8009472 <_dtoa_r+0xba2>
 800946a:	9b05      	ldr	r3, [sp, #20]
 800946c:	2b02      	cmp	r3, #2
 800946e:	f73f aec9 	bgt.w	8009204 <_dtoa_r+0x934>
 8009472:	9d00      	ldr	r5, [sp, #0]
 8009474:	4631      	mov	r1, r6
 8009476:	4658      	mov	r0, fp
 8009478:	f7ff f99c 	bl	80087b4 <quorem>
 800947c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009480:	f805 3b01 	strb.w	r3, [r5], #1
 8009484:	9a00      	ldr	r2, [sp, #0]
 8009486:	1aaa      	subs	r2, r5, r2
 8009488:	4591      	cmp	r9, r2
 800948a:	ddba      	ble.n	8009402 <_dtoa_r+0xb32>
 800948c:	4659      	mov	r1, fp
 800948e:	2300      	movs	r3, #0
 8009490:	220a      	movs	r2, #10
 8009492:	4620      	mov	r0, r4
 8009494:	f000 fc06 	bl	8009ca4 <__multadd>
 8009498:	4683      	mov	fp, r0
 800949a:	e7eb      	b.n	8009474 <_dtoa_r+0xba4>
 800949c:	0800b7b4 	.word	0x0800b7b4
 80094a0:	0800b5b4 	.word	0x0800b5b4
 80094a4:	0800b731 	.word	0x0800b731

080094a8 <rshift>:
 80094a8:	6903      	ldr	r3, [r0, #16]
 80094aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80094ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80094b6:	f100 0414 	add.w	r4, r0, #20
 80094ba:	dd45      	ble.n	8009548 <rshift+0xa0>
 80094bc:	f011 011f 	ands.w	r1, r1, #31
 80094c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80094c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80094c8:	d10c      	bne.n	80094e4 <rshift+0x3c>
 80094ca:	f100 0710 	add.w	r7, r0, #16
 80094ce:	4629      	mov	r1, r5
 80094d0:	42b1      	cmp	r1, r6
 80094d2:	d334      	bcc.n	800953e <rshift+0x96>
 80094d4:	1a9b      	subs	r3, r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	1eea      	subs	r2, r5, #3
 80094da:	4296      	cmp	r6, r2
 80094dc:	bf38      	it	cc
 80094de:	2300      	movcc	r3, #0
 80094e0:	4423      	add	r3, r4
 80094e2:	e015      	b.n	8009510 <rshift+0x68>
 80094e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80094e8:	f1c1 0820 	rsb	r8, r1, #32
 80094ec:	40cf      	lsrs	r7, r1
 80094ee:	f105 0e04 	add.w	lr, r5, #4
 80094f2:	46a1      	mov	r9, r4
 80094f4:	4576      	cmp	r6, lr
 80094f6:	46f4      	mov	ip, lr
 80094f8:	d815      	bhi.n	8009526 <rshift+0x7e>
 80094fa:	1a9b      	subs	r3, r3, r2
 80094fc:	009a      	lsls	r2, r3, #2
 80094fe:	3a04      	subs	r2, #4
 8009500:	3501      	adds	r5, #1
 8009502:	42ae      	cmp	r6, r5
 8009504:	bf38      	it	cc
 8009506:	2200      	movcc	r2, #0
 8009508:	18a3      	adds	r3, r4, r2
 800950a:	50a7      	str	r7, [r4, r2]
 800950c:	b107      	cbz	r7, 8009510 <rshift+0x68>
 800950e:	3304      	adds	r3, #4
 8009510:	1b1a      	subs	r2, r3, r4
 8009512:	42a3      	cmp	r3, r4
 8009514:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009518:	bf08      	it	eq
 800951a:	2300      	moveq	r3, #0
 800951c:	6102      	str	r2, [r0, #16]
 800951e:	bf08      	it	eq
 8009520:	6143      	streq	r3, [r0, #20]
 8009522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009526:	f8dc c000 	ldr.w	ip, [ip]
 800952a:	fa0c fc08 	lsl.w	ip, ip, r8
 800952e:	ea4c 0707 	orr.w	r7, ip, r7
 8009532:	f849 7b04 	str.w	r7, [r9], #4
 8009536:	f85e 7b04 	ldr.w	r7, [lr], #4
 800953a:	40cf      	lsrs	r7, r1
 800953c:	e7da      	b.n	80094f4 <rshift+0x4c>
 800953e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009542:	f847 cf04 	str.w	ip, [r7, #4]!
 8009546:	e7c3      	b.n	80094d0 <rshift+0x28>
 8009548:	4623      	mov	r3, r4
 800954a:	e7e1      	b.n	8009510 <rshift+0x68>

0800954c <__hexdig_fun>:
 800954c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009550:	2b09      	cmp	r3, #9
 8009552:	d802      	bhi.n	800955a <__hexdig_fun+0xe>
 8009554:	3820      	subs	r0, #32
 8009556:	b2c0      	uxtb	r0, r0
 8009558:	4770      	bx	lr
 800955a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800955e:	2b05      	cmp	r3, #5
 8009560:	d801      	bhi.n	8009566 <__hexdig_fun+0x1a>
 8009562:	3847      	subs	r0, #71	; 0x47
 8009564:	e7f7      	b.n	8009556 <__hexdig_fun+0xa>
 8009566:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800956a:	2b05      	cmp	r3, #5
 800956c:	d801      	bhi.n	8009572 <__hexdig_fun+0x26>
 800956e:	3827      	subs	r0, #39	; 0x27
 8009570:	e7f1      	b.n	8009556 <__hexdig_fun+0xa>
 8009572:	2000      	movs	r0, #0
 8009574:	4770      	bx	lr
	...

08009578 <__gethex>:
 8009578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957c:	ed2d 8b02 	vpush	{d8}
 8009580:	b089      	sub	sp, #36	; 0x24
 8009582:	ee08 0a10 	vmov	s16, r0
 8009586:	9304      	str	r3, [sp, #16]
 8009588:	4bbc      	ldr	r3, [pc, #752]	; (800987c <__gethex+0x304>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	9301      	str	r3, [sp, #4]
 800958e:	4618      	mov	r0, r3
 8009590:	468b      	mov	fp, r1
 8009592:	4690      	mov	r8, r2
 8009594:	f7f6 fe1c 	bl	80001d0 <strlen>
 8009598:	9b01      	ldr	r3, [sp, #4]
 800959a:	f8db 2000 	ldr.w	r2, [fp]
 800959e:	4403      	add	r3, r0
 80095a0:	4682      	mov	sl, r0
 80095a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80095a6:	9305      	str	r3, [sp, #20]
 80095a8:	1c93      	adds	r3, r2, #2
 80095aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80095ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80095b2:	32fe      	adds	r2, #254	; 0xfe
 80095b4:	18d1      	adds	r1, r2, r3
 80095b6:	461f      	mov	r7, r3
 80095b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80095bc:	9100      	str	r1, [sp, #0]
 80095be:	2830      	cmp	r0, #48	; 0x30
 80095c0:	d0f8      	beq.n	80095b4 <__gethex+0x3c>
 80095c2:	f7ff ffc3 	bl	800954c <__hexdig_fun>
 80095c6:	4604      	mov	r4, r0
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d13a      	bne.n	8009642 <__gethex+0xca>
 80095cc:	9901      	ldr	r1, [sp, #4]
 80095ce:	4652      	mov	r2, sl
 80095d0:	4638      	mov	r0, r7
 80095d2:	f001 f9ed 	bl	800a9b0 <strncmp>
 80095d6:	4605      	mov	r5, r0
 80095d8:	2800      	cmp	r0, #0
 80095da:	d168      	bne.n	80096ae <__gethex+0x136>
 80095dc:	f817 000a 	ldrb.w	r0, [r7, sl]
 80095e0:	eb07 060a 	add.w	r6, r7, sl
 80095e4:	f7ff ffb2 	bl	800954c <__hexdig_fun>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d062      	beq.n	80096b2 <__gethex+0x13a>
 80095ec:	4633      	mov	r3, r6
 80095ee:	7818      	ldrb	r0, [r3, #0]
 80095f0:	2830      	cmp	r0, #48	; 0x30
 80095f2:	461f      	mov	r7, r3
 80095f4:	f103 0301 	add.w	r3, r3, #1
 80095f8:	d0f9      	beq.n	80095ee <__gethex+0x76>
 80095fa:	f7ff ffa7 	bl	800954c <__hexdig_fun>
 80095fe:	2301      	movs	r3, #1
 8009600:	fab0 f480 	clz	r4, r0
 8009604:	0964      	lsrs	r4, r4, #5
 8009606:	4635      	mov	r5, r6
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	463a      	mov	r2, r7
 800960c:	4616      	mov	r6, r2
 800960e:	3201      	adds	r2, #1
 8009610:	7830      	ldrb	r0, [r6, #0]
 8009612:	f7ff ff9b 	bl	800954c <__hexdig_fun>
 8009616:	2800      	cmp	r0, #0
 8009618:	d1f8      	bne.n	800960c <__gethex+0x94>
 800961a:	9901      	ldr	r1, [sp, #4]
 800961c:	4652      	mov	r2, sl
 800961e:	4630      	mov	r0, r6
 8009620:	f001 f9c6 	bl	800a9b0 <strncmp>
 8009624:	b980      	cbnz	r0, 8009648 <__gethex+0xd0>
 8009626:	b94d      	cbnz	r5, 800963c <__gethex+0xc4>
 8009628:	eb06 050a 	add.w	r5, r6, sl
 800962c:	462a      	mov	r2, r5
 800962e:	4616      	mov	r6, r2
 8009630:	3201      	adds	r2, #1
 8009632:	7830      	ldrb	r0, [r6, #0]
 8009634:	f7ff ff8a 	bl	800954c <__hexdig_fun>
 8009638:	2800      	cmp	r0, #0
 800963a:	d1f8      	bne.n	800962e <__gethex+0xb6>
 800963c:	1bad      	subs	r5, r5, r6
 800963e:	00ad      	lsls	r5, r5, #2
 8009640:	e004      	b.n	800964c <__gethex+0xd4>
 8009642:	2400      	movs	r4, #0
 8009644:	4625      	mov	r5, r4
 8009646:	e7e0      	b.n	800960a <__gethex+0x92>
 8009648:	2d00      	cmp	r5, #0
 800964a:	d1f7      	bne.n	800963c <__gethex+0xc4>
 800964c:	7833      	ldrb	r3, [r6, #0]
 800964e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009652:	2b50      	cmp	r3, #80	; 0x50
 8009654:	d13b      	bne.n	80096ce <__gethex+0x156>
 8009656:	7873      	ldrb	r3, [r6, #1]
 8009658:	2b2b      	cmp	r3, #43	; 0x2b
 800965a:	d02c      	beq.n	80096b6 <__gethex+0x13e>
 800965c:	2b2d      	cmp	r3, #45	; 0x2d
 800965e:	d02e      	beq.n	80096be <__gethex+0x146>
 8009660:	1c71      	adds	r1, r6, #1
 8009662:	f04f 0900 	mov.w	r9, #0
 8009666:	7808      	ldrb	r0, [r1, #0]
 8009668:	f7ff ff70 	bl	800954c <__hexdig_fun>
 800966c:	1e43      	subs	r3, r0, #1
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b18      	cmp	r3, #24
 8009672:	d82c      	bhi.n	80096ce <__gethex+0x156>
 8009674:	f1a0 0210 	sub.w	r2, r0, #16
 8009678:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800967c:	f7ff ff66 	bl	800954c <__hexdig_fun>
 8009680:	1e43      	subs	r3, r0, #1
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b18      	cmp	r3, #24
 8009686:	d91d      	bls.n	80096c4 <__gethex+0x14c>
 8009688:	f1b9 0f00 	cmp.w	r9, #0
 800968c:	d000      	beq.n	8009690 <__gethex+0x118>
 800968e:	4252      	negs	r2, r2
 8009690:	4415      	add	r5, r2
 8009692:	f8cb 1000 	str.w	r1, [fp]
 8009696:	b1e4      	cbz	r4, 80096d2 <__gethex+0x15a>
 8009698:	9b00      	ldr	r3, [sp, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	bf14      	ite	ne
 800969e:	2700      	movne	r7, #0
 80096a0:	2706      	moveq	r7, #6
 80096a2:	4638      	mov	r0, r7
 80096a4:	b009      	add	sp, #36	; 0x24
 80096a6:	ecbd 8b02 	vpop	{d8}
 80096aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ae:	463e      	mov	r6, r7
 80096b0:	4625      	mov	r5, r4
 80096b2:	2401      	movs	r4, #1
 80096b4:	e7ca      	b.n	800964c <__gethex+0xd4>
 80096b6:	f04f 0900 	mov.w	r9, #0
 80096ba:	1cb1      	adds	r1, r6, #2
 80096bc:	e7d3      	b.n	8009666 <__gethex+0xee>
 80096be:	f04f 0901 	mov.w	r9, #1
 80096c2:	e7fa      	b.n	80096ba <__gethex+0x142>
 80096c4:	230a      	movs	r3, #10
 80096c6:	fb03 0202 	mla	r2, r3, r2, r0
 80096ca:	3a10      	subs	r2, #16
 80096cc:	e7d4      	b.n	8009678 <__gethex+0x100>
 80096ce:	4631      	mov	r1, r6
 80096d0:	e7df      	b.n	8009692 <__gethex+0x11a>
 80096d2:	1bf3      	subs	r3, r6, r7
 80096d4:	3b01      	subs	r3, #1
 80096d6:	4621      	mov	r1, r4
 80096d8:	2b07      	cmp	r3, #7
 80096da:	dc0b      	bgt.n	80096f4 <__gethex+0x17c>
 80096dc:	ee18 0a10 	vmov	r0, s16
 80096e0:	f000 fa7e 	bl	8009be0 <_Balloc>
 80096e4:	4604      	mov	r4, r0
 80096e6:	b940      	cbnz	r0, 80096fa <__gethex+0x182>
 80096e8:	4b65      	ldr	r3, [pc, #404]	; (8009880 <__gethex+0x308>)
 80096ea:	4602      	mov	r2, r0
 80096ec:	21de      	movs	r1, #222	; 0xde
 80096ee:	4865      	ldr	r0, [pc, #404]	; (8009884 <__gethex+0x30c>)
 80096f0:	f001 f97e 	bl	800a9f0 <__assert_func>
 80096f4:	3101      	adds	r1, #1
 80096f6:	105b      	asrs	r3, r3, #1
 80096f8:	e7ee      	b.n	80096d8 <__gethex+0x160>
 80096fa:	f100 0914 	add.w	r9, r0, #20
 80096fe:	f04f 0b00 	mov.w	fp, #0
 8009702:	f1ca 0301 	rsb	r3, sl, #1
 8009706:	f8cd 9008 	str.w	r9, [sp, #8]
 800970a:	f8cd b000 	str.w	fp, [sp]
 800970e:	9306      	str	r3, [sp, #24]
 8009710:	42b7      	cmp	r7, r6
 8009712:	d340      	bcc.n	8009796 <__gethex+0x21e>
 8009714:	9802      	ldr	r0, [sp, #8]
 8009716:	9b00      	ldr	r3, [sp, #0]
 8009718:	f840 3b04 	str.w	r3, [r0], #4
 800971c:	eba0 0009 	sub.w	r0, r0, r9
 8009720:	1080      	asrs	r0, r0, #2
 8009722:	0146      	lsls	r6, r0, #5
 8009724:	6120      	str	r0, [r4, #16]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 fb50 	bl	8009dcc <__hi0bits>
 800972c:	1a30      	subs	r0, r6, r0
 800972e:	f8d8 6000 	ldr.w	r6, [r8]
 8009732:	42b0      	cmp	r0, r6
 8009734:	dd63      	ble.n	80097fe <__gethex+0x286>
 8009736:	1b87      	subs	r7, r0, r6
 8009738:	4639      	mov	r1, r7
 800973a:	4620      	mov	r0, r4
 800973c:	f000 feea 	bl	800a514 <__any_on>
 8009740:	4682      	mov	sl, r0
 8009742:	b1a8      	cbz	r0, 8009770 <__gethex+0x1f8>
 8009744:	1e7b      	subs	r3, r7, #1
 8009746:	1159      	asrs	r1, r3, #5
 8009748:	f003 021f 	and.w	r2, r3, #31
 800974c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009750:	f04f 0a01 	mov.w	sl, #1
 8009754:	fa0a f202 	lsl.w	r2, sl, r2
 8009758:	420a      	tst	r2, r1
 800975a:	d009      	beq.n	8009770 <__gethex+0x1f8>
 800975c:	4553      	cmp	r3, sl
 800975e:	dd05      	ble.n	800976c <__gethex+0x1f4>
 8009760:	1eb9      	subs	r1, r7, #2
 8009762:	4620      	mov	r0, r4
 8009764:	f000 fed6 	bl	800a514 <__any_on>
 8009768:	2800      	cmp	r0, #0
 800976a:	d145      	bne.n	80097f8 <__gethex+0x280>
 800976c:	f04f 0a02 	mov.w	sl, #2
 8009770:	4639      	mov	r1, r7
 8009772:	4620      	mov	r0, r4
 8009774:	f7ff fe98 	bl	80094a8 <rshift>
 8009778:	443d      	add	r5, r7
 800977a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800977e:	42ab      	cmp	r3, r5
 8009780:	da4c      	bge.n	800981c <__gethex+0x2a4>
 8009782:	ee18 0a10 	vmov	r0, s16
 8009786:	4621      	mov	r1, r4
 8009788:	f000 fa6a 	bl	8009c60 <_Bfree>
 800978c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800978e:	2300      	movs	r3, #0
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	27a3      	movs	r7, #163	; 0xa3
 8009794:	e785      	b.n	80096a2 <__gethex+0x12a>
 8009796:	1e73      	subs	r3, r6, #1
 8009798:	9a05      	ldr	r2, [sp, #20]
 800979a:	9303      	str	r3, [sp, #12]
 800979c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d019      	beq.n	80097d8 <__gethex+0x260>
 80097a4:	f1bb 0f20 	cmp.w	fp, #32
 80097a8:	d107      	bne.n	80097ba <__gethex+0x242>
 80097aa:	9b02      	ldr	r3, [sp, #8]
 80097ac:	9a00      	ldr	r2, [sp, #0]
 80097ae:	f843 2b04 	str.w	r2, [r3], #4
 80097b2:	9302      	str	r3, [sp, #8]
 80097b4:	2300      	movs	r3, #0
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	469b      	mov	fp, r3
 80097ba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80097be:	f7ff fec5 	bl	800954c <__hexdig_fun>
 80097c2:	9b00      	ldr	r3, [sp, #0]
 80097c4:	f000 000f 	and.w	r0, r0, #15
 80097c8:	fa00 f00b 	lsl.w	r0, r0, fp
 80097cc:	4303      	orrs	r3, r0
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	f10b 0b04 	add.w	fp, fp, #4
 80097d4:	9b03      	ldr	r3, [sp, #12]
 80097d6:	e00d      	b.n	80097f4 <__gethex+0x27c>
 80097d8:	9b03      	ldr	r3, [sp, #12]
 80097da:	9a06      	ldr	r2, [sp, #24]
 80097dc:	4413      	add	r3, r2
 80097de:	42bb      	cmp	r3, r7
 80097e0:	d3e0      	bcc.n	80097a4 <__gethex+0x22c>
 80097e2:	4618      	mov	r0, r3
 80097e4:	9901      	ldr	r1, [sp, #4]
 80097e6:	9307      	str	r3, [sp, #28]
 80097e8:	4652      	mov	r2, sl
 80097ea:	f001 f8e1 	bl	800a9b0 <strncmp>
 80097ee:	9b07      	ldr	r3, [sp, #28]
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d1d7      	bne.n	80097a4 <__gethex+0x22c>
 80097f4:	461e      	mov	r6, r3
 80097f6:	e78b      	b.n	8009710 <__gethex+0x198>
 80097f8:	f04f 0a03 	mov.w	sl, #3
 80097fc:	e7b8      	b.n	8009770 <__gethex+0x1f8>
 80097fe:	da0a      	bge.n	8009816 <__gethex+0x29e>
 8009800:	1a37      	subs	r7, r6, r0
 8009802:	4621      	mov	r1, r4
 8009804:	ee18 0a10 	vmov	r0, s16
 8009808:	463a      	mov	r2, r7
 800980a:	f000 fc45 	bl	800a098 <__lshift>
 800980e:	1bed      	subs	r5, r5, r7
 8009810:	4604      	mov	r4, r0
 8009812:	f100 0914 	add.w	r9, r0, #20
 8009816:	f04f 0a00 	mov.w	sl, #0
 800981a:	e7ae      	b.n	800977a <__gethex+0x202>
 800981c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009820:	42a8      	cmp	r0, r5
 8009822:	dd72      	ble.n	800990a <__gethex+0x392>
 8009824:	1b45      	subs	r5, r0, r5
 8009826:	42ae      	cmp	r6, r5
 8009828:	dc36      	bgt.n	8009898 <__gethex+0x320>
 800982a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800982e:	2b02      	cmp	r3, #2
 8009830:	d02a      	beq.n	8009888 <__gethex+0x310>
 8009832:	2b03      	cmp	r3, #3
 8009834:	d02c      	beq.n	8009890 <__gethex+0x318>
 8009836:	2b01      	cmp	r3, #1
 8009838:	d115      	bne.n	8009866 <__gethex+0x2ee>
 800983a:	42ae      	cmp	r6, r5
 800983c:	d113      	bne.n	8009866 <__gethex+0x2ee>
 800983e:	2e01      	cmp	r6, #1
 8009840:	d10b      	bne.n	800985a <__gethex+0x2e2>
 8009842:	9a04      	ldr	r2, [sp, #16]
 8009844:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009848:	6013      	str	r3, [r2, #0]
 800984a:	2301      	movs	r3, #1
 800984c:	6123      	str	r3, [r4, #16]
 800984e:	f8c9 3000 	str.w	r3, [r9]
 8009852:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009854:	2762      	movs	r7, #98	; 0x62
 8009856:	601c      	str	r4, [r3, #0]
 8009858:	e723      	b.n	80096a2 <__gethex+0x12a>
 800985a:	1e71      	subs	r1, r6, #1
 800985c:	4620      	mov	r0, r4
 800985e:	f000 fe59 	bl	800a514 <__any_on>
 8009862:	2800      	cmp	r0, #0
 8009864:	d1ed      	bne.n	8009842 <__gethex+0x2ca>
 8009866:	ee18 0a10 	vmov	r0, s16
 800986a:	4621      	mov	r1, r4
 800986c:	f000 f9f8 	bl	8009c60 <_Bfree>
 8009870:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009872:	2300      	movs	r3, #0
 8009874:	6013      	str	r3, [r2, #0]
 8009876:	2750      	movs	r7, #80	; 0x50
 8009878:	e713      	b.n	80096a2 <__gethex+0x12a>
 800987a:	bf00      	nop
 800987c:	0800b830 	.word	0x0800b830
 8009880:	0800b7b4 	.word	0x0800b7b4
 8009884:	0800b7c5 	.word	0x0800b7c5
 8009888:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1eb      	bne.n	8009866 <__gethex+0x2ee>
 800988e:	e7d8      	b.n	8009842 <__gethex+0x2ca>
 8009890:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1d5      	bne.n	8009842 <__gethex+0x2ca>
 8009896:	e7e6      	b.n	8009866 <__gethex+0x2ee>
 8009898:	1e6f      	subs	r7, r5, #1
 800989a:	f1ba 0f00 	cmp.w	sl, #0
 800989e:	d131      	bne.n	8009904 <__gethex+0x38c>
 80098a0:	b127      	cbz	r7, 80098ac <__gethex+0x334>
 80098a2:	4639      	mov	r1, r7
 80098a4:	4620      	mov	r0, r4
 80098a6:	f000 fe35 	bl	800a514 <__any_on>
 80098aa:	4682      	mov	sl, r0
 80098ac:	117b      	asrs	r3, r7, #5
 80098ae:	2101      	movs	r1, #1
 80098b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80098b4:	f007 071f 	and.w	r7, r7, #31
 80098b8:	fa01 f707 	lsl.w	r7, r1, r7
 80098bc:	421f      	tst	r7, r3
 80098be:	4629      	mov	r1, r5
 80098c0:	4620      	mov	r0, r4
 80098c2:	bf18      	it	ne
 80098c4:	f04a 0a02 	orrne.w	sl, sl, #2
 80098c8:	1b76      	subs	r6, r6, r5
 80098ca:	f7ff fded 	bl	80094a8 <rshift>
 80098ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80098d2:	2702      	movs	r7, #2
 80098d4:	f1ba 0f00 	cmp.w	sl, #0
 80098d8:	d048      	beq.n	800996c <__gethex+0x3f4>
 80098da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d015      	beq.n	800990e <__gethex+0x396>
 80098e2:	2b03      	cmp	r3, #3
 80098e4:	d017      	beq.n	8009916 <__gethex+0x39e>
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d109      	bne.n	80098fe <__gethex+0x386>
 80098ea:	f01a 0f02 	tst.w	sl, #2
 80098ee:	d006      	beq.n	80098fe <__gethex+0x386>
 80098f0:	f8d9 0000 	ldr.w	r0, [r9]
 80098f4:	ea4a 0a00 	orr.w	sl, sl, r0
 80098f8:	f01a 0f01 	tst.w	sl, #1
 80098fc:	d10e      	bne.n	800991c <__gethex+0x3a4>
 80098fe:	f047 0710 	orr.w	r7, r7, #16
 8009902:	e033      	b.n	800996c <__gethex+0x3f4>
 8009904:	f04f 0a01 	mov.w	sl, #1
 8009908:	e7d0      	b.n	80098ac <__gethex+0x334>
 800990a:	2701      	movs	r7, #1
 800990c:	e7e2      	b.n	80098d4 <__gethex+0x35c>
 800990e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009910:	f1c3 0301 	rsb	r3, r3, #1
 8009914:	9315      	str	r3, [sp, #84]	; 0x54
 8009916:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009918:	2b00      	cmp	r3, #0
 800991a:	d0f0      	beq.n	80098fe <__gethex+0x386>
 800991c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009920:	f104 0314 	add.w	r3, r4, #20
 8009924:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009928:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800992c:	f04f 0c00 	mov.w	ip, #0
 8009930:	4618      	mov	r0, r3
 8009932:	f853 2b04 	ldr.w	r2, [r3], #4
 8009936:	f1b2 3fff 	cmp.w	r2, #4294967295
 800993a:	d01c      	beq.n	8009976 <__gethex+0x3fe>
 800993c:	3201      	adds	r2, #1
 800993e:	6002      	str	r2, [r0, #0]
 8009940:	2f02      	cmp	r7, #2
 8009942:	f104 0314 	add.w	r3, r4, #20
 8009946:	d13f      	bne.n	80099c8 <__gethex+0x450>
 8009948:	f8d8 2000 	ldr.w	r2, [r8]
 800994c:	3a01      	subs	r2, #1
 800994e:	42b2      	cmp	r2, r6
 8009950:	d10a      	bne.n	8009968 <__gethex+0x3f0>
 8009952:	1171      	asrs	r1, r6, #5
 8009954:	2201      	movs	r2, #1
 8009956:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800995a:	f006 061f 	and.w	r6, r6, #31
 800995e:	fa02 f606 	lsl.w	r6, r2, r6
 8009962:	421e      	tst	r6, r3
 8009964:	bf18      	it	ne
 8009966:	4617      	movne	r7, r2
 8009968:	f047 0720 	orr.w	r7, r7, #32
 800996c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800996e:	601c      	str	r4, [r3, #0]
 8009970:	9b04      	ldr	r3, [sp, #16]
 8009972:	601d      	str	r5, [r3, #0]
 8009974:	e695      	b.n	80096a2 <__gethex+0x12a>
 8009976:	4299      	cmp	r1, r3
 8009978:	f843 cc04 	str.w	ip, [r3, #-4]
 800997c:	d8d8      	bhi.n	8009930 <__gethex+0x3b8>
 800997e:	68a3      	ldr	r3, [r4, #8]
 8009980:	459b      	cmp	fp, r3
 8009982:	db19      	blt.n	80099b8 <__gethex+0x440>
 8009984:	6861      	ldr	r1, [r4, #4]
 8009986:	ee18 0a10 	vmov	r0, s16
 800998a:	3101      	adds	r1, #1
 800998c:	f000 f928 	bl	8009be0 <_Balloc>
 8009990:	4681      	mov	r9, r0
 8009992:	b918      	cbnz	r0, 800999c <__gethex+0x424>
 8009994:	4b1a      	ldr	r3, [pc, #104]	; (8009a00 <__gethex+0x488>)
 8009996:	4602      	mov	r2, r0
 8009998:	2184      	movs	r1, #132	; 0x84
 800999a:	e6a8      	b.n	80096ee <__gethex+0x176>
 800999c:	6922      	ldr	r2, [r4, #16]
 800999e:	3202      	adds	r2, #2
 80099a0:	f104 010c 	add.w	r1, r4, #12
 80099a4:	0092      	lsls	r2, r2, #2
 80099a6:	300c      	adds	r0, #12
 80099a8:	f000 f90c 	bl	8009bc4 <memcpy>
 80099ac:	4621      	mov	r1, r4
 80099ae:	ee18 0a10 	vmov	r0, s16
 80099b2:	f000 f955 	bl	8009c60 <_Bfree>
 80099b6:	464c      	mov	r4, r9
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80099c0:	6122      	str	r2, [r4, #16]
 80099c2:	2201      	movs	r2, #1
 80099c4:	615a      	str	r2, [r3, #20]
 80099c6:	e7bb      	b.n	8009940 <__gethex+0x3c8>
 80099c8:	6922      	ldr	r2, [r4, #16]
 80099ca:	455a      	cmp	r2, fp
 80099cc:	dd0b      	ble.n	80099e6 <__gethex+0x46e>
 80099ce:	2101      	movs	r1, #1
 80099d0:	4620      	mov	r0, r4
 80099d2:	f7ff fd69 	bl	80094a8 <rshift>
 80099d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099da:	3501      	adds	r5, #1
 80099dc:	42ab      	cmp	r3, r5
 80099de:	f6ff aed0 	blt.w	8009782 <__gethex+0x20a>
 80099e2:	2701      	movs	r7, #1
 80099e4:	e7c0      	b.n	8009968 <__gethex+0x3f0>
 80099e6:	f016 061f 	ands.w	r6, r6, #31
 80099ea:	d0fa      	beq.n	80099e2 <__gethex+0x46a>
 80099ec:	449a      	add	sl, r3
 80099ee:	f1c6 0620 	rsb	r6, r6, #32
 80099f2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80099f6:	f000 f9e9 	bl	8009dcc <__hi0bits>
 80099fa:	42b0      	cmp	r0, r6
 80099fc:	dbe7      	blt.n	80099ce <__gethex+0x456>
 80099fe:	e7f0      	b.n	80099e2 <__gethex+0x46a>
 8009a00:	0800b7b4 	.word	0x0800b7b4

08009a04 <L_shift>:
 8009a04:	f1c2 0208 	rsb	r2, r2, #8
 8009a08:	0092      	lsls	r2, r2, #2
 8009a0a:	b570      	push	{r4, r5, r6, lr}
 8009a0c:	f1c2 0620 	rsb	r6, r2, #32
 8009a10:	6843      	ldr	r3, [r0, #4]
 8009a12:	6804      	ldr	r4, [r0, #0]
 8009a14:	fa03 f506 	lsl.w	r5, r3, r6
 8009a18:	432c      	orrs	r4, r5
 8009a1a:	40d3      	lsrs	r3, r2
 8009a1c:	6004      	str	r4, [r0, #0]
 8009a1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009a22:	4288      	cmp	r0, r1
 8009a24:	d3f4      	bcc.n	8009a10 <L_shift+0xc>
 8009a26:	bd70      	pop	{r4, r5, r6, pc}

08009a28 <__match>:
 8009a28:	b530      	push	{r4, r5, lr}
 8009a2a:	6803      	ldr	r3, [r0, #0]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a32:	b914      	cbnz	r4, 8009a3a <__match+0x12>
 8009a34:	6003      	str	r3, [r0, #0]
 8009a36:	2001      	movs	r0, #1
 8009a38:	bd30      	pop	{r4, r5, pc}
 8009a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009a42:	2d19      	cmp	r5, #25
 8009a44:	bf98      	it	ls
 8009a46:	3220      	addls	r2, #32
 8009a48:	42a2      	cmp	r2, r4
 8009a4a:	d0f0      	beq.n	8009a2e <__match+0x6>
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	e7f3      	b.n	8009a38 <__match+0x10>

08009a50 <__hexnan>:
 8009a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a54:	680b      	ldr	r3, [r1, #0]
 8009a56:	6801      	ldr	r1, [r0, #0]
 8009a58:	115e      	asrs	r6, r3, #5
 8009a5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009a5e:	f013 031f 	ands.w	r3, r3, #31
 8009a62:	b087      	sub	sp, #28
 8009a64:	bf18      	it	ne
 8009a66:	3604      	addne	r6, #4
 8009a68:	2500      	movs	r5, #0
 8009a6a:	1f37      	subs	r7, r6, #4
 8009a6c:	4682      	mov	sl, r0
 8009a6e:	4690      	mov	r8, r2
 8009a70:	9301      	str	r3, [sp, #4]
 8009a72:	f846 5c04 	str.w	r5, [r6, #-4]
 8009a76:	46b9      	mov	r9, r7
 8009a78:	463c      	mov	r4, r7
 8009a7a:	9502      	str	r5, [sp, #8]
 8009a7c:	46ab      	mov	fp, r5
 8009a7e:	784a      	ldrb	r2, [r1, #1]
 8009a80:	1c4b      	adds	r3, r1, #1
 8009a82:	9303      	str	r3, [sp, #12]
 8009a84:	b342      	cbz	r2, 8009ad8 <__hexnan+0x88>
 8009a86:	4610      	mov	r0, r2
 8009a88:	9105      	str	r1, [sp, #20]
 8009a8a:	9204      	str	r2, [sp, #16]
 8009a8c:	f7ff fd5e 	bl	800954c <__hexdig_fun>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d14f      	bne.n	8009b34 <__hexnan+0xe4>
 8009a94:	9a04      	ldr	r2, [sp, #16]
 8009a96:	9905      	ldr	r1, [sp, #20]
 8009a98:	2a20      	cmp	r2, #32
 8009a9a:	d818      	bhi.n	8009ace <__hexnan+0x7e>
 8009a9c:	9b02      	ldr	r3, [sp, #8]
 8009a9e:	459b      	cmp	fp, r3
 8009aa0:	dd13      	ble.n	8009aca <__hexnan+0x7a>
 8009aa2:	454c      	cmp	r4, r9
 8009aa4:	d206      	bcs.n	8009ab4 <__hexnan+0x64>
 8009aa6:	2d07      	cmp	r5, #7
 8009aa8:	dc04      	bgt.n	8009ab4 <__hexnan+0x64>
 8009aaa:	462a      	mov	r2, r5
 8009aac:	4649      	mov	r1, r9
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f7ff ffa8 	bl	8009a04 <L_shift>
 8009ab4:	4544      	cmp	r4, r8
 8009ab6:	d950      	bls.n	8009b5a <__hexnan+0x10a>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	f1a4 0904 	sub.w	r9, r4, #4
 8009abe:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ac2:	f8cd b008 	str.w	fp, [sp, #8]
 8009ac6:	464c      	mov	r4, r9
 8009ac8:	461d      	mov	r5, r3
 8009aca:	9903      	ldr	r1, [sp, #12]
 8009acc:	e7d7      	b.n	8009a7e <__hexnan+0x2e>
 8009ace:	2a29      	cmp	r2, #41	; 0x29
 8009ad0:	d156      	bne.n	8009b80 <__hexnan+0x130>
 8009ad2:	3102      	adds	r1, #2
 8009ad4:	f8ca 1000 	str.w	r1, [sl]
 8009ad8:	f1bb 0f00 	cmp.w	fp, #0
 8009adc:	d050      	beq.n	8009b80 <__hexnan+0x130>
 8009ade:	454c      	cmp	r4, r9
 8009ae0:	d206      	bcs.n	8009af0 <__hexnan+0xa0>
 8009ae2:	2d07      	cmp	r5, #7
 8009ae4:	dc04      	bgt.n	8009af0 <__hexnan+0xa0>
 8009ae6:	462a      	mov	r2, r5
 8009ae8:	4649      	mov	r1, r9
 8009aea:	4620      	mov	r0, r4
 8009aec:	f7ff ff8a 	bl	8009a04 <L_shift>
 8009af0:	4544      	cmp	r4, r8
 8009af2:	d934      	bls.n	8009b5e <__hexnan+0x10e>
 8009af4:	f1a8 0204 	sub.w	r2, r8, #4
 8009af8:	4623      	mov	r3, r4
 8009afa:	f853 1b04 	ldr.w	r1, [r3], #4
 8009afe:	f842 1f04 	str.w	r1, [r2, #4]!
 8009b02:	429f      	cmp	r7, r3
 8009b04:	d2f9      	bcs.n	8009afa <__hexnan+0xaa>
 8009b06:	1b3b      	subs	r3, r7, r4
 8009b08:	f023 0303 	bic.w	r3, r3, #3
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	3401      	adds	r4, #1
 8009b10:	3e03      	subs	r6, #3
 8009b12:	42b4      	cmp	r4, r6
 8009b14:	bf88      	it	hi
 8009b16:	2304      	movhi	r3, #4
 8009b18:	4443      	add	r3, r8
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f843 2b04 	str.w	r2, [r3], #4
 8009b20:	429f      	cmp	r7, r3
 8009b22:	d2fb      	bcs.n	8009b1c <__hexnan+0xcc>
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	b91b      	cbnz	r3, 8009b30 <__hexnan+0xe0>
 8009b28:	4547      	cmp	r7, r8
 8009b2a:	d127      	bne.n	8009b7c <__hexnan+0x12c>
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	603b      	str	r3, [r7, #0]
 8009b30:	2005      	movs	r0, #5
 8009b32:	e026      	b.n	8009b82 <__hexnan+0x132>
 8009b34:	3501      	adds	r5, #1
 8009b36:	2d08      	cmp	r5, #8
 8009b38:	f10b 0b01 	add.w	fp, fp, #1
 8009b3c:	dd06      	ble.n	8009b4c <__hexnan+0xfc>
 8009b3e:	4544      	cmp	r4, r8
 8009b40:	d9c3      	bls.n	8009aca <__hexnan+0x7a>
 8009b42:	2300      	movs	r3, #0
 8009b44:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b48:	2501      	movs	r5, #1
 8009b4a:	3c04      	subs	r4, #4
 8009b4c:	6822      	ldr	r2, [r4, #0]
 8009b4e:	f000 000f 	and.w	r0, r0, #15
 8009b52:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009b56:	6022      	str	r2, [r4, #0]
 8009b58:	e7b7      	b.n	8009aca <__hexnan+0x7a>
 8009b5a:	2508      	movs	r5, #8
 8009b5c:	e7b5      	b.n	8009aca <__hexnan+0x7a>
 8009b5e:	9b01      	ldr	r3, [sp, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d0df      	beq.n	8009b24 <__hexnan+0xd4>
 8009b64:	f04f 32ff 	mov.w	r2, #4294967295
 8009b68:	f1c3 0320 	rsb	r3, r3, #32
 8009b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009b74:	401a      	ands	r2, r3
 8009b76:	f846 2c04 	str.w	r2, [r6, #-4]
 8009b7a:	e7d3      	b.n	8009b24 <__hexnan+0xd4>
 8009b7c:	3f04      	subs	r7, #4
 8009b7e:	e7d1      	b.n	8009b24 <__hexnan+0xd4>
 8009b80:	2004      	movs	r0, #4
 8009b82:	b007      	add	sp, #28
 8009b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b88 <_localeconv_r>:
 8009b88:	4800      	ldr	r0, [pc, #0]	; (8009b8c <_localeconv_r+0x4>)
 8009b8a:	4770      	bx	lr
 8009b8c:	20000598 	.word	0x20000598

08009b90 <malloc>:
 8009b90:	4b02      	ldr	r3, [pc, #8]	; (8009b9c <malloc+0xc>)
 8009b92:	4601      	mov	r1, r0
 8009b94:	6818      	ldr	r0, [r3, #0]
 8009b96:	f000 bd3d 	b.w	800a614 <_malloc_r>
 8009b9a:	bf00      	nop
 8009b9c:	20000440 	.word	0x20000440

08009ba0 <__ascii_mbtowc>:
 8009ba0:	b082      	sub	sp, #8
 8009ba2:	b901      	cbnz	r1, 8009ba6 <__ascii_mbtowc+0x6>
 8009ba4:	a901      	add	r1, sp, #4
 8009ba6:	b142      	cbz	r2, 8009bba <__ascii_mbtowc+0x1a>
 8009ba8:	b14b      	cbz	r3, 8009bbe <__ascii_mbtowc+0x1e>
 8009baa:	7813      	ldrb	r3, [r2, #0]
 8009bac:	600b      	str	r3, [r1, #0]
 8009bae:	7812      	ldrb	r2, [r2, #0]
 8009bb0:	1e10      	subs	r0, r2, #0
 8009bb2:	bf18      	it	ne
 8009bb4:	2001      	movne	r0, #1
 8009bb6:	b002      	add	sp, #8
 8009bb8:	4770      	bx	lr
 8009bba:	4610      	mov	r0, r2
 8009bbc:	e7fb      	b.n	8009bb6 <__ascii_mbtowc+0x16>
 8009bbe:	f06f 0001 	mvn.w	r0, #1
 8009bc2:	e7f8      	b.n	8009bb6 <__ascii_mbtowc+0x16>

08009bc4 <memcpy>:
 8009bc4:	440a      	add	r2, r1
 8009bc6:	4291      	cmp	r1, r2
 8009bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bcc:	d100      	bne.n	8009bd0 <memcpy+0xc>
 8009bce:	4770      	bx	lr
 8009bd0:	b510      	push	{r4, lr}
 8009bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bda:	4291      	cmp	r1, r2
 8009bdc:	d1f9      	bne.n	8009bd2 <memcpy+0xe>
 8009bde:	bd10      	pop	{r4, pc}

08009be0 <_Balloc>:
 8009be0:	b570      	push	{r4, r5, r6, lr}
 8009be2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009be4:	4604      	mov	r4, r0
 8009be6:	460d      	mov	r5, r1
 8009be8:	b976      	cbnz	r6, 8009c08 <_Balloc+0x28>
 8009bea:	2010      	movs	r0, #16
 8009bec:	f7ff ffd0 	bl	8009b90 <malloc>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	6260      	str	r0, [r4, #36]	; 0x24
 8009bf4:	b920      	cbnz	r0, 8009c00 <_Balloc+0x20>
 8009bf6:	4b18      	ldr	r3, [pc, #96]	; (8009c58 <_Balloc+0x78>)
 8009bf8:	4818      	ldr	r0, [pc, #96]	; (8009c5c <_Balloc+0x7c>)
 8009bfa:	2166      	movs	r1, #102	; 0x66
 8009bfc:	f000 fef8 	bl	800a9f0 <__assert_func>
 8009c00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c04:	6006      	str	r6, [r0, #0]
 8009c06:	60c6      	str	r6, [r0, #12]
 8009c08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009c0a:	68f3      	ldr	r3, [r6, #12]
 8009c0c:	b183      	cbz	r3, 8009c30 <_Balloc+0x50>
 8009c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c16:	b9b8      	cbnz	r0, 8009c48 <_Balloc+0x68>
 8009c18:	2101      	movs	r1, #1
 8009c1a:	fa01 f605 	lsl.w	r6, r1, r5
 8009c1e:	1d72      	adds	r2, r6, #5
 8009c20:	0092      	lsls	r2, r2, #2
 8009c22:	4620      	mov	r0, r4
 8009c24:	f000 fc97 	bl	800a556 <_calloc_r>
 8009c28:	b160      	cbz	r0, 8009c44 <_Balloc+0x64>
 8009c2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c2e:	e00e      	b.n	8009c4e <_Balloc+0x6e>
 8009c30:	2221      	movs	r2, #33	; 0x21
 8009c32:	2104      	movs	r1, #4
 8009c34:	4620      	mov	r0, r4
 8009c36:	f000 fc8e 	bl	800a556 <_calloc_r>
 8009c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c3c:	60f0      	str	r0, [r6, #12]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1e4      	bne.n	8009c0e <_Balloc+0x2e>
 8009c44:	2000      	movs	r0, #0
 8009c46:	bd70      	pop	{r4, r5, r6, pc}
 8009c48:	6802      	ldr	r2, [r0, #0]
 8009c4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c4e:	2300      	movs	r3, #0
 8009c50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c54:	e7f7      	b.n	8009c46 <_Balloc+0x66>
 8009c56:	bf00      	nop
 8009c58:	0800b73e 	.word	0x0800b73e
 8009c5c:	0800b844 	.word	0x0800b844

08009c60 <_Bfree>:
 8009c60:	b570      	push	{r4, r5, r6, lr}
 8009c62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c64:	4605      	mov	r5, r0
 8009c66:	460c      	mov	r4, r1
 8009c68:	b976      	cbnz	r6, 8009c88 <_Bfree+0x28>
 8009c6a:	2010      	movs	r0, #16
 8009c6c:	f7ff ff90 	bl	8009b90 <malloc>
 8009c70:	4602      	mov	r2, r0
 8009c72:	6268      	str	r0, [r5, #36]	; 0x24
 8009c74:	b920      	cbnz	r0, 8009c80 <_Bfree+0x20>
 8009c76:	4b09      	ldr	r3, [pc, #36]	; (8009c9c <_Bfree+0x3c>)
 8009c78:	4809      	ldr	r0, [pc, #36]	; (8009ca0 <_Bfree+0x40>)
 8009c7a:	218a      	movs	r1, #138	; 0x8a
 8009c7c:	f000 feb8 	bl	800a9f0 <__assert_func>
 8009c80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c84:	6006      	str	r6, [r0, #0]
 8009c86:	60c6      	str	r6, [r0, #12]
 8009c88:	b13c      	cbz	r4, 8009c9a <_Bfree+0x3a>
 8009c8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c8c:	6862      	ldr	r2, [r4, #4]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c94:	6021      	str	r1, [r4, #0]
 8009c96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c9a:	bd70      	pop	{r4, r5, r6, pc}
 8009c9c:	0800b73e 	.word	0x0800b73e
 8009ca0:	0800b844 	.word	0x0800b844

08009ca4 <__multadd>:
 8009ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca8:	690e      	ldr	r6, [r1, #16]
 8009caa:	4607      	mov	r7, r0
 8009cac:	4698      	mov	r8, r3
 8009cae:	460c      	mov	r4, r1
 8009cb0:	f101 0014 	add.w	r0, r1, #20
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	6805      	ldr	r5, [r0, #0]
 8009cb8:	b2a9      	uxth	r1, r5
 8009cba:	fb02 8101 	mla	r1, r2, r1, r8
 8009cbe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009cc2:	0c2d      	lsrs	r5, r5, #16
 8009cc4:	fb02 c505 	mla	r5, r2, r5, ip
 8009cc8:	b289      	uxth	r1, r1
 8009cca:	3301      	adds	r3, #1
 8009ccc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009cd0:	429e      	cmp	r6, r3
 8009cd2:	f840 1b04 	str.w	r1, [r0], #4
 8009cd6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009cda:	dcec      	bgt.n	8009cb6 <__multadd+0x12>
 8009cdc:	f1b8 0f00 	cmp.w	r8, #0
 8009ce0:	d022      	beq.n	8009d28 <__multadd+0x84>
 8009ce2:	68a3      	ldr	r3, [r4, #8]
 8009ce4:	42b3      	cmp	r3, r6
 8009ce6:	dc19      	bgt.n	8009d1c <__multadd+0x78>
 8009ce8:	6861      	ldr	r1, [r4, #4]
 8009cea:	4638      	mov	r0, r7
 8009cec:	3101      	adds	r1, #1
 8009cee:	f7ff ff77 	bl	8009be0 <_Balloc>
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	b928      	cbnz	r0, 8009d02 <__multadd+0x5e>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	4b0d      	ldr	r3, [pc, #52]	; (8009d30 <__multadd+0x8c>)
 8009cfa:	480e      	ldr	r0, [pc, #56]	; (8009d34 <__multadd+0x90>)
 8009cfc:	21b5      	movs	r1, #181	; 0xb5
 8009cfe:	f000 fe77 	bl	800a9f0 <__assert_func>
 8009d02:	6922      	ldr	r2, [r4, #16]
 8009d04:	3202      	adds	r2, #2
 8009d06:	f104 010c 	add.w	r1, r4, #12
 8009d0a:	0092      	lsls	r2, r2, #2
 8009d0c:	300c      	adds	r0, #12
 8009d0e:	f7ff ff59 	bl	8009bc4 <memcpy>
 8009d12:	4621      	mov	r1, r4
 8009d14:	4638      	mov	r0, r7
 8009d16:	f7ff ffa3 	bl	8009c60 <_Bfree>
 8009d1a:	462c      	mov	r4, r5
 8009d1c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009d20:	3601      	adds	r6, #1
 8009d22:	f8c3 8014 	str.w	r8, [r3, #20]
 8009d26:	6126      	str	r6, [r4, #16]
 8009d28:	4620      	mov	r0, r4
 8009d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d2e:	bf00      	nop
 8009d30:	0800b7b4 	.word	0x0800b7b4
 8009d34:	0800b844 	.word	0x0800b844

08009d38 <__s2b>:
 8009d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	4615      	mov	r5, r2
 8009d40:	461f      	mov	r7, r3
 8009d42:	2209      	movs	r2, #9
 8009d44:	3308      	adds	r3, #8
 8009d46:	4606      	mov	r6, r0
 8009d48:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	2201      	movs	r2, #1
 8009d50:	429a      	cmp	r2, r3
 8009d52:	db09      	blt.n	8009d68 <__s2b+0x30>
 8009d54:	4630      	mov	r0, r6
 8009d56:	f7ff ff43 	bl	8009be0 <_Balloc>
 8009d5a:	b940      	cbnz	r0, 8009d6e <__s2b+0x36>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	4b19      	ldr	r3, [pc, #100]	; (8009dc4 <__s2b+0x8c>)
 8009d60:	4819      	ldr	r0, [pc, #100]	; (8009dc8 <__s2b+0x90>)
 8009d62:	21ce      	movs	r1, #206	; 0xce
 8009d64:	f000 fe44 	bl	800a9f0 <__assert_func>
 8009d68:	0052      	lsls	r2, r2, #1
 8009d6a:	3101      	adds	r1, #1
 8009d6c:	e7f0      	b.n	8009d50 <__s2b+0x18>
 8009d6e:	9b08      	ldr	r3, [sp, #32]
 8009d70:	6143      	str	r3, [r0, #20]
 8009d72:	2d09      	cmp	r5, #9
 8009d74:	f04f 0301 	mov.w	r3, #1
 8009d78:	6103      	str	r3, [r0, #16]
 8009d7a:	dd16      	ble.n	8009daa <__s2b+0x72>
 8009d7c:	f104 0909 	add.w	r9, r4, #9
 8009d80:	46c8      	mov	r8, r9
 8009d82:	442c      	add	r4, r5
 8009d84:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009d88:	4601      	mov	r1, r0
 8009d8a:	3b30      	subs	r3, #48	; 0x30
 8009d8c:	220a      	movs	r2, #10
 8009d8e:	4630      	mov	r0, r6
 8009d90:	f7ff ff88 	bl	8009ca4 <__multadd>
 8009d94:	45a0      	cmp	r8, r4
 8009d96:	d1f5      	bne.n	8009d84 <__s2b+0x4c>
 8009d98:	f1a5 0408 	sub.w	r4, r5, #8
 8009d9c:	444c      	add	r4, r9
 8009d9e:	1b2d      	subs	r5, r5, r4
 8009da0:	1963      	adds	r3, r4, r5
 8009da2:	42bb      	cmp	r3, r7
 8009da4:	db04      	blt.n	8009db0 <__s2b+0x78>
 8009da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009daa:	340a      	adds	r4, #10
 8009dac:	2509      	movs	r5, #9
 8009dae:	e7f6      	b.n	8009d9e <__s2b+0x66>
 8009db0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009db4:	4601      	mov	r1, r0
 8009db6:	3b30      	subs	r3, #48	; 0x30
 8009db8:	220a      	movs	r2, #10
 8009dba:	4630      	mov	r0, r6
 8009dbc:	f7ff ff72 	bl	8009ca4 <__multadd>
 8009dc0:	e7ee      	b.n	8009da0 <__s2b+0x68>
 8009dc2:	bf00      	nop
 8009dc4:	0800b7b4 	.word	0x0800b7b4
 8009dc8:	0800b844 	.word	0x0800b844

08009dcc <__hi0bits>:
 8009dcc:	0c03      	lsrs	r3, r0, #16
 8009dce:	041b      	lsls	r3, r3, #16
 8009dd0:	b9d3      	cbnz	r3, 8009e08 <__hi0bits+0x3c>
 8009dd2:	0400      	lsls	r0, r0, #16
 8009dd4:	2310      	movs	r3, #16
 8009dd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009dda:	bf04      	itt	eq
 8009ddc:	0200      	lsleq	r0, r0, #8
 8009dde:	3308      	addeq	r3, #8
 8009de0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009de4:	bf04      	itt	eq
 8009de6:	0100      	lsleq	r0, r0, #4
 8009de8:	3304      	addeq	r3, #4
 8009dea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009dee:	bf04      	itt	eq
 8009df0:	0080      	lsleq	r0, r0, #2
 8009df2:	3302      	addeq	r3, #2
 8009df4:	2800      	cmp	r0, #0
 8009df6:	db05      	blt.n	8009e04 <__hi0bits+0x38>
 8009df8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009dfc:	f103 0301 	add.w	r3, r3, #1
 8009e00:	bf08      	it	eq
 8009e02:	2320      	moveq	r3, #32
 8009e04:	4618      	mov	r0, r3
 8009e06:	4770      	bx	lr
 8009e08:	2300      	movs	r3, #0
 8009e0a:	e7e4      	b.n	8009dd6 <__hi0bits+0xa>

08009e0c <__lo0bits>:
 8009e0c:	6803      	ldr	r3, [r0, #0]
 8009e0e:	f013 0207 	ands.w	r2, r3, #7
 8009e12:	4601      	mov	r1, r0
 8009e14:	d00b      	beq.n	8009e2e <__lo0bits+0x22>
 8009e16:	07da      	lsls	r2, r3, #31
 8009e18:	d424      	bmi.n	8009e64 <__lo0bits+0x58>
 8009e1a:	0798      	lsls	r0, r3, #30
 8009e1c:	bf49      	itett	mi
 8009e1e:	085b      	lsrmi	r3, r3, #1
 8009e20:	089b      	lsrpl	r3, r3, #2
 8009e22:	2001      	movmi	r0, #1
 8009e24:	600b      	strmi	r3, [r1, #0]
 8009e26:	bf5c      	itt	pl
 8009e28:	600b      	strpl	r3, [r1, #0]
 8009e2a:	2002      	movpl	r0, #2
 8009e2c:	4770      	bx	lr
 8009e2e:	b298      	uxth	r0, r3
 8009e30:	b9b0      	cbnz	r0, 8009e60 <__lo0bits+0x54>
 8009e32:	0c1b      	lsrs	r3, r3, #16
 8009e34:	2010      	movs	r0, #16
 8009e36:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009e3a:	bf04      	itt	eq
 8009e3c:	0a1b      	lsreq	r3, r3, #8
 8009e3e:	3008      	addeq	r0, #8
 8009e40:	071a      	lsls	r2, r3, #28
 8009e42:	bf04      	itt	eq
 8009e44:	091b      	lsreq	r3, r3, #4
 8009e46:	3004      	addeq	r0, #4
 8009e48:	079a      	lsls	r2, r3, #30
 8009e4a:	bf04      	itt	eq
 8009e4c:	089b      	lsreq	r3, r3, #2
 8009e4e:	3002      	addeq	r0, #2
 8009e50:	07da      	lsls	r2, r3, #31
 8009e52:	d403      	bmi.n	8009e5c <__lo0bits+0x50>
 8009e54:	085b      	lsrs	r3, r3, #1
 8009e56:	f100 0001 	add.w	r0, r0, #1
 8009e5a:	d005      	beq.n	8009e68 <__lo0bits+0x5c>
 8009e5c:	600b      	str	r3, [r1, #0]
 8009e5e:	4770      	bx	lr
 8009e60:	4610      	mov	r0, r2
 8009e62:	e7e8      	b.n	8009e36 <__lo0bits+0x2a>
 8009e64:	2000      	movs	r0, #0
 8009e66:	4770      	bx	lr
 8009e68:	2020      	movs	r0, #32
 8009e6a:	4770      	bx	lr

08009e6c <__i2b>:
 8009e6c:	b510      	push	{r4, lr}
 8009e6e:	460c      	mov	r4, r1
 8009e70:	2101      	movs	r1, #1
 8009e72:	f7ff feb5 	bl	8009be0 <_Balloc>
 8009e76:	4602      	mov	r2, r0
 8009e78:	b928      	cbnz	r0, 8009e86 <__i2b+0x1a>
 8009e7a:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <__i2b+0x24>)
 8009e7c:	4805      	ldr	r0, [pc, #20]	; (8009e94 <__i2b+0x28>)
 8009e7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009e82:	f000 fdb5 	bl	800a9f0 <__assert_func>
 8009e86:	2301      	movs	r3, #1
 8009e88:	6144      	str	r4, [r0, #20]
 8009e8a:	6103      	str	r3, [r0, #16]
 8009e8c:	bd10      	pop	{r4, pc}
 8009e8e:	bf00      	nop
 8009e90:	0800b7b4 	.word	0x0800b7b4
 8009e94:	0800b844 	.word	0x0800b844

08009e98 <__multiply>:
 8009e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9c:	4614      	mov	r4, r2
 8009e9e:	690a      	ldr	r2, [r1, #16]
 8009ea0:	6923      	ldr	r3, [r4, #16]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	bfb8      	it	lt
 8009ea6:	460b      	movlt	r3, r1
 8009ea8:	460d      	mov	r5, r1
 8009eaa:	bfbc      	itt	lt
 8009eac:	4625      	movlt	r5, r4
 8009eae:	461c      	movlt	r4, r3
 8009eb0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009eb4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009eb8:	68ab      	ldr	r3, [r5, #8]
 8009eba:	6869      	ldr	r1, [r5, #4]
 8009ebc:	eb0a 0709 	add.w	r7, sl, r9
 8009ec0:	42bb      	cmp	r3, r7
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	bfb8      	it	lt
 8009ec6:	3101      	addlt	r1, #1
 8009ec8:	f7ff fe8a 	bl	8009be0 <_Balloc>
 8009ecc:	b930      	cbnz	r0, 8009edc <__multiply+0x44>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	4b42      	ldr	r3, [pc, #264]	; (8009fdc <__multiply+0x144>)
 8009ed2:	4843      	ldr	r0, [pc, #268]	; (8009fe0 <__multiply+0x148>)
 8009ed4:	f240 115d 	movw	r1, #349	; 0x15d
 8009ed8:	f000 fd8a 	bl	800a9f0 <__assert_func>
 8009edc:	f100 0614 	add.w	r6, r0, #20
 8009ee0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009ee4:	4633      	mov	r3, r6
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	4543      	cmp	r3, r8
 8009eea:	d31e      	bcc.n	8009f2a <__multiply+0x92>
 8009eec:	f105 0c14 	add.w	ip, r5, #20
 8009ef0:	f104 0314 	add.w	r3, r4, #20
 8009ef4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009ef8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009efc:	9202      	str	r2, [sp, #8]
 8009efe:	ebac 0205 	sub.w	r2, ip, r5
 8009f02:	3a15      	subs	r2, #21
 8009f04:	f022 0203 	bic.w	r2, r2, #3
 8009f08:	3204      	adds	r2, #4
 8009f0a:	f105 0115 	add.w	r1, r5, #21
 8009f0e:	458c      	cmp	ip, r1
 8009f10:	bf38      	it	cc
 8009f12:	2204      	movcc	r2, #4
 8009f14:	9201      	str	r2, [sp, #4]
 8009f16:	9a02      	ldr	r2, [sp, #8]
 8009f18:	9303      	str	r3, [sp, #12]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d808      	bhi.n	8009f30 <__multiply+0x98>
 8009f1e:	2f00      	cmp	r7, #0
 8009f20:	dc55      	bgt.n	8009fce <__multiply+0x136>
 8009f22:	6107      	str	r7, [r0, #16]
 8009f24:	b005      	add	sp, #20
 8009f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2a:	f843 2b04 	str.w	r2, [r3], #4
 8009f2e:	e7db      	b.n	8009ee8 <__multiply+0x50>
 8009f30:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f34:	f1ba 0f00 	cmp.w	sl, #0
 8009f38:	d020      	beq.n	8009f7c <__multiply+0xe4>
 8009f3a:	f105 0e14 	add.w	lr, r5, #20
 8009f3e:	46b1      	mov	r9, r6
 8009f40:	2200      	movs	r2, #0
 8009f42:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009f46:	f8d9 b000 	ldr.w	fp, [r9]
 8009f4a:	b2a1      	uxth	r1, r4
 8009f4c:	fa1f fb8b 	uxth.w	fp, fp
 8009f50:	fb0a b101 	mla	r1, sl, r1, fp
 8009f54:	4411      	add	r1, r2
 8009f56:	f8d9 2000 	ldr.w	r2, [r9]
 8009f5a:	0c24      	lsrs	r4, r4, #16
 8009f5c:	0c12      	lsrs	r2, r2, #16
 8009f5e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009f62:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009f66:	b289      	uxth	r1, r1
 8009f68:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009f6c:	45f4      	cmp	ip, lr
 8009f6e:	f849 1b04 	str.w	r1, [r9], #4
 8009f72:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009f76:	d8e4      	bhi.n	8009f42 <__multiply+0xaa>
 8009f78:	9901      	ldr	r1, [sp, #4]
 8009f7a:	5072      	str	r2, [r6, r1]
 8009f7c:	9a03      	ldr	r2, [sp, #12]
 8009f7e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f82:	3304      	adds	r3, #4
 8009f84:	f1b9 0f00 	cmp.w	r9, #0
 8009f88:	d01f      	beq.n	8009fca <__multiply+0x132>
 8009f8a:	6834      	ldr	r4, [r6, #0]
 8009f8c:	f105 0114 	add.w	r1, r5, #20
 8009f90:	46b6      	mov	lr, r6
 8009f92:	f04f 0a00 	mov.w	sl, #0
 8009f96:	880a      	ldrh	r2, [r1, #0]
 8009f98:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009f9c:	fb09 b202 	mla	r2, r9, r2, fp
 8009fa0:	4492      	add	sl, r2
 8009fa2:	b2a4      	uxth	r4, r4
 8009fa4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009fa8:	f84e 4b04 	str.w	r4, [lr], #4
 8009fac:	f851 4b04 	ldr.w	r4, [r1], #4
 8009fb0:	f8be 2000 	ldrh.w	r2, [lr]
 8009fb4:	0c24      	lsrs	r4, r4, #16
 8009fb6:	fb09 2404 	mla	r4, r9, r4, r2
 8009fba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009fbe:	458c      	cmp	ip, r1
 8009fc0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009fc4:	d8e7      	bhi.n	8009f96 <__multiply+0xfe>
 8009fc6:	9a01      	ldr	r2, [sp, #4]
 8009fc8:	50b4      	str	r4, [r6, r2]
 8009fca:	3604      	adds	r6, #4
 8009fcc:	e7a3      	b.n	8009f16 <__multiply+0x7e>
 8009fce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1a5      	bne.n	8009f22 <__multiply+0x8a>
 8009fd6:	3f01      	subs	r7, #1
 8009fd8:	e7a1      	b.n	8009f1e <__multiply+0x86>
 8009fda:	bf00      	nop
 8009fdc:	0800b7b4 	.word	0x0800b7b4
 8009fe0:	0800b844 	.word	0x0800b844

08009fe4 <__pow5mult>:
 8009fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fe8:	4615      	mov	r5, r2
 8009fea:	f012 0203 	ands.w	r2, r2, #3
 8009fee:	4606      	mov	r6, r0
 8009ff0:	460f      	mov	r7, r1
 8009ff2:	d007      	beq.n	800a004 <__pow5mult+0x20>
 8009ff4:	4c25      	ldr	r4, [pc, #148]	; (800a08c <__pow5mult+0xa8>)
 8009ff6:	3a01      	subs	r2, #1
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ffe:	f7ff fe51 	bl	8009ca4 <__multadd>
 800a002:	4607      	mov	r7, r0
 800a004:	10ad      	asrs	r5, r5, #2
 800a006:	d03d      	beq.n	800a084 <__pow5mult+0xa0>
 800a008:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a00a:	b97c      	cbnz	r4, 800a02c <__pow5mult+0x48>
 800a00c:	2010      	movs	r0, #16
 800a00e:	f7ff fdbf 	bl	8009b90 <malloc>
 800a012:	4602      	mov	r2, r0
 800a014:	6270      	str	r0, [r6, #36]	; 0x24
 800a016:	b928      	cbnz	r0, 800a024 <__pow5mult+0x40>
 800a018:	4b1d      	ldr	r3, [pc, #116]	; (800a090 <__pow5mult+0xac>)
 800a01a:	481e      	ldr	r0, [pc, #120]	; (800a094 <__pow5mult+0xb0>)
 800a01c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a020:	f000 fce6 	bl	800a9f0 <__assert_func>
 800a024:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a028:	6004      	str	r4, [r0, #0]
 800a02a:	60c4      	str	r4, [r0, #12]
 800a02c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a030:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a034:	b94c      	cbnz	r4, 800a04a <__pow5mult+0x66>
 800a036:	f240 2171 	movw	r1, #625	; 0x271
 800a03a:	4630      	mov	r0, r6
 800a03c:	f7ff ff16 	bl	8009e6c <__i2b>
 800a040:	2300      	movs	r3, #0
 800a042:	f8c8 0008 	str.w	r0, [r8, #8]
 800a046:	4604      	mov	r4, r0
 800a048:	6003      	str	r3, [r0, #0]
 800a04a:	f04f 0900 	mov.w	r9, #0
 800a04e:	07eb      	lsls	r3, r5, #31
 800a050:	d50a      	bpl.n	800a068 <__pow5mult+0x84>
 800a052:	4639      	mov	r1, r7
 800a054:	4622      	mov	r2, r4
 800a056:	4630      	mov	r0, r6
 800a058:	f7ff ff1e 	bl	8009e98 <__multiply>
 800a05c:	4639      	mov	r1, r7
 800a05e:	4680      	mov	r8, r0
 800a060:	4630      	mov	r0, r6
 800a062:	f7ff fdfd 	bl	8009c60 <_Bfree>
 800a066:	4647      	mov	r7, r8
 800a068:	106d      	asrs	r5, r5, #1
 800a06a:	d00b      	beq.n	800a084 <__pow5mult+0xa0>
 800a06c:	6820      	ldr	r0, [r4, #0]
 800a06e:	b938      	cbnz	r0, 800a080 <__pow5mult+0x9c>
 800a070:	4622      	mov	r2, r4
 800a072:	4621      	mov	r1, r4
 800a074:	4630      	mov	r0, r6
 800a076:	f7ff ff0f 	bl	8009e98 <__multiply>
 800a07a:	6020      	str	r0, [r4, #0]
 800a07c:	f8c0 9000 	str.w	r9, [r0]
 800a080:	4604      	mov	r4, r0
 800a082:	e7e4      	b.n	800a04e <__pow5mult+0x6a>
 800a084:	4638      	mov	r0, r7
 800a086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a08a:	bf00      	nop
 800a08c:	0800b998 	.word	0x0800b998
 800a090:	0800b73e 	.word	0x0800b73e
 800a094:	0800b844 	.word	0x0800b844

0800a098 <__lshift>:
 800a098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a09c:	460c      	mov	r4, r1
 800a09e:	6849      	ldr	r1, [r1, #4]
 800a0a0:	6923      	ldr	r3, [r4, #16]
 800a0a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0a6:	68a3      	ldr	r3, [r4, #8]
 800a0a8:	4607      	mov	r7, r0
 800a0aa:	4691      	mov	r9, r2
 800a0ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0b0:	f108 0601 	add.w	r6, r8, #1
 800a0b4:	42b3      	cmp	r3, r6
 800a0b6:	db0b      	blt.n	800a0d0 <__lshift+0x38>
 800a0b8:	4638      	mov	r0, r7
 800a0ba:	f7ff fd91 	bl	8009be0 <_Balloc>
 800a0be:	4605      	mov	r5, r0
 800a0c0:	b948      	cbnz	r0, 800a0d6 <__lshift+0x3e>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	4b28      	ldr	r3, [pc, #160]	; (800a168 <__lshift+0xd0>)
 800a0c6:	4829      	ldr	r0, [pc, #164]	; (800a16c <__lshift+0xd4>)
 800a0c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a0cc:	f000 fc90 	bl	800a9f0 <__assert_func>
 800a0d0:	3101      	adds	r1, #1
 800a0d2:	005b      	lsls	r3, r3, #1
 800a0d4:	e7ee      	b.n	800a0b4 <__lshift+0x1c>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	f100 0114 	add.w	r1, r0, #20
 800a0dc:	f100 0210 	add.w	r2, r0, #16
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	4553      	cmp	r3, sl
 800a0e4:	db33      	blt.n	800a14e <__lshift+0xb6>
 800a0e6:	6920      	ldr	r0, [r4, #16]
 800a0e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0ec:	f104 0314 	add.w	r3, r4, #20
 800a0f0:	f019 091f 	ands.w	r9, r9, #31
 800a0f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a0f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a0fc:	d02b      	beq.n	800a156 <__lshift+0xbe>
 800a0fe:	f1c9 0e20 	rsb	lr, r9, #32
 800a102:	468a      	mov	sl, r1
 800a104:	2200      	movs	r2, #0
 800a106:	6818      	ldr	r0, [r3, #0]
 800a108:	fa00 f009 	lsl.w	r0, r0, r9
 800a10c:	4302      	orrs	r2, r0
 800a10e:	f84a 2b04 	str.w	r2, [sl], #4
 800a112:	f853 2b04 	ldr.w	r2, [r3], #4
 800a116:	459c      	cmp	ip, r3
 800a118:	fa22 f20e 	lsr.w	r2, r2, lr
 800a11c:	d8f3      	bhi.n	800a106 <__lshift+0x6e>
 800a11e:	ebac 0304 	sub.w	r3, ip, r4
 800a122:	3b15      	subs	r3, #21
 800a124:	f023 0303 	bic.w	r3, r3, #3
 800a128:	3304      	adds	r3, #4
 800a12a:	f104 0015 	add.w	r0, r4, #21
 800a12e:	4584      	cmp	ip, r0
 800a130:	bf38      	it	cc
 800a132:	2304      	movcc	r3, #4
 800a134:	50ca      	str	r2, [r1, r3]
 800a136:	b10a      	cbz	r2, 800a13c <__lshift+0xa4>
 800a138:	f108 0602 	add.w	r6, r8, #2
 800a13c:	3e01      	subs	r6, #1
 800a13e:	4638      	mov	r0, r7
 800a140:	612e      	str	r6, [r5, #16]
 800a142:	4621      	mov	r1, r4
 800a144:	f7ff fd8c 	bl	8009c60 <_Bfree>
 800a148:	4628      	mov	r0, r5
 800a14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a14e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a152:	3301      	adds	r3, #1
 800a154:	e7c5      	b.n	800a0e2 <__lshift+0x4a>
 800a156:	3904      	subs	r1, #4
 800a158:	f853 2b04 	ldr.w	r2, [r3], #4
 800a15c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a160:	459c      	cmp	ip, r3
 800a162:	d8f9      	bhi.n	800a158 <__lshift+0xc0>
 800a164:	e7ea      	b.n	800a13c <__lshift+0xa4>
 800a166:	bf00      	nop
 800a168:	0800b7b4 	.word	0x0800b7b4
 800a16c:	0800b844 	.word	0x0800b844

0800a170 <__mcmp>:
 800a170:	b530      	push	{r4, r5, lr}
 800a172:	6902      	ldr	r2, [r0, #16]
 800a174:	690c      	ldr	r4, [r1, #16]
 800a176:	1b12      	subs	r2, r2, r4
 800a178:	d10e      	bne.n	800a198 <__mcmp+0x28>
 800a17a:	f100 0314 	add.w	r3, r0, #20
 800a17e:	3114      	adds	r1, #20
 800a180:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a184:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a188:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a18c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a190:	42a5      	cmp	r5, r4
 800a192:	d003      	beq.n	800a19c <__mcmp+0x2c>
 800a194:	d305      	bcc.n	800a1a2 <__mcmp+0x32>
 800a196:	2201      	movs	r2, #1
 800a198:	4610      	mov	r0, r2
 800a19a:	bd30      	pop	{r4, r5, pc}
 800a19c:	4283      	cmp	r3, r0
 800a19e:	d3f3      	bcc.n	800a188 <__mcmp+0x18>
 800a1a0:	e7fa      	b.n	800a198 <__mcmp+0x28>
 800a1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a6:	e7f7      	b.n	800a198 <__mcmp+0x28>

0800a1a8 <__mdiff>:
 800a1a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ac:	460c      	mov	r4, r1
 800a1ae:	4606      	mov	r6, r0
 800a1b0:	4611      	mov	r1, r2
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	4617      	mov	r7, r2
 800a1b6:	f7ff ffdb 	bl	800a170 <__mcmp>
 800a1ba:	1e05      	subs	r5, r0, #0
 800a1bc:	d110      	bne.n	800a1e0 <__mdiff+0x38>
 800a1be:	4629      	mov	r1, r5
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f7ff fd0d 	bl	8009be0 <_Balloc>
 800a1c6:	b930      	cbnz	r0, 800a1d6 <__mdiff+0x2e>
 800a1c8:	4b39      	ldr	r3, [pc, #228]	; (800a2b0 <__mdiff+0x108>)
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	f240 2132 	movw	r1, #562	; 0x232
 800a1d0:	4838      	ldr	r0, [pc, #224]	; (800a2b4 <__mdiff+0x10c>)
 800a1d2:	f000 fc0d 	bl	800a9f0 <__assert_func>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a1dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e0:	bfa4      	itt	ge
 800a1e2:	463b      	movge	r3, r7
 800a1e4:	4627      	movge	r7, r4
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	bfa6      	itte	ge
 800a1ec:	461c      	movge	r4, r3
 800a1ee:	2500      	movge	r5, #0
 800a1f0:	2501      	movlt	r5, #1
 800a1f2:	f7ff fcf5 	bl	8009be0 <_Balloc>
 800a1f6:	b920      	cbnz	r0, 800a202 <__mdiff+0x5a>
 800a1f8:	4b2d      	ldr	r3, [pc, #180]	; (800a2b0 <__mdiff+0x108>)
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a200:	e7e6      	b.n	800a1d0 <__mdiff+0x28>
 800a202:	693e      	ldr	r6, [r7, #16]
 800a204:	60c5      	str	r5, [r0, #12]
 800a206:	6925      	ldr	r5, [r4, #16]
 800a208:	f107 0114 	add.w	r1, r7, #20
 800a20c:	f104 0914 	add.w	r9, r4, #20
 800a210:	f100 0e14 	add.w	lr, r0, #20
 800a214:	f107 0210 	add.w	r2, r7, #16
 800a218:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a21c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a220:	46f2      	mov	sl, lr
 800a222:	2700      	movs	r7, #0
 800a224:	f859 3b04 	ldr.w	r3, [r9], #4
 800a228:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a22c:	fa1f f883 	uxth.w	r8, r3
 800a230:	fa17 f78b 	uxtah	r7, r7, fp
 800a234:	0c1b      	lsrs	r3, r3, #16
 800a236:	eba7 0808 	sub.w	r8, r7, r8
 800a23a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a23e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a242:	fa1f f888 	uxth.w	r8, r8
 800a246:	141f      	asrs	r7, r3, #16
 800a248:	454d      	cmp	r5, r9
 800a24a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a24e:	f84a 3b04 	str.w	r3, [sl], #4
 800a252:	d8e7      	bhi.n	800a224 <__mdiff+0x7c>
 800a254:	1b2b      	subs	r3, r5, r4
 800a256:	3b15      	subs	r3, #21
 800a258:	f023 0303 	bic.w	r3, r3, #3
 800a25c:	3304      	adds	r3, #4
 800a25e:	3415      	adds	r4, #21
 800a260:	42a5      	cmp	r5, r4
 800a262:	bf38      	it	cc
 800a264:	2304      	movcc	r3, #4
 800a266:	4419      	add	r1, r3
 800a268:	4473      	add	r3, lr
 800a26a:	469e      	mov	lr, r3
 800a26c:	460d      	mov	r5, r1
 800a26e:	4565      	cmp	r5, ip
 800a270:	d30e      	bcc.n	800a290 <__mdiff+0xe8>
 800a272:	f10c 0203 	add.w	r2, ip, #3
 800a276:	1a52      	subs	r2, r2, r1
 800a278:	f022 0203 	bic.w	r2, r2, #3
 800a27c:	3903      	subs	r1, #3
 800a27e:	458c      	cmp	ip, r1
 800a280:	bf38      	it	cc
 800a282:	2200      	movcc	r2, #0
 800a284:	441a      	add	r2, r3
 800a286:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a28a:	b17b      	cbz	r3, 800a2ac <__mdiff+0x104>
 800a28c:	6106      	str	r6, [r0, #16]
 800a28e:	e7a5      	b.n	800a1dc <__mdiff+0x34>
 800a290:	f855 8b04 	ldr.w	r8, [r5], #4
 800a294:	fa17 f488 	uxtah	r4, r7, r8
 800a298:	1422      	asrs	r2, r4, #16
 800a29a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a29e:	b2a4      	uxth	r4, r4
 800a2a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a2a4:	f84e 4b04 	str.w	r4, [lr], #4
 800a2a8:	1417      	asrs	r7, r2, #16
 800a2aa:	e7e0      	b.n	800a26e <__mdiff+0xc6>
 800a2ac:	3e01      	subs	r6, #1
 800a2ae:	e7ea      	b.n	800a286 <__mdiff+0xde>
 800a2b0:	0800b7b4 	.word	0x0800b7b4
 800a2b4:	0800b844 	.word	0x0800b844

0800a2b8 <__ulp>:
 800a2b8:	b082      	sub	sp, #8
 800a2ba:	ed8d 0b00 	vstr	d0, [sp]
 800a2be:	9b01      	ldr	r3, [sp, #4]
 800a2c0:	4912      	ldr	r1, [pc, #72]	; (800a30c <__ulp+0x54>)
 800a2c2:	4019      	ands	r1, r3
 800a2c4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a2c8:	2900      	cmp	r1, #0
 800a2ca:	dd05      	ble.n	800a2d8 <__ulp+0x20>
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	ec43 2b10 	vmov	d0, r2, r3
 800a2d4:	b002      	add	sp, #8
 800a2d6:	4770      	bx	lr
 800a2d8:	4249      	negs	r1, r1
 800a2da:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a2de:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a2e2:	f04f 0200 	mov.w	r2, #0
 800a2e6:	f04f 0300 	mov.w	r3, #0
 800a2ea:	da04      	bge.n	800a2f6 <__ulp+0x3e>
 800a2ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a2f0:	fa41 f300 	asr.w	r3, r1, r0
 800a2f4:	e7ec      	b.n	800a2d0 <__ulp+0x18>
 800a2f6:	f1a0 0114 	sub.w	r1, r0, #20
 800a2fa:	291e      	cmp	r1, #30
 800a2fc:	bfda      	itte	le
 800a2fe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a302:	fa20 f101 	lsrle.w	r1, r0, r1
 800a306:	2101      	movgt	r1, #1
 800a308:	460a      	mov	r2, r1
 800a30a:	e7e1      	b.n	800a2d0 <__ulp+0x18>
 800a30c:	7ff00000 	.word	0x7ff00000

0800a310 <__b2d>:
 800a310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a312:	6905      	ldr	r5, [r0, #16]
 800a314:	f100 0714 	add.w	r7, r0, #20
 800a318:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a31c:	1f2e      	subs	r6, r5, #4
 800a31e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a322:	4620      	mov	r0, r4
 800a324:	f7ff fd52 	bl	8009dcc <__hi0bits>
 800a328:	f1c0 0320 	rsb	r3, r0, #32
 800a32c:	280a      	cmp	r0, #10
 800a32e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a3ac <__b2d+0x9c>
 800a332:	600b      	str	r3, [r1, #0]
 800a334:	dc14      	bgt.n	800a360 <__b2d+0x50>
 800a336:	f1c0 0e0b 	rsb	lr, r0, #11
 800a33a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a33e:	42b7      	cmp	r7, r6
 800a340:	ea41 030c 	orr.w	r3, r1, ip
 800a344:	bf34      	ite	cc
 800a346:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a34a:	2100      	movcs	r1, #0
 800a34c:	3015      	adds	r0, #21
 800a34e:	fa04 f000 	lsl.w	r0, r4, r0
 800a352:	fa21 f10e 	lsr.w	r1, r1, lr
 800a356:	ea40 0201 	orr.w	r2, r0, r1
 800a35a:	ec43 2b10 	vmov	d0, r2, r3
 800a35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a360:	42b7      	cmp	r7, r6
 800a362:	bf3a      	itte	cc
 800a364:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a368:	f1a5 0608 	subcc.w	r6, r5, #8
 800a36c:	2100      	movcs	r1, #0
 800a36e:	380b      	subs	r0, #11
 800a370:	d017      	beq.n	800a3a2 <__b2d+0x92>
 800a372:	f1c0 0c20 	rsb	ip, r0, #32
 800a376:	fa04 f500 	lsl.w	r5, r4, r0
 800a37a:	42be      	cmp	r6, r7
 800a37c:	fa21 f40c 	lsr.w	r4, r1, ip
 800a380:	ea45 0504 	orr.w	r5, r5, r4
 800a384:	bf8c      	ite	hi
 800a386:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a38a:	2400      	movls	r4, #0
 800a38c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a390:	fa01 f000 	lsl.w	r0, r1, r0
 800a394:	fa24 f40c 	lsr.w	r4, r4, ip
 800a398:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a39c:	ea40 0204 	orr.w	r2, r0, r4
 800a3a0:	e7db      	b.n	800a35a <__b2d+0x4a>
 800a3a2:	ea44 030c 	orr.w	r3, r4, ip
 800a3a6:	460a      	mov	r2, r1
 800a3a8:	e7d7      	b.n	800a35a <__b2d+0x4a>
 800a3aa:	bf00      	nop
 800a3ac:	3ff00000 	.word	0x3ff00000

0800a3b0 <__d2b>:
 800a3b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a3b4:	4689      	mov	r9, r1
 800a3b6:	2101      	movs	r1, #1
 800a3b8:	ec57 6b10 	vmov	r6, r7, d0
 800a3bc:	4690      	mov	r8, r2
 800a3be:	f7ff fc0f 	bl	8009be0 <_Balloc>
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	b930      	cbnz	r0, 800a3d4 <__d2b+0x24>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	4b25      	ldr	r3, [pc, #148]	; (800a460 <__d2b+0xb0>)
 800a3ca:	4826      	ldr	r0, [pc, #152]	; (800a464 <__d2b+0xb4>)
 800a3cc:	f240 310a 	movw	r1, #778	; 0x30a
 800a3d0:	f000 fb0e 	bl	800a9f0 <__assert_func>
 800a3d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a3d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a3dc:	bb35      	cbnz	r5, 800a42c <__d2b+0x7c>
 800a3de:	2e00      	cmp	r6, #0
 800a3e0:	9301      	str	r3, [sp, #4]
 800a3e2:	d028      	beq.n	800a436 <__d2b+0x86>
 800a3e4:	4668      	mov	r0, sp
 800a3e6:	9600      	str	r6, [sp, #0]
 800a3e8:	f7ff fd10 	bl	8009e0c <__lo0bits>
 800a3ec:	9900      	ldr	r1, [sp, #0]
 800a3ee:	b300      	cbz	r0, 800a432 <__d2b+0x82>
 800a3f0:	9a01      	ldr	r2, [sp, #4]
 800a3f2:	f1c0 0320 	rsb	r3, r0, #32
 800a3f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3fa:	430b      	orrs	r3, r1
 800a3fc:	40c2      	lsrs	r2, r0
 800a3fe:	6163      	str	r3, [r4, #20]
 800a400:	9201      	str	r2, [sp, #4]
 800a402:	9b01      	ldr	r3, [sp, #4]
 800a404:	61a3      	str	r3, [r4, #24]
 800a406:	2b00      	cmp	r3, #0
 800a408:	bf14      	ite	ne
 800a40a:	2202      	movne	r2, #2
 800a40c:	2201      	moveq	r2, #1
 800a40e:	6122      	str	r2, [r4, #16]
 800a410:	b1d5      	cbz	r5, 800a448 <__d2b+0x98>
 800a412:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a416:	4405      	add	r5, r0
 800a418:	f8c9 5000 	str.w	r5, [r9]
 800a41c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a420:	f8c8 0000 	str.w	r0, [r8]
 800a424:	4620      	mov	r0, r4
 800a426:	b003      	add	sp, #12
 800a428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a42c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a430:	e7d5      	b.n	800a3de <__d2b+0x2e>
 800a432:	6161      	str	r1, [r4, #20]
 800a434:	e7e5      	b.n	800a402 <__d2b+0x52>
 800a436:	a801      	add	r0, sp, #4
 800a438:	f7ff fce8 	bl	8009e0c <__lo0bits>
 800a43c:	9b01      	ldr	r3, [sp, #4]
 800a43e:	6163      	str	r3, [r4, #20]
 800a440:	2201      	movs	r2, #1
 800a442:	6122      	str	r2, [r4, #16]
 800a444:	3020      	adds	r0, #32
 800a446:	e7e3      	b.n	800a410 <__d2b+0x60>
 800a448:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a44c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a450:	f8c9 0000 	str.w	r0, [r9]
 800a454:	6918      	ldr	r0, [r3, #16]
 800a456:	f7ff fcb9 	bl	8009dcc <__hi0bits>
 800a45a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a45e:	e7df      	b.n	800a420 <__d2b+0x70>
 800a460:	0800b7b4 	.word	0x0800b7b4
 800a464:	0800b844 	.word	0x0800b844

0800a468 <__ratio>:
 800a468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46c:	4688      	mov	r8, r1
 800a46e:	4669      	mov	r1, sp
 800a470:	4681      	mov	r9, r0
 800a472:	f7ff ff4d 	bl	800a310 <__b2d>
 800a476:	a901      	add	r1, sp, #4
 800a478:	4640      	mov	r0, r8
 800a47a:	ec55 4b10 	vmov	r4, r5, d0
 800a47e:	f7ff ff47 	bl	800a310 <__b2d>
 800a482:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a486:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a48a:	eba3 0c02 	sub.w	ip, r3, r2
 800a48e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a492:	1a9b      	subs	r3, r3, r2
 800a494:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a498:	ec51 0b10 	vmov	r0, r1, d0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	bfd6      	itet	le
 800a4a0:	460a      	movle	r2, r1
 800a4a2:	462a      	movgt	r2, r5
 800a4a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a4a8:	468b      	mov	fp, r1
 800a4aa:	462f      	mov	r7, r5
 800a4ac:	bfd4      	ite	le
 800a4ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a4b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	ee10 2a10 	vmov	r2, s0
 800a4bc:	465b      	mov	r3, fp
 800a4be:	4639      	mov	r1, r7
 800a4c0:	f7f6 f9c4 	bl	800084c <__aeabi_ddiv>
 800a4c4:	ec41 0b10 	vmov	d0, r0, r1
 800a4c8:	b003      	add	sp, #12
 800a4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a4ce <__copybits>:
 800a4ce:	3901      	subs	r1, #1
 800a4d0:	b570      	push	{r4, r5, r6, lr}
 800a4d2:	1149      	asrs	r1, r1, #5
 800a4d4:	6914      	ldr	r4, [r2, #16]
 800a4d6:	3101      	adds	r1, #1
 800a4d8:	f102 0314 	add.w	r3, r2, #20
 800a4dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a4e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a4e4:	1f05      	subs	r5, r0, #4
 800a4e6:	42a3      	cmp	r3, r4
 800a4e8:	d30c      	bcc.n	800a504 <__copybits+0x36>
 800a4ea:	1aa3      	subs	r3, r4, r2
 800a4ec:	3b11      	subs	r3, #17
 800a4ee:	f023 0303 	bic.w	r3, r3, #3
 800a4f2:	3211      	adds	r2, #17
 800a4f4:	42a2      	cmp	r2, r4
 800a4f6:	bf88      	it	hi
 800a4f8:	2300      	movhi	r3, #0
 800a4fa:	4418      	add	r0, r3
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	4288      	cmp	r0, r1
 800a500:	d305      	bcc.n	800a50e <__copybits+0x40>
 800a502:	bd70      	pop	{r4, r5, r6, pc}
 800a504:	f853 6b04 	ldr.w	r6, [r3], #4
 800a508:	f845 6f04 	str.w	r6, [r5, #4]!
 800a50c:	e7eb      	b.n	800a4e6 <__copybits+0x18>
 800a50e:	f840 3b04 	str.w	r3, [r0], #4
 800a512:	e7f4      	b.n	800a4fe <__copybits+0x30>

0800a514 <__any_on>:
 800a514:	f100 0214 	add.w	r2, r0, #20
 800a518:	6900      	ldr	r0, [r0, #16]
 800a51a:	114b      	asrs	r3, r1, #5
 800a51c:	4298      	cmp	r0, r3
 800a51e:	b510      	push	{r4, lr}
 800a520:	db11      	blt.n	800a546 <__any_on+0x32>
 800a522:	dd0a      	ble.n	800a53a <__any_on+0x26>
 800a524:	f011 011f 	ands.w	r1, r1, #31
 800a528:	d007      	beq.n	800a53a <__any_on+0x26>
 800a52a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a52e:	fa24 f001 	lsr.w	r0, r4, r1
 800a532:	fa00 f101 	lsl.w	r1, r0, r1
 800a536:	428c      	cmp	r4, r1
 800a538:	d10b      	bne.n	800a552 <__any_on+0x3e>
 800a53a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a53e:	4293      	cmp	r3, r2
 800a540:	d803      	bhi.n	800a54a <__any_on+0x36>
 800a542:	2000      	movs	r0, #0
 800a544:	bd10      	pop	{r4, pc}
 800a546:	4603      	mov	r3, r0
 800a548:	e7f7      	b.n	800a53a <__any_on+0x26>
 800a54a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a54e:	2900      	cmp	r1, #0
 800a550:	d0f5      	beq.n	800a53e <__any_on+0x2a>
 800a552:	2001      	movs	r0, #1
 800a554:	e7f6      	b.n	800a544 <__any_on+0x30>

0800a556 <_calloc_r>:
 800a556:	b513      	push	{r0, r1, r4, lr}
 800a558:	434a      	muls	r2, r1
 800a55a:	4611      	mov	r1, r2
 800a55c:	9201      	str	r2, [sp, #4]
 800a55e:	f000 f859 	bl	800a614 <_malloc_r>
 800a562:	4604      	mov	r4, r0
 800a564:	b118      	cbz	r0, 800a56e <_calloc_r+0x18>
 800a566:	9a01      	ldr	r2, [sp, #4]
 800a568:	2100      	movs	r1, #0
 800a56a:	f7fc fbc9 	bl	8006d00 <memset>
 800a56e:	4620      	mov	r0, r4
 800a570:	b002      	add	sp, #8
 800a572:	bd10      	pop	{r4, pc}

0800a574 <_free_r>:
 800a574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a576:	2900      	cmp	r1, #0
 800a578:	d048      	beq.n	800a60c <_free_r+0x98>
 800a57a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a57e:	9001      	str	r0, [sp, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	f1a1 0404 	sub.w	r4, r1, #4
 800a586:	bfb8      	it	lt
 800a588:	18e4      	addlt	r4, r4, r3
 800a58a:	f000 fa7b 	bl	800aa84 <__malloc_lock>
 800a58e:	4a20      	ldr	r2, [pc, #128]	; (800a610 <_free_r+0x9c>)
 800a590:	9801      	ldr	r0, [sp, #4]
 800a592:	6813      	ldr	r3, [r2, #0]
 800a594:	4615      	mov	r5, r2
 800a596:	b933      	cbnz	r3, 800a5a6 <_free_r+0x32>
 800a598:	6063      	str	r3, [r4, #4]
 800a59a:	6014      	str	r4, [r2, #0]
 800a59c:	b003      	add	sp, #12
 800a59e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5a2:	f000 ba75 	b.w	800aa90 <__malloc_unlock>
 800a5a6:	42a3      	cmp	r3, r4
 800a5a8:	d90b      	bls.n	800a5c2 <_free_r+0x4e>
 800a5aa:	6821      	ldr	r1, [r4, #0]
 800a5ac:	1862      	adds	r2, r4, r1
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	bf04      	itt	eq
 800a5b2:	681a      	ldreq	r2, [r3, #0]
 800a5b4:	685b      	ldreq	r3, [r3, #4]
 800a5b6:	6063      	str	r3, [r4, #4]
 800a5b8:	bf04      	itt	eq
 800a5ba:	1852      	addeq	r2, r2, r1
 800a5bc:	6022      	streq	r2, [r4, #0]
 800a5be:	602c      	str	r4, [r5, #0]
 800a5c0:	e7ec      	b.n	800a59c <_free_r+0x28>
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	b10b      	cbz	r3, 800a5cc <_free_r+0x58>
 800a5c8:	42a3      	cmp	r3, r4
 800a5ca:	d9fa      	bls.n	800a5c2 <_free_r+0x4e>
 800a5cc:	6811      	ldr	r1, [r2, #0]
 800a5ce:	1855      	adds	r5, r2, r1
 800a5d0:	42a5      	cmp	r5, r4
 800a5d2:	d10b      	bne.n	800a5ec <_free_r+0x78>
 800a5d4:	6824      	ldr	r4, [r4, #0]
 800a5d6:	4421      	add	r1, r4
 800a5d8:	1854      	adds	r4, r2, r1
 800a5da:	42a3      	cmp	r3, r4
 800a5dc:	6011      	str	r1, [r2, #0]
 800a5de:	d1dd      	bne.n	800a59c <_free_r+0x28>
 800a5e0:	681c      	ldr	r4, [r3, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	6053      	str	r3, [r2, #4]
 800a5e6:	4421      	add	r1, r4
 800a5e8:	6011      	str	r1, [r2, #0]
 800a5ea:	e7d7      	b.n	800a59c <_free_r+0x28>
 800a5ec:	d902      	bls.n	800a5f4 <_free_r+0x80>
 800a5ee:	230c      	movs	r3, #12
 800a5f0:	6003      	str	r3, [r0, #0]
 800a5f2:	e7d3      	b.n	800a59c <_free_r+0x28>
 800a5f4:	6825      	ldr	r5, [r4, #0]
 800a5f6:	1961      	adds	r1, r4, r5
 800a5f8:	428b      	cmp	r3, r1
 800a5fa:	bf04      	itt	eq
 800a5fc:	6819      	ldreq	r1, [r3, #0]
 800a5fe:	685b      	ldreq	r3, [r3, #4]
 800a600:	6063      	str	r3, [r4, #4]
 800a602:	bf04      	itt	eq
 800a604:	1949      	addeq	r1, r1, r5
 800a606:	6021      	streq	r1, [r4, #0]
 800a608:	6054      	str	r4, [r2, #4]
 800a60a:	e7c7      	b.n	800a59c <_free_r+0x28>
 800a60c:	b003      	add	sp, #12
 800a60e:	bd30      	pop	{r4, r5, pc}
 800a610:	20000644 	.word	0x20000644

0800a614 <_malloc_r>:
 800a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a616:	1ccd      	adds	r5, r1, #3
 800a618:	f025 0503 	bic.w	r5, r5, #3
 800a61c:	3508      	adds	r5, #8
 800a61e:	2d0c      	cmp	r5, #12
 800a620:	bf38      	it	cc
 800a622:	250c      	movcc	r5, #12
 800a624:	2d00      	cmp	r5, #0
 800a626:	4606      	mov	r6, r0
 800a628:	db01      	blt.n	800a62e <_malloc_r+0x1a>
 800a62a:	42a9      	cmp	r1, r5
 800a62c:	d903      	bls.n	800a636 <_malloc_r+0x22>
 800a62e:	230c      	movs	r3, #12
 800a630:	6033      	str	r3, [r6, #0]
 800a632:	2000      	movs	r0, #0
 800a634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a636:	f000 fa25 	bl	800aa84 <__malloc_lock>
 800a63a:	4921      	ldr	r1, [pc, #132]	; (800a6c0 <_malloc_r+0xac>)
 800a63c:	680a      	ldr	r2, [r1, #0]
 800a63e:	4614      	mov	r4, r2
 800a640:	b99c      	cbnz	r4, 800a66a <_malloc_r+0x56>
 800a642:	4f20      	ldr	r7, [pc, #128]	; (800a6c4 <_malloc_r+0xb0>)
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	b923      	cbnz	r3, 800a652 <_malloc_r+0x3e>
 800a648:	4621      	mov	r1, r4
 800a64a:	4630      	mov	r0, r6
 800a64c:	f000 f9a0 	bl	800a990 <_sbrk_r>
 800a650:	6038      	str	r0, [r7, #0]
 800a652:	4629      	mov	r1, r5
 800a654:	4630      	mov	r0, r6
 800a656:	f000 f99b 	bl	800a990 <_sbrk_r>
 800a65a:	1c43      	adds	r3, r0, #1
 800a65c:	d123      	bne.n	800a6a6 <_malloc_r+0x92>
 800a65e:	230c      	movs	r3, #12
 800a660:	6033      	str	r3, [r6, #0]
 800a662:	4630      	mov	r0, r6
 800a664:	f000 fa14 	bl	800aa90 <__malloc_unlock>
 800a668:	e7e3      	b.n	800a632 <_malloc_r+0x1e>
 800a66a:	6823      	ldr	r3, [r4, #0]
 800a66c:	1b5b      	subs	r3, r3, r5
 800a66e:	d417      	bmi.n	800a6a0 <_malloc_r+0x8c>
 800a670:	2b0b      	cmp	r3, #11
 800a672:	d903      	bls.n	800a67c <_malloc_r+0x68>
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	441c      	add	r4, r3
 800a678:	6025      	str	r5, [r4, #0]
 800a67a:	e004      	b.n	800a686 <_malloc_r+0x72>
 800a67c:	6863      	ldr	r3, [r4, #4]
 800a67e:	42a2      	cmp	r2, r4
 800a680:	bf0c      	ite	eq
 800a682:	600b      	streq	r3, [r1, #0]
 800a684:	6053      	strne	r3, [r2, #4]
 800a686:	4630      	mov	r0, r6
 800a688:	f000 fa02 	bl	800aa90 <__malloc_unlock>
 800a68c:	f104 000b 	add.w	r0, r4, #11
 800a690:	1d23      	adds	r3, r4, #4
 800a692:	f020 0007 	bic.w	r0, r0, #7
 800a696:	1ac2      	subs	r2, r0, r3
 800a698:	d0cc      	beq.n	800a634 <_malloc_r+0x20>
 800a69a:	1a1b      	subs	r3, r3, r0
 800a69c:	50a3      	str	r3, [r4, r2]
 800a69e:	e7c9      	b.n	800a634 <_malloc_r+0x20>
 800a6a0:	4622      	mov	r2, r4
 800a6a2:	6864      	ldr	r4, [r4, #4]
 800a6a4:	e7cc      	b.n	800a640 <_malloc_r+0x2c>
 800a6a6:	1cc4      	adds	r4, r0, #3
 800a6a8:	f024 0403 	bic.w	r4, r4, #3
 800a6ac:	42a0      	cmp	r0, r4
 800a6ae:	d0e3      	beq.n	800a678 <_malloc_r+0x64>
 800a6b0:	1a21      	subs	r1, r4, r0
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f000 f96c 	bl	800a990 <_sbrk_r>
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	d1dd      	bne.n	800a678 <_malloc_r+0x64>
 800a6bc:	e7cf      	b.n	800a65e <_malloc_r+0x4a>
 800a6be:	bf00      	nop
 800a6c0:	20000644 	.word	0x20000644
 800a6c4:	20000648 	.word	0x20000648

0800a6c8 <__ssputs_r>:
 800a6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6cc:	688e      	ldr	r6, [r1, #8]
 800a6ce:	429e      	cmp	r6, r3
 800a6d0:	4682      	mov	sl, r0
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	4690      	mov	r8, r2
 800a6d6:	461f      	mov	r7, r3
 800a6d8:	d838      	bhi.n	800a74c <__ssputs_r+0x84>
 800a6da:	898a      	ldrh	r2, [r1, #12]
 800a6dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6e0:	d032      	beq.n	800a748 <__ssputs_r+0x80>
 800a6e2:	6825      	ldr	r5, [r4, #0]
 800a6e4:	6909      	ldr	r1, [r1, #16]
 800a6e6:	eba5 0901 	sub.w	r9, r5, r1
 800a6ea:	6965      	ldr	r5, [r4, #20]
 800a6ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	444b      	add	r3, r9
 800a6f8:	106d      	asrs	r5, r5, #1
 800a6fa:	429d      	cmp	r5, r3
 800a6fc:	bf38      	it	cc
 800a6fe:	461d      	movcc	r5, r3
 800a700:	0553      	lsls	r3, r2, #21
 800a702:	d531      	bpl.n	800a768 <__ssputs_r+0xa0>
 800a704:	4629      	mov	r1, r5
 800a706:	f7ff ff85 	bl	800a614 <_malloc_r>
 800a70a:	4606      	mov	r6, r0
 800a70c:	b950      	cbnz	r0, 800a724 <__ssputs_r+0x5c>
 800a70e:	230c      	movs	r3, #12
 800a710:	f8ca 3000 	str.w	r3, [sl]
 800a714:	89a3      	ldrh	r3, [r4, #12]
 800a716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a71a:	81a3      	strh	r3, [r4, #12]
 800a71c:	f04f 30ff 	mov.w	r0, #4294967295
 800a720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a724:	6921      	ldr	r1, [r4, #16]
 800a726:	464a      	mov	r2, r9
 800a728:	f7ff fa4c 	bl	8009bc4 <memcpy>
 800a72c:	89a3      	ldrh	r3, [r4, #12]
 800a72e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a736:	81a3      	strh	r3, [r4, #12]
 800a738:	6126      	str	r6, [r4, #16]
 800a73a:	6165      	str	r5, [r4, #20]
 800a73c:	444e      	add	r6, r9
 800a73e:	eba5 0509 	sub.w	r5, r5, r9
 800a742:	6026      	str	r6, [r4, #0]
 800a744:	60a5      	str	r5, [r4, #8]
 800a746:	463e      	mov	r6, r7
 800a748:	42be      	cmp	r6, r7
 800a74a:	d900      	bls.n	800a74e <__ssputs_r+0x86>
 800a74c:	463e      	mov	r6, r7
 800a74e:	4632      	mov	r2, r6
 800a750:	6820      	ldr	r0, [r4, #0]
 800a752:	4641      	mov	r1, r8
 800a754:	f000 f97c 	bl	800aa50 <memmove>
 800a758:	68a3      	ldr	r3, [r4, #8]
 800a75a:	6822      	ldr	r2, [r4, #0]
 800a75c:	1b9b      	subs	r3, r3, r6
 800a75e:	4432      	add	r2, r6
 800a760:	60a3      	str	r3, [r4, #8]
 800a762:	6022      	str	r2, [r4, #0]
 800a764:	2000      	movs	r0, #0
 800a766:	e7db      	b.n	800a720 <__ssputs_r+0x58>
 800a768:	462a      	mov	r2, r5
 800a76a:	f000 f997 	bl	800aa9c <_realloc_r>
 800a76e:	4606      	mov	r6, r0
 800a770:	2800      	cmp	r0, #0
 800a772:	d1e1      	bne.n	800a738 <__ssputs_r+0x70>
 800a774:	6921      	ldr	r1, [r4, #16]
 800a776:	4650      	mov	r0, sl
 800a778:	f7ff fefc 	bl	800a574 <_free_r>
 800a77c:	e7c7      	b.n	800a70e <__ssputs_r+0x46>
	...

0800a780 <_svfiprintf_r>:
 800a780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a784:	4698      	mov	r8, r3
 800a786:	898b      	ldrh	r3, [r1, #12]
 800a788:	061b      	lsls	r3, r3, #24
 800a78a:	b09d      	sub	sp, #116	; 0x74
 800a78c:	4607      	mov	r7, r0
 800a78e:	460d      	mov	r5, r1
 800a790:	4614      	mov	r4, r2
 800a792:	d50e      	bpl.n	800a7b2 <_svfiprintf_r+0x32>
 800a794:	690b      	ldr	r3, [r1, #16]
 800a796:	b963      	cbnz	r3, 800a7b2 <_svfiprintf_r+0x32>
 800a798:	2140      	movs	r1, #64	; 0x40
 800a79a:	f7ff ff3b 	bl	800a614 <_malloc_r>
 800a79e:	6028      	str	r0, [r5, #0]
 800a7a0:	6128      	str	r0, [r5, #16]
 800a7a2:	b920      	cbnz	r0, 800a7ae <_svfiprintf_r+0x2e>
 800a7a4:	230c      	movs	r3, #12
 800a7a6:	603b      	str	r3, [r7, #0]
 800a7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ac:	e0d1      	b.n	800a952 <_svfiprintf_r+0x1d2>
 800a7ae:	2340      	movs	r3, #64	; 0x40
 800a7b0:	616b      	str	r3, [r5, #20]
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b6:	2320      	movs	r3, #32
 800a7b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7c0:	2330      	movs	r3, #48	; 0x30
 800a7c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a96c <_svfiprintf_r+0x1ec>
 800a7c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7ca:	f04f 0901 	mov.w	r9, #1
 800a7ce:	4623      	mov	r3, r4
 800a7d0:	469a      	mov	sl, r3
 800a7d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7d6:	b10a      	cbz	r2, 800a7dc <_svfiprintf_r+0x5c>
 800a7d8:	2a25      	cmp	r2, #37	; 0x25
 800a7da:	d1f9      	bne.n	800a7d0 <_svfiprintf_r+0x50>
 800a7dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a7e0:	d00b      	beq.n	800a7fa <_svfiprintf_r+0x7a>
 800a7e2:	465b      	mov	r3, fp
 800a7e4:	4622      	mov	r2, r4
 800a7e6:	4629      	mov	r1, r5
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	f7ff ff6d 	bl	800a6c8 <__ssputs_r>
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	f000 80aa 	beq.w	800a948 <_svfiprintf_r+0x1c8>
 800a7f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7f6:	445a      	add	r2, fp
 800a7f8:	9209      	str	r2, [sp, #36]	; 0x24
 800a7fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f000 80a2 	beq.w	800a948 <_svfiprintf_r+0x1c8>
 800a804:	2300      	movs	r3, #0
 800a806:	f04f 32ff 	mov.w	r2, #4294967295
 800a80a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a80e:	f10a 0a01 	add.w	sl, sl, #1
 800a812:	9304      	str	r3, [sp, #16]
 800a814:	9307      	str	r3, [sp, #28]
 800a816:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a81a:	931a      	str	r3, [sp, #104]	; 0x68
 800a81c:	4654      	mov	r4, sl
 800a81e:	2205      	movs	r2, #5
 800a820:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a824:	4851      	ldr	r0, [pc, #324]	; (800a96c <_svfiprintf_r+0x1ec>)
 800a826:	f7f5 fcdb 	bl	80001e0 <memchr>
 800a82a:	9a04      	ldr	r2, [sp, #16]
 800a82c:	b9d8      	cbnz	r0, 800a866 <_svfiprintf_r+0xe6>
 800a82e:	06d0      	lsls	r0, r2, #27
 800a830:	bf44      	itt	mi
 800a832:	2320      	movmi	r3, #32
 800a834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a838:	0711      	lsls	r1, r2, #28
 800a83a:	bf44      	itt	mi
 800a83c:	232b      	movmi	r3, #43	; 0x2b
 800a83e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a842:	f89a 3000 	ldrb.w	r3, [sl]
 800a846:	2b2a      	cmp	r3, #42	; 0x2a
 800a848:	d015      	beq.n	800a876 <_svfiprintf_r+0xf6>
 800a84a:	9a07      	ldr	r2, [sp, #28]
 800a84c:	4654      	mov	r4, sl
 800a84e:	2000      	movs	r0, #0
 800a850:	f04f 0c0a 	mov.w	ip, #10
 800a854:	4621      	mov	r1, r4
 800a856:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a85a:	3b30      	subs	r3, #48	; 0x30
 800a85c:	2b09      	cmp	r3, #9
 800a85e:	d94e      	bls.n	800a8fe <_svfiprintf_r+0x17e>
 800a860:	b1b0      	cbz	r0, 800a890 <_svfiprintf_r+0x110>
 800a862:	9207      	str	r2, [sp, #28]
 800a864:	e014      	b.n	800a890 <_svfiprintf_r+0x110>
 800a866:	eba0 0308 	sub.w	r3, r0, r8
 800a86a:	fa09 f303 	lsl.w	r3, r9, r3
 800a86e:	4313      	orrs	r3, r2
 800a870:	9304      	str	r3, [sp, #16]
 800a872:	46a2      	mov	sl, r4
 800a874:	e7d2      	b.n	800a81c <_svfiprintf_r+0x9c>
 800a876:	9b03      	ldr	r3, [sp, #12]
 800a878:	1d19      	adds	r1, r3, #4
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	9103      	str	r1, [sp, #12]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	bfbb      	ittet	lt
 800a882:	425b      	neglt	r3, r3
 800a884:	f042 0202 	orrlt.w	r2, r2, #2
 800a888:	9307      	strge	r3, [sp, #28]
 800a88a:	9307      	strlt	r3, [sp, #28]
 800a88c:	bfb8      	it	lt
 800a88e:	9204      	strlt	r2, [sp, #16]
 800a890:	7823      	ldrb	r3, [r4, #0]
 800a892:	2b2e      	cmp	r3, #46	; 0x2e
 800a894:	d10c      	bne.n	800a8b0 <_svfiprintf_r+0x130>
 800a896:	7863      	ldrb	r3, [r4, #1]
 800a898:	2b2a      	cmp	r3, #42	; 0x2a
 800a89a:	d135      	bne.n	800a908 <_svfiprintf_r+0x188>
 800a89c:	9b03      	ldr	r3, [sp, #12]
 800a89e:	1d1a      	adds	r2, r3, #4
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	9203      	str	r2, [sp, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	bfb8      	it	lt
 800a8a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8ac:	3402      	adds	r4, #2
 800a8ae:	9305      	str	r3, [sp, #20]
 800a8b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a97c <_svfiprintf_r+0x1fc>
 800a8b4:	7821      	ldrb	r1, [r4, #0]
 800a8b6:	2203      	movs	r2, #3
 800a8b8:	4650      	mov	r0, sl
 800a8ba:	f7f5 fc91 	bl	80001e0 <memchr>
 800a8be:	b140      	cbz	r0, 800a8d2 <_svfiprintf_r+0x152>
 800a8c0:	2340      	movs	r3, #64	; 0x40
 800a8c2:	eba0 000a 	sub.w	r0, r0, sl
 800a8c6:	fa03 f000 	lsl.w	r0, r3, r0
 800a8ca:	9b04      	ldr	r3, [sp, #16]
 800a8cc:	4303      	orrs	r3, r0
 800a8ce:	3401      	adds	r4, #1
 800a8d0:	9304      	str	r3, [sp, #16]
 800a8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d6:	4826      	ldr	r0, [pc, #152]	; (800a970 <_svfiprintf_r+0x1f0>)
 800a8d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8dc:	2206      	movs	r2, #6
 800a8de:	f7f5 fc7f 	bl	80001e0 <memchr>
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	d038      	beq.n	800a958 <_svfiprintf_r+0x1d8>
 800a8e6:	4b23      	ldr	r3, [pc, #140]	; (800a974 <_svfiprintf_r+0x1f4>)
 800a8e8:	bb1b      	cbnz	r3, 800a932 <_svfiprintf_r+0x1b2>
 800a8ea:	9b03      	ldr	r3, [sp, #12]
 800a8ec:	3307      	adds	r3, #7
 800a8ee:	f023 0307 	bic.w	r3, r3, #7
 800a8f2:	3308      	adds	r3, #8
 800a8f4:	9303      	str	r3, [sp, #12]
 800a8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f8:	4433      	add	r3, r6
 800a8fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a8fc:	e767      	b.n	800a7ce <_svfiprintf_r+0x4e>
 800a8fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800a902:	460c      	mov	r4, r1
 800a904:	2001      	movs	r0, #1
 800a906:	e7a5      	b.n	800a854 <_svfiprintf_r+0xd4>
 800a908:	2300      	movs	r3, #0
 800a90a:	3401      	adds	r4, #1
 800a90c:	9305      	str	r3, [sp, #20]
 800a90e:	4619      	mov	r1, r3
 800a910:	f04f 0c0a 	mov.w	ip, #10
 800a914:	4620      	mov	r0, r4
 800a916:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a91a:	3a30      	subs	r2, #48	; 0x30
 800a91c:	2a09      	cmp	r2, #9
 800a91e:	d903      	bls.n	800a928 <_svfiprintf_r+0x1a8>
 800a920:	2b00      	cmp	r3, #0
 800a922:	d0c5      	beq.n	800a8b0 <_svfiprintf_r+0x130>
 800a924:	9105      	str	r1, [sp, #20]
 800a926:	e7c3      	b.n	800a8b0 <_svfiprintf_r+0x130>
 800a928:	fb0c 2101 	mla	r1, ip, r1, r2
 800a92c:	4604      	mov	r4, r0
 800a92e:	2301      	movs	r3, #1
 800a930:	e7f0      	b.n	800a914 <_svfiprintf_r+0x194>
 800a932:	ab03      	add	r3, sp, #12
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	462a      	mov	r2, r5
 800a938:	4b0f      	ldr	r3, [pc, #60]	; (800a978 <_svfiprintf_r+0x1f8>)
 800a93a:	a904      	add	r1, sp, #16
 800a93c:	4638      	mov	r0, r7
 800a93e:	f7fc fa87 	bl	8006e50 <_printf_float>
 800a942:	1c42      	adds	r2, r0, #1
 800a944:	4606      	mov	r6, r0
 800a946:	d1d6      	bne.n	800a8f6 <_svfiprintf_r+0x176>
 800a948:	89ab      	ldrh	r3, [r5, #12]
 800a94a:	065b      	lsls	r3, r3, #25
 800a94c:	f53f af2c 	bmi.w	800a7a8 <_svfiprintf_r+0x28>
 800a950:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a952:	b01d      	add	sp, #116	; 0x74
 800a954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a958:	ab03      	add	r3, sp, #12
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	462a      	mov	r2, r5
 800a95e:	4b06      	ldr	r3, [pc, #24]	; (800a978 <_svfiprintf_r+0x1f8>)
 800a960:	a904      	add	r1, sp, #16
 800a962:	4638      	mov	r0, r7
 800a964:	f7fc fd18 	bl	8007398 <_printf_i>
 800a968:	e7eb      	b.n	800a942 <_svfiprintf_r+0x1c2>
 800a96a:	bf00      	nop
 800a96c:	0800b9a4 	.word	0x0800b9a4
 800a970:	0800b9ae 	.word	0x0800b9ae
 800a974:	08006e51 	.word	0x08006e51
 800a978:	0800a6c9 	.word	0x0800a6c9
 800a97c:	0800b9aa 	.word	0x0800b9aa

0800a980 <nan>:
 800a980:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a988 <nan+0x8>
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	00000000 	.word	0x00000000
 800a98c:	7ff80000 	.word	0x7ff80000

0800a990 <_sbrk_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4d06      	ldr	r5, [pc, #24]	; (800a9ac <_sbrk_r+0x1c>)
 800a994:	2300      	movs	r3, #0
 800a996:	4604      	mov	r4, r0
 800a998:	4608      	mov	r0, r1
 800a99a:	602b      	str	r3, [r5, #0]
 800a99c:	f7f7 fbca 	bl	8002134 <_sbrk>
 800a9a0:	1c43      	adds	r3, r0, #1
 800a9a2:	d102      	bne.n	800a9aa <_sbrk_r+0x1a>
 800a9a4:	682b      	ldr	r3, [r5, #0]
 800a9a6:	b103      	cbz	r3, 800a9aa <_sbrk_r+0x1a>
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	bd38      	pop	{r3, r4, r5, pc}
 800a9ac:	20001260 	.word	0x20001260

0800a9b0 <strncmp>:
 800a9b0:	b510      	push	{r4, lr}
 800a9b2:	b16a      	cbz	r2, 800a9d0 <strncmp+0x20>
 800a9b4:	3901      	subs	r1, #1
 800a9b6:	1884      	adds	r4, r0, r2
 800a9b8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a9bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d103      	bne.n	800a9cc <strncmp+0x1c>
 800a9c4:	42a0      	cmp	r0, r4
 800a9c6:	d001      	beq.n	800a9cc <strncmp+0x1c>
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1f5      	bne.n	800a9b8 <strncmp+0x8>
 800a9cc:	1a98      	subs	r0, r3, r2
 800a9ce:	bd10      	pop	{r4, pc}
 800a9d0:	4610      	mov	r0, r2
 800a9d2:	e7fc      	b.n	800a9ce <strncmp+0x1e>

0800a9d4 <__ascii_wctomb>:
 800a9d4:	b149      	cbz	r1, 800a9ea <__ascii_wctomb+0x16>
 800a9d6:	2aff      	cmp	r2, #255	; 0xff
 800a9d8:	bf85      	ittet	hi
 800a9da:	238a      	movhi	r3, #138	; 0x8a
 800a9dc:	6003      	strhi	r3, [r0, #0]
 800a9de:	700a      	strbls	r2, [r1, #0]
 800a9e0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a9e4:	bf98      	it	ls
 800a9e6:	2001      	movls	r0, #1
 800a9e8:	4770      	bx	lr
 800a9ea:	4608      	mov	r0, r1
 800a9ec:	4770      	bx	lr
	...

0800a9f0 <__assert_func>:
 800a9f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9f2:	4614      	mov	r4, r2
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	4b09      	ldr	r3, [pc, #36]	; (800aa1c <__assert_func+0x2c>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	68d8      	ldr	r0, [r3, #12]
 800a9fe:	b14c      	cbz	r4, 800aa14 <__assert_func+0x24>
 800aa00:	4b07      	ldr	r3, [pc, #28]	; (800aa20 <__assert_func+0x30>)
 800aa02:	9100      	str	r1, [sp, #0]
 800aa04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa08:	4906      	ldr	r1, [pc, #24]	; (800aa24 <__assert_func+0x34>)
 800aa0a:	462b      	mov	r3, r5
 800aa0c:	f000 f80e 	bl	800aa2c <fiprintf>
 800aa10:	f000 fa84 	bl	800af1c <abort>
 800aa14:	4b04      	ldr	r3, [pc, #16]	; (800aa28 <__assert_func+0x38>)
 800aa16:	461c      	mov	r4, r3
 800aa18:	e7f3      	b.n	800aa02 <__assert_func+0x12>
 800aa1a:	bf00      	nop
 800aa1c:	20000440 	.word	0x20000440
 800aa20:	0800b9b5 	.word	0x0800b9b5
 800aa24:	0800b9c2 	.word	0x0800b9c2
 800aa28:	0800b9f0 	.word	0x0800b9f0

0800aa2c <fiprintf>:
 800aa2c:	b40e      	push	{r1, r2, r3}
 800aa2e:	b503      	push	{r0, r1, lr}
 800aa30:	4601      	mov	r1, r0
 800aa32:	ab03      	add	r3, sp, #12
 800aa34:	4805      	ldr	r0, [pc, #20]	; (800aa4c <fiprintf+0x20>)
 800aa36:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa3a:	6800      	ldr	r0, [r0, #0]
 800aa3c:	9301      	str	r3, [sp, #4]
 800aa3e:	f000 f87d 	bl	800ab3c <_vfiprintf_r>
 800aa42:	b002      	add	sp, #8
 800aa44:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa48:	b003      	add	sp, #12
 800aa4a:	4770      	bx	lr
 800aa4c:	20000440 	.word	0x20000440

0800aa50 <memmove>:
 800aa50:	4288      	cmp	r0, r1
 800aa52:	b510      	push	{r4, lr}
 800aa54:	eb01 0402 	add.w	r4, r1, r2
 800aa58:	d902      	bls.n	800aa60 <memmove+0x10>
 800aa5a:	4284      	cmp	r4, r0
 800aa5c:	4623      	mov	r3, r4
 800aa5e:	d807      	bhi.n	800aa70 <memmove+0x20>
 800aa60:	1e43      	subs	r3, r0, #1
 800aa62:	42a1      	cmp	r1, r4
 800aa64:	d008      	beq.n	800aa78 <memmove+0x28>
 800aa66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa6e:	e7f8      	b.n	800aa62 <memmove+0x12>
 800aa70:	4402      	add	r2, r0
 800aa72:	4601      	mov	r1, r0
 800aa74:	428a      	cmp	r2, r1
 800aa76:	d100      	bne.n	800aa7a <memmove+0x2a>
 800aa78:	bd10      	pop	{r4, pc}
 800aa7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa82:	e7f7      	b.n	800aa74 <memmove+0x24>

0800aa84 <__malloc_lock>:
 800aa84:	4801      	ldr	r0, [pc, #4]	; (800aa8c <__malloc_lock+0x8>)
 800aa86:	f000 bc09 	b.w	800b29c <__retarget_lock_acquire_recursive>
 800aa8a:	bf00      	nop
 800aa8c:	20001268 	.word	0x20001268

0800aa90 <__malloc_unlock>:
 800aa90:	4801      	ldr	r0, [pc, #4]	; (800aa98 <__malloc_unlock+0x8>)
 800aa92:	f000 bc04 	b.w	800b29e <__retarget_lock_release_recursive>
 800aa96:	bf00      	nop
 800aa98:	20001268 	.word	0x20001268

0800aa9c <_realloc_r>:
 800aa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa9e:	4607      	mov	r7, r0
 800aaa0:	4614      	mov	r4, r2
 800aaa2:	460e      	mov	r6, r1
 800aaa4:	b921      	cbnz	r1, 800aab0 <_realloc_r+0x14>
 800aaa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aaaa:	4611      	mov	r1, r2
 800aaac:	f7ff bdb2 	b.w	800a614 <_malloc_r>
 800aab0:	b922      	cbnz	r2, 800aabc <_realloc_r+0x20>
 800aab2:	f7ff fd5f 	bl	800a574 <_free_r>
 800aab6:	4625      	mov	r5, r4
 800aab8:	4628      	mov	r0, r5
 800aaba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aabc:	f000 fc54 	bl	800b368 <_malloc_usable_size_r>
 800aac0:	42a0      	cmp	r0, r4
 800aac2:	d20f      	bcs.n	800aae4 <_realloc_r+0x48>
 800aac4:	4621      	mov	r1, r4
 800aac6:	4638      	mov	r0, r7
 800aac8:	f7ff fda4 	bl	800a614 <_malloc_r>
 800aacc:	4605      	mov	r5, r0
 800aace:	2800      	cmp	r0, #0
 800aad0:	d0f2      	beq.n	800aab8 <_realloc_r+0x1c>
 800aad2:	4631      	mov	r1, r6
 800aad4:	4622      	mov	r2, r4
 800aad6:	f7ff f875 	bl	8009bc4 <memcpy>
 800aada:	4631      	mov	r1, r6
 800aadc:	4638      	mov	r0, r7
 800aade:	f7ff fd49 	bl	800a574 <_free_r>
 800aae2:	e7e9      	b.n	800aab8 <_realloc_r+0x1c>
 800aae4:	4635      	mov	r5, r6
 800aae6:	e7e7      	b.n	800aab8 <_realloc_r+0x1c>

0800aae8 <__sfputc_r>:
 800aae8:	6893      	ldr	r3, [r2, #8]
 800aaea:	3b01      	subs	r3, #1
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	b410      	push	{r4}
 800aaf0:	6093      	str	r3, [r2, #8]
 800aaf2:	da08      	bge.n	800ab06 <__sfputc_r+0x1e>
 800aaf4:	6994      	ldr	r4, [r2, #24]
 800aaf6:	42a3      	cmp	r3, r4
 800aaf8:	db01      	blt.n	800aafe <__sfputc_r+0x16>
 800aafa:	290a      	cmp	r1, #10
 800aafc:	d103      	bne.n	800ab06 <__sfputc_r+0x1e>
 800aafe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab02:	f000 b94b 	b.w	800ad9c <__swbuf_r>
 800ab06:	6813      	ldr	r3, [r2, #0]
 800ab08:	1c58      	adds	r0, r3, #1
 800ab0a:	6010      	str	r0, [r2, #0]
 800ab0c:	7019      	strb	r1, [r3, #0]
 800ab0e:	4608      	mov	r0, r1
 800ab10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <__sfputs_r>:
 800ab16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab18:	4606      	mov	r6, r0
 800ab1a:	460f      	mov	r7, r1
 800ab1c:	4614      	mov	r4, r2
 800ab1e:	18d5      	adds	r5, r2, r3
 800ab20:	42ac      	cmp	r4, r5
 800ab22:	d101      	bne.n	800ab28 <__sfputs_r+0x12>
 800ab24:	2000      	movs	r0, #0
 800ab26:	e007      	b.n	800ab38 <__sfputs_r+0x22>
 800ab28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab2c:	463a      	mov	r2, r7
 800ab2e:	4630      	mov	r0, r6
 800ab30:	f7ff ffda 	bl	800aae8 <__sfputc_r>
 800ab34:	1c43      	adds	r3, r0, #1
 800ab36:	d1f3      	bne.n	800ab20 <__sfputs_r+0xa>
 800ab38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab3c <_vfiprintf_r>:
 800ab3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab40:	460d      	mov	r5, r1
 800ab42:	b09d      	sub	sp, #116	; 0x74
 800ab44:	4614      	mov	r4, r2
 800ab46:	4698      	mov	r8, r3
 800ab48:	4606      	mov	r6, r0
 800ab4a:	b118      	cbz	r0, 800ab54 <_vfiprintf_r+0x18>
 800ab4c:	6983      	ldr	r3, [r0, #24]
 800ab4e:	b90b      	cbnz	r3, 800ab54 <_vfiprintf_r+0x18>
 800ab50:	f000 fb06 	bl	800b160 <__sinit>
 800ab54:	4b89      	ldr	r3, [pc, #548]	; (800ad7c <_vfiprintf_r+0x240>)
 800ab56:	429d      	cmp	r5, r3
 800ab58:	d11b      	bne.n	800ab92 <_vfiprintf_r+0x56>
 800ab5a:	6875      	ldr	r5, [r6, #4]
 800ab5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab5e:	07d9      	lsls	r1, r3, #31
 800ab60:	d405      	bmi.n	800ab6e <_vfiprintf_r+0x32>
 800ab62:	89ab      	ldrh	r3, [r5, #12]
 800ab64:	059a      	lsls	r2, r3, #22
 800ab66:	d402      	bmi.n	800ab6e <_vfiprintf_r+0x32>
 800ab68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab6a:	f000 fb97 	bl	800b29c <__retarget_lock_acquire_recursive>
 800ab6e:	89ab      	ldrh	r3, [r5, #12]
 800ab70:	071b      	lsls	r3, r3, #28
 800ab72:	d501      	bpl.n	800ab78 <_vfiprintf_r+0x3c>
 800ab74:	692b      	ldr	r3, [r5, #16]
 800ab76:	b9eb      	cbnz	r3, 800abb4 <_vfiprintf_r+0x78>
 800ab78:	4629      	mov	r1, r5
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	f000 f960 	bl	800ae40 <__swsetup_r>
 800ab80:	b1c0      	cbz	r0, 800abb4 <_vfiprintf_r+0x78>
 800ab82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab84:	07dc      	lsls	r4, r3, #31
 800ab86:	d50e      	bpl.n	800aba6 <_vfiprintf_r+0x6a>
 800ab88:	f04f 30ff 	mov.w	r0, #4294967295
 800ab8c:	b01d      	add	sp, #116	; 0x74
 800ab8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab92:	4b7b      	ldr	r3, [pc, #492]	; (800ad80 <_vfiprintf_r+0x244>)
 800ab94:	429d      	cmp	r5, r3
 800ab96:	d101      	bne.n	800ab9c <_vfiprintf_r+0x60>
 800ab98:	68b5      	ldr	r5, [r6, #8]
 800ab9a:	e7df      	b.n	800ab5c <_vfiprintf_r+0x20>
 800ab9c:	4b79      	ldr	r3, [pc, #484]	; (800ad84 <_vfiprintf_r+0x248>)
 800ab9e:	429d      	cmp	r5, r3
 800aba0:	bf08      	it	eq
 800aba2:	68f5      	ldreq	r5, [r6, #12]
 800aba4:	e7da      	b.n	800ab5c <_vfiprintf_r+0x20>
 800aba6:	89ab      	ldrh	r3, [r5, #12]
 800aba8:	0598      	lsls	r0, r3, #22
 800abaa:	d4ed      	bmi.n	800ab88 <_vfiprintf_r+0x4c>
 800abac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abae:	f000 fb76 	bl	800b29e <__retarget_lock_release_recursive>
 800abb2:	e7e9      	b.n	800ab88 <_vfiprintf_r+0x4c>
 800abb4:	2300      	movs	r3, #0
 800abb6:	9309      	str	r3, [sp, #36]	; 0x24
 800abb8:	2320      	movs	r3, #32
 800abba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800abc2:	2330      	movs	r3, #48	; 0x30
 800abc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad88 <_vfiprintf_r+0x24c>
 800abc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abcc:	f04f 0901 	mov.w	r9, #1
 800abd0:	4623      	mov	r3, r4
 800abd2:	469a      	mov	sl, r3
 800abd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abd8:	b10a      	cbz	r2, 800abde <_vfiprintf_r+0xa2>
 800abda:	2a25      	cmp	r2, #37	; 0x25
 800abdc:	d1f9      	bne.n	800abd2 <_vfiprintf_r+0x96>
 800abde:	ebba 0b04 	subs.w	fp, sl, r4
 800abe2:	d00b      	beq.n	800abfc <_vfiprintf_r+0xc0>
 800abe4:	465b      	mov	r3, fp
 800abe6:	4622      	mov	r2, r4
 800abe8:	4629      	mov	r1, r5
 800abea:	4630      	mov	r0, r6
 800abec:	f7ff ff93 	bl	800ab16 <__sfputs_r>
 800abf0:	3001      	adds	r0, #1
 800abf2:	f000 80aa 	beq.w	800ad4a <_vfiprintf_r+0x20e>
 800abf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abf8:	445a      	add	r2, fp
 800abfa:	9209      	str	r2, [sp, #36]	; 0x24
 800abfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f000 80a2 	beq.w	800ad4a <_vfiprintf_r+0x20e>
 800ac06:	2300      	movs	r3, #0
 800ac08:	f04f 32ff 	mov.w	r2, #4294967295
 800ac0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac10:	f10a 0a01 	add.w	sl, sl, #1
 800ac14:	9304      	str	r3, [sp, #16]
 800ac16:	9307      	str	r3, [sp, #28]
 800ac18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac1c:	931a      	str	r3, [sp, #104]	; 0x68
 800ac1e:	4654      	mov	r4, sl
 800ac20:	2205      	movs	r2, #5
 800ac22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac26:	4858      	ldr	r0, [pc, #352]	; (800ad88 <_vfiprintf_r+0x24c>)
 800ac28:	f7f5 fada 	bl	80001e0 <memchr>
 800ac2c:	9a04      	ldr	r2, [sp, #16]
 800ac2e:	b9d8      	cbnz	r0, 800ac68 <_vfiprintf_r+0x12c>
 800ac30:	06d1      	lsls	r1, r2, #27
 800ac32:	bf44      	itt	mi
 800ac34:	2320      	movmi	r3, #32
 800ac36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac3a:	0713      	lsls	r3, r2, #28
 800ac3c:	bf44      	itt	mi
 800ac3e:	232b      	movmi	r3, #43	; 0x2b
 800ac40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac44:	f89a 3000 	ldrb.w	r3, [sl]
 800ac48:	2b2a      	cmp	r3, #42	; 0x2a
 800ac4a:	d015      	beq.n	800ac78 <_vfiprintf_r+0x13c>
 800ac4c:	9a07      	ldr	r2, [sp, #28]
 800ac4e:	4654      	mov	r4, sl
 800ac50:	2000      	movs	r0, #0
 800ac52:	f04f 0c0a 	mov.w	ip, #10
 800ac56:	4621      	mov	r1, r4
 800ac58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac5c:	3b30      	subs	r3, #48	; 0x30
 800ac5e:	2b09      	cmp	r3, #9
 800ac60:	d94e      	bls.n	800ad00 <_vfiprintf_r+0x1c4>
 800ac62:	b1b0      	cbz	r0, 800ac92 <_vfiprintf_r+0x156>
 800ac64:	9207      	str	r2, [sp, #28]
 800ac66:	e014      	b.n	800ac92 <_vfiprintf_r+0x156>
 800ac68:	eba0 0308 	sub.w	r3, r0, r8
 800ac6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ac70:	4313      	orrs	r3, r2
 800ac72:	9304      	str	r3, [sp, #16]
 800ac74:	46a2      	mov	sl, r4
 800ac76:	e7d2      	b.n	800ac1e <_vfiprintf_r+0xe2>
 800ac78:	9b03      	ldr	r3, [sp, #12]
 800ac7a:	1d19      	adds	r1, r3, #4
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	9103      	str	r1, [sp, #12]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	bfbb      	ittet	lt
 800ac84:	425b      	neglt	r3, r3
 800ac86:	f042 0202 	orrlt.w	r2, r2, #2
 800ac8a:	9307      	strge	r3, [sp, #28]
 800ac8c:	9307      	strlt	r3, [sp, #28]
 800ac8e:	bfb8      	it	lt
 800ac90:	9204      	strlt	r2, [sp, #16]
 800ac92:	7823      	ldrb	r3, [r4, #0]
 800ac94:	2b2e      	cmp	r3, #46	; 0x2e
 800ac96:	d10c      	bne.n	800acb2 <_vfiprintf_r+0x176>
 800ac98:	7863      	ldrb	r3, [r4, #1]
 800ac9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ac9c:	d135      	bne.n	800ad0a <_vfiprintf_r+0x1ce>
 800ac9e:	9b03      	ldr	r3, [sp, #12]
 800aca0:	1d1a      	adds	r2, r3, #4
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	9203      	str	r2, [sp, #12]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	bfb8      	it	lt
 800acaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800acae:	3402      	adds	r4, #2
 800acb0:	9305      	str	r3, [sp, #20]
 800acb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad98 <_vfiprintf_r+0x25c>
 800acb6:	7821      	ldrb	r1, [r4, #0]
 800acb8:	2203      	movs	r2, #3
 800acba:	4650      	mov	r0, sl
 800acbc:	f7f5 fa90 	bl	80001e0 <memchr>
 800acc0:	b140      	cbz	r0, 800acd4 <_vfiprintf_r+0x198>
 800acc2:	2340      	movs	r3, #64	; 0x40
 800acc4:	eba0 000a 	sub.w	r0, r0, sl
 800acc8:	fa03 f000 	lsl.w	r0, r3, r0
 800accc:	9b04      	ldr	r3, [sp, #16]
 800acce:	4303      	orrs	r3, r0
 800acd0:	3401      	adds	r4, #1
 800acd2:	9304      	str	r3, [sp, #16]
 800acd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acd8:	482c      	ldr	r0, [pc, #176]	; (800ad8c <_vfiprintf_r+0x250>)
 800acda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acde:	2206      	movs	r2, #6
 800ace0:	f7f5 fa7e 	bl	80001e0 <memchr>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d03f      	beq.n	800ad68 <_vfiprintf_r+0x22c>
 800ace8:	4b29      	ldr	r3, [pc, #164]	; (800ad90 <_vfiprintf_r+0x254>)
 800acea:	bb1b      	cbnz	r3, 800ad34 <_vfiprintf_r+0x1f8>
 800acec:	9b03      	ldr	r3, [sp, #12]
 800acee:	3307      	adds	r3, #7
 800acf0:	f023 0307 	bic.w	r3, r3, #7
 800acf4:	3308      	adds	r3, #8
 800acf6:	9303      	str	r3, [sp, #12]
 800acf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acfa:	443b      	add	r3, r7
 800acfc:	9309      	str	r3, [sp, #36]	; 0x24
 800acfe:	e767      	b.n	800abd0 <_vfiprintf_r+0x94>
 800ad00:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad04:	460c      	mov	r4, r1
 800ad06:	2001      	movs	r0, #1
 800ad08:	e7a5      	b.n	800ac56 <_vfiprintf_r+0x11a>
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	3401      	adds	r4, #1
 800ad0e:	9305      	str	r3, [sp, #20]
 800ad10:	4619      	mov	r1, r3
 800ad12:	f04f 0c0a 	mov.w	ip, #10
 800ad16:	4620      	mov	r0, r4
 800ad18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad1c:	3a30      	subs	r2, #48	; 0x30
 800ad1e:	2a09      	cmp	r2, #9
 800ad20:	d903      	bls.n	800ad2a <_vfiprintf_r+0x1ee>
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d0c5      	beq.n	800acb2 <_vfiprintf_r+0x176>
 800ad26:	9105      	str	r1, [sp, #20]
 800ad28:	e7c3      	b.n	800acb2 <_vfiprintf_r+0x176>
 800ad2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad2e:	4604      	mov	r4, r0
 800ad30:	2301      	movs	r3, #1
 800ad32:	e7f0      	b.n	800ad16 <_vfiprintf_r+0x1da>
 800ad34:	ab03      	add	r3, sp, #12
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	462a      	mov	r2, r5
 800ad3a:	4b16      	ldr	r3, [pc, #88]	; (800ad94 <_vfiprintf_r+0x258>)
 800ad3c:	a904      	add	r1, sp, #16
 800ad3e:	4630      	mov	r0, r6
 800ad40:	f7fc f886 	bl	8006e50 <_printf_float>
 800ad44:	4607      	mov	r7, r0
 800ad46:	1c78      	adds	r0, r7, #1
 800ad48:	d1d6      	bne.n	800acf8 <_vfiprintf_r+0x1bc>
 800ad4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad4c:	07d9      	lsls	r1, r3, #31
 800ad4e:	d405      	bmi.n	800ad5c <_vfiprintf_r+0x220>
 800ad50:	89ab      	ldrh	r3, [r5, #12]
 800ad52:	059a      	lsls	r2, r3, #22
 800ad54:	d402      	bmi.n	800ad5c <_vfiprintf_r+0x220>
 800ad56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad58:	f000 faa1 	bl	800b29e <__retarget_lock_release_recursive>
 800ad5c:	89ab      	ldrh	r3, [r5, #12]
 800ad5e:	065b      	lsls	r3, r3, #25
 800ad60:	f53f af12 	bmi.w	800ab88 <_vfiprintf_r+0x4c>
 800ad64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad66:	e711      	b.n	800ab8c <_vfiprintf_r+0x50>
 800ad68:	ab03      	add	r3, sp, #12
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	462a      	mov	r2, r5
 800ad6e:	4b09      	ldr	r3, [pc, #36]	; (800ad94 <_vfiprintf_r+0x258>)
 800ad70:	a904      	add	r1, sp, #16
 800ad72:	4630      	mov	r0, r6
 800ad74:	f7fc fb10 	bl	8007398 <_printf_i>
 800ad78:	e7e4      	b.n	800ad44 <_vfiprintf_r+0x208>
 800ad7a:	bf00      	nop
 800ad7c:	0800ba14 	.word	0x0800ba14
 800ad80:	0800ba34 	.word	0x0800ba34
 800ad84:	0800b9f4 	.word	0x0800b9f4
 800ad88:	0800b9a4 	.word	0x0800b9a4
 800ad8c:	0800b9ae 	.word	0x0800b9ae
 800ad90:	08006e51 	.word	0x08006e51
 800ad94:	0800ab17 	.word	0x0800ab17
 800ad98:	0800b9aa 	.word	0x0800b9aa

0800ad9c <__swbuf_r>:
 800ad9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9e:	460e      	mov	r6, r1
 800ada0:	4614      	mov	r4, r2
 800ada2:	4605      	mov	r5, r0
 800ada4:	b118      	cbz	r0, 800adae <__swbuf_r+0x12>
 800ada6:	6983      	ldr	r3, [r0, #24]
 800ada8:	b90b      	cbnz	r3, 800adae <__swbuf_r+0x12>
 800adaa:	f000 f9d9 	bl	800b160 <__sinit>
 800adae:	4b21      	ldr	r3, [pc, #132]	; (800ae34 <__swbuf_r+0x98>)
 800adb0:	429c      	cmp	r4, r3
 800adb2:	d12b      	bne.n	800ae0c <__swbuf_r+0x70>
 800adb4:	686c      	ldr	r4, [r5, #4]
 800adb6:	69a3      	ldr	r3, [r4, #24]
 800adb8:	60a3      	str	r3, [r4, #8]
 800adba:	89a3      	ldrh	r3, [r4, #12]
 800adbc:	071a      	lsls	r2, r3, #28
 800adbe:	d52f      	bpl.n	800ae20 <__swbuf_r+0x84>
 800adc0:	6923      	ldr	r3, [r4, #16]
 800adc2:	b36b      	cbz	r3, 800ae20 <__swbuf_r+0x84>
 800adc4:	6923      	ldr	r3, [r4, #16]
 800adc6:	6820      	ldr	r0, [r4, #0]
 800adc8:	1ac0      	subs	r0, r0, r3
 800adca:	6963      	ldr	r3, [r4, #20]
 800adcc:	b2f6      	uxtb	r6, r6
 800adce:	4283      	cmp	r3, r0
 800add0:	4637      	mov	r7, r6
 800add2:	dc04      	bgt.n	800adde <__swbuf_r+0x42>
 800add4:	4621      	mov	r1, r4
 800add6:	4628      	mov	r0, r5
 800add8:	f000 f92e 	bl	800b038 <_fflush_r>
 800addc:	bb30      	cbnz	r0, 800ae2c <__swbuf_r+0x90>
 800adde:	68a3      	ldr	r3, [r4, #8]
 800ade0:	3b01      	subs	r3, #1
 800ade2:	60a3      	str	r3, [r4, #8]
 800ade4:	6823      	ldr	r3, [r4, #0]
 800ade6:	1c5a      	adds	r2, r3, #1
 800ade8:	6022      	str	r2, [r4, #0]
 800adea:	701e      	strb	r6, [r3, #0]
 800adec:	6963      	ldr	r3, [r4, #20]
 800adee:	3001      	adds	r0, #1
 800adf0:	4283      	cmp	r3, r0
 800adf2:	d004      	beq.n	800adfe <__swbuf_r+0x62>
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	07db      	lsls	r3, r3, #31
 800adf8:	d506      	bpl.n	800ae08 <__swbuf_r+0x6c>
 800adfa:	2e0a      	cmp	r6, #10
 800adfc:	d104      	bne.n	800ae08 <__swbuf_r+0x6c>
 800adfe:	4621      	mov	r1, r4
 800ae00:	4628      	mov	r0, r5
 800ae02:	f000 f919 	bl	800b038 <_fflush_r>
 800ae06:	b988      	cbnz	r0, 800ae2c <__swbuf_r+0x90>
 800ae08:	4638      	mov	r0, r7
 800ae0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae0c:	4b0a      	ldr	r3, [pc, #40]	; (800ae38 <__swbuf_r+0x9c>)
 800ae0e:	429c      	cmp	r4, r3
 800ae10:	d101      	bne.n	800ae16 <__swbuf_r+0x7a>
 800ae12:	68ac      	ldr	r4, [r5, #8]
 800ae14:	e7cf      	b.n	800adb6 <__swbuf_r+0x1a>
 800ae16:	4b09      	ldr	r3, [pc, #36]	; (800ae3c <__swbuf_r+0xa0>)
 800ae18:	429c      	cmp	r4, r3
 800ae1a:	bf08      	it	eq
 800ae1c:	68ec      	ldreq	r4, [r5, #12]
 800ae1e:	e7ca      	b.n	800adb6 <__swbuf_r+0x1a>
 800ae20:	4621      	mov	r1, r4
 800ae22:	4628      	mov	r0, r5
 800ae24:	f000 f80c 	bl	800ae40 <__swsetup_r>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d0cb      	beq.n	800adc4 <__swbuf_r+0x28>
 800ae2c:	f04f 37ff 	mov.w	r7, #4294967295
 800ae30:	e7ea      	b.n	800ae08 <__swbuf_r+0x6c>
 800ae32:	bf00      	nop
 800ae34:	0800ba14 	.word	0x0800ba14
 800ae38:	0800ba34 	.word	0x0800ba34
 800ae3c:	0800b9f4 	.word	0x0800b9f4

0800ae40 <__swsetup_r>:
 800ae40:	4b32      	ldr	r3, [pc, #200]	; (800af0c <__swsetup_r+0xcc>)
 800ae42:	b570      	push	{r4, r5, r6, lr}
 800ae44:	681d      	ldr	r5, [r3, #0]
 800ae46:	4606      	mov	r6, r0
 800ae48:	460c      	mov	r4, r1
 800ae4a:	b125      	cbz	r5, 800ae56 <__swsetup_r+0x16>
 800ae4c:	69ab      	ldr	r3, [r5, #24]
 800ae4e:	b913      	cbnz	r3, 800ae56 <__swsetup_r+0x16>
 800ae50:	4628      	mov	r0, r5
 800ae52:	f000 f985 	bl	800b160 <__sinit>
 800ae56:	4b2e      	ldr	r3, [pc, #184]	; (800af10 <__swsetup_r+0xd0>)
 800ae58:	429c      	cmp	r4, r3
 800ae5a:	d10f      	bne.n	800ae7c <__swsetup_r+0x3c>
 800ae5c:	686c      	ldr	r4, [r5, #4]
 800ae5e:	89a3      	ldrh	r3, [r4, #12]
 800ae60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae64:	0719      	lsls	r1, r3, #28
 800ae66:	d42c      	bmi.n	800aec2 <__swsetup_r+0x82>
 800ae68:	06dd      	lsls	r5, r3, #27
 800ae6a:	d411      	bmi.n	800ae90 <__swsetup_r+0x50>
 800ae6c:	2309      	movs	r3, #9
 800ae6e:	6033      	str	r3, [r6, #0]
 800ae70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae74:	81a3      	strh	r3, [r4, #12]
 800ae76:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7a:	e03e      	b.n	800aefa <__swsetup_r+0xba>
 800ae7c:	4b25      	ldr	r3, [pc, #148]	; (800af14 <__swsetup_r+0xd4>)
 800ae7e:	429c      	cmp	r4, r3
 800ae80:	d101      	bne.n	800ae86 <__swsetup_r+0x46>
 800ae82:	68ac      	ldr	r4, [r5, #8]
 800ae84:	e7eb      	b.n	800ae5e <__swsetup_r+0x1e>
 800ae86:	4b24      	ldr	r3, [pc, #144]	; (800af18 <__swsetup_r+0xd8>)
 800ae88:	429c      	cmp	r4, r3
 800ae8a:	bf08      	it	eq
 800ae8c:	68ec      	ldreq	r4, [r5, #12]
 800ae8e:	e7e6      	b.n	800ae5e <__swsetup_r+0x1e>
 800ae90:	0758      	lsls	r0, r3, #29
 800ae92:	d512      	bpl.n	800aeba <__swsetup_r+0x7a>
 800ae94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae96:	b141      	cbz	r1, 800aeaa <__swsetup_r+0x6a>
 800ae98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae9c:	4299      	cmp	r1, r3
 800ae9e:	d002      	beq.n	800aea6 <__swsetup_r+0x66>
 800aea0:	4630      	mov	r0, r6
 800aea2:	f7ff fb67 	bl	800a574 <_free_r>
 800aea6:	2300      	movs	r3, #0
 800aea8:	6363      	str	r3, [r4, #52]	; 0x34
 800aeaa:	89a3      	ldrh	r3, [r4, #12]
 800aeac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aeb0:	81a3      	strh	r3, [r4, #12]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	6063      	str	r3, [r4, #4]
 800aeb6:	6923      	ldr	r3, [r4, #16]
 800aeb8:	6023      	str	r3, [r4, #0]
 800aeba:	89a3      	ldrh	r3, [r4, #12]
 800aebc:	f043 0308 	orr.w	r3, r3, #8
 800aec0:	81a3      	strh	r3, [r4, #12]
 800aec2:	6923      	ldr	r3, [r4, #16]
 800aec4:	b94b      	cbnz	r3, 800aeda <__swsetup_r+0x9a>
 800aec6:	89a3      	ldrh	r3, [r4, #12]
 800aec8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aed0:	d003      	beq.n	800aeda <__swsetup_r+0x9a>
 800aed2:	4621      	mov	r1, r4
 800aed4:	4630      	mov	r0, r6
 800aed6:	f000 fa07 	bl	800b2e8 <__smakebuf_r>
 800aeda:	89a0      	ldrh	r0, [r4, #12]
 800aedc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aee0:	f010 0301 	ands.w	r3, r0, #1
 800aee4:	d00a      	beq.n	800aefc <__swsetup_r+0xbc>
 800aee6:	2300      	movs	r3, #0
 800aee8:	60a3      	str	r3, [r4, #8]
 800aeea:	6963      	ldr	r3, [r4, #20]
 800aeec:	425b      	negs	r3, r3
 800aeee:	61a3      	str	r3, [r4, #24]
 800aef0:	6923      	ldr	r3, [r4, #16]
 800aef2:	b943      	cbnz	r3, 800af06 <__swsetup_r+0xc6>
 800aef4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aef8:	d1ba      	bne.n	800ae70 <__swsetup_r+0x30>
 800aefa:	bd70      	pop	{r4, r5, r6, pc}
 800aefc:	0781      	lsls	r1, r0, #30
 800aefe:	bf58      	it	pl
 800af00:	6963      	ldrpl	r3, [r4, #20]
 800af02:	60a3      	str	r3, [r4, #8]
 800af04:	e7f4      	b.n	800aef0 <__swsetup_r+0xb0>
 800af06:	2000      	movs	r0, #0
 800af08:	e7f7      	b.n	800aefa <__swsetup_r+0xba>
 800af0a:	bf00      	nop
 800af0c:	20000440 	.word	0x20000440
 800af10:	0800ba14 	.word	0x0800ba14
 800af14:	0800ba34 	.word	0x0800ba34
 800af18:	0800b9f4 	.word	0x0800b9f4

0800af1c <abort>:
 800af1c:	b508      	push	{r3, lr}
 800af1e:	2006      	movs	r0, #6
 800af20:	f000 fa52 	bl	800b3c8 <raise>
 800af24:	2001      	movs	r0, #1
 800af26:	f7f7 f88d 	bl	8002044 <_exit>
	...

0800af2c <__sflush_r>:
 800af2c:	898a      	ldrh	r2, [r1, #12]
 800af2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af32:	4605      	mov	r5, r0
 800af34:	0710      	lsls	r0, r2, #28
 800af36:	460c      	mov	r4, r1
 800af38:	d458      	bmi.n	800afec <__sflush_r+0xc0>
 800af3a:	684b      	ldr	r3, [r1, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	dc05      	bgt.n	800af4c <__sflush_r+0x20>
 800af40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af42:	2b00      	cmp	r3, #0
 800af44:	dc02      	bgt.n	800af4c <__sflush_r+0x20>
 800af46:	2000      	movs	r0, #0
 800af48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af4e:	2e00      	cmp	r6, #0
 800af50:	d0f9      	beq.n	800af46 <__sflush_r+0x1a>
 800af52:	2300      	movs	r3, #0
 800af54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af58:	682f      	ldr	r7, [r5, #0]
 800af5a:	602b      	str	r3, [r5, #0]
 800af5c:	d032      	beq.n	800afc4 <__sflush_r+0x98>
 800af5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af60:	89a3      	ldrh	r3, [r4, #12]
 800af62:	075a      	lsls	r2, r3, #29
 800af64:	d505      	bpl.n	800af72 <__sflush_r+0x46>
 800af66:	6863      	ldr	r3, [r4, #4]
 800af68:	1ac0      	subs	r0, r0, r3
 800af6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af6c:	b10b      	cbz	r3, 800af72 <__sflush_r+0x46>
 800af6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af70:	1ac0      	subs	r0, r0, r3
 800af72:	2300      	movs	r3, #0
 800af74:	4602      	mov	r2, r0
 800af76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af78:	6a21      	ldr	r1, [r4, #32]
 800af7a:	4628      	mov	r0, r5
 800af7c:	47b0      	blx	r6
 800af7e:	1c43      	adds	r3, r0, #1
 800af80:	89a3      	ldrh	r3, [r4, #12]
 800af82:	d106      	bne.n	800af92 <__sflush_r+0x66>
 800af84:	6829      	ldr	r1, [r5, #0]
 800af86:	291d      	cmp	r1, #29
 800af88:	d82c      	bhi.n	800afe4 <__sflush_r+0xb8>
 800af8a:	4a2a      	ldr	r2, [pc, #168]	; (800b034 <__sflush_r+0x108>)
 800af8c:	40ca      	lsrs	r2, r1
 800af8e:	07d6      	lsls	r6, r2, #31
 800af90:	d528      	bpl.n	800afe4 <__sflush_r+0xb8>
 800af92:	2200      	movs	r2, #0
 800af94:	6062      	str	r2, [r4, #4]
 800af96:	04d9      	lsls	r1, r3, #19
 800af98:	6922      	ldr	r2, [r4, #16]
 800af9a:	6022      	str	r2, [r4, #0]
 800af9c:	d504      	bpl.n	800afa8 <__sflush_r+0x7c>
 800af9e:	1c42      	adds	r2, r0, #1
 800afa0:	d101      	bne.n	800afa6 <__sflush_r+0x7a>
 800afa2:	682b      	ldr	r3, [r5, #0]
 800afa4:	b903      	cbnz	r3, 800afa8 <__sflush_r+0x7c>
 800afa6:	6560      	str	r0, [r4, #84]	; 0x54
 800afa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afaa:	602f      	str	r7, [r5, #0]
 800afac:	2900      	cmp	r1, #0
 800afae:	d0ca      	beq.n	800af46 <__sflush_r+0x1a>
 800afb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afb4:	4299      	cmp	r1, r3
 800afb6:	d002      	beq.n	800afbe <__sflush_r+0x92>
 800afb8:	4628      	mov	r0, r5
 800afba:	f7ff fadb 	bl	800a574 <_free_r>
 800afbe:	2000      	movs	r0, #0
 800afc0:	6360      	str	r0, [r4, #52]	; 0x34
 800afc2:	e7c1      	b.n	800af48 <__sflush_r+0x1c>
 800afc4:	6a21      	ldr	r1, [r4, #32]
 800afc6:	2301      	movs	r3, #1
 800afc8:	4628      	mov	r0, r5
 800afca:	47b0      	blx	r6
 800afcc:	1c41      	adds	r1, r0, #1
 800afce:	d1c7      	bne.n	800af60 <__sflush_r+0x34>
 800afd0:	682b      	ldr	r3, [r5, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d0c4      	beq.n	800af60 <__sflush_r+0x34>
 800afd6:	2b1d      	cmp	r3, #29
 800afd8:	d001      	beq.n	800afde <__sflush_r+0xb2>
 800afda:	2b16      	cmp	r3, #22
 800afdc:	d101      	bne.n	800afe2 <__sflush_r+0xb6>
 800afde:	602f      	str	r7, [r5, #0]
 800afe0:	e7b1      	b.n	800af46 <__sflush_r+0x1a>
 800afe2:	89a3      	ldrh	r3, [r4, #12]
 800afe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afe8:	81a3      	strh	r3, [r4, #12]
 800afea:	e7ad      	b.n	800af48 <__sflush_r+0x1c>
 800afec:	690f      	ldr	r7, [r1, #16]
 800afee:	2f00      	cmp	r7, #0
 800aff0:	d0a9      	beq.n	800af46 <__sflush_r+0x1a>
 800aff2:	0793      	lsls	r3, r2, #30
 800aff4:	680e      	ldr	r6, [r1, #0]
 800aff6:	bf08      	it	eq
 800aff8:	694b      	ldreq	r3, [r1, #20]
 800affa:	600f      	str	r7, [r1, #0]
 800affc:	bf18      	it	ne
 800affe:	2300      	movne	r3, #0
 800b000:	eba6 0807 	sub.w	r8, r6, r7
 800b004:	608b      	str	r3, [r1, #8]
 800b006:	f1b8 0f00 	cmp.w	r8, #0
 800b00a:	dd9c      	ble.n	800af46 <__sflush_r+0x1a>
 800b00c:	6a21      	ldr	r1, [r4, #32]
 800b00e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b010:	4643      	mov	r3, r8
 800b012:	463a      	mov	r2, r7
 800b014:	4628      	mov	r0, r5
 800b016:	47b0      	blx	r6
 800b018:	2800      	cmp	r0, #0
 800b01a:	dc06      	bgt.n	800b02a <__sflush_r+0xfe>
 800b01c:	89a3      	ldrh	r3, [r4, #12]
 800b01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b022:	81a3      	strh	r3, [r4, #12]
 800b024:	f04f 30ff 	mov.w	r0, #4294967295
 800b028:	e78e      	b.n	800af48 <__sflush_r+0x1c>
 800b02a:	4407      	add	r7, r0
 800b02c:	eba8 0800 	sub.w	r8, r8, r0
 800b030:	e7e9      	b.n	800b006 <__sflush_r+0xda>
 800b032:	bf00      	nop
 800b034:	20400001 	.word	0x20400001

0800b038 <_fflush_r>:
 800b038:	b538      	push	{r3, r4, r5, lr}
 800b03a:	690b      	ldr	r3, [r1, #16]
 800b03c:	4605      	mov	r5, r0
 800b03e:	460c      	mov	r4, r1
 800b040:	b913      	cbnz	r3, 800b048 <_fflush_r+0x10>
 800b042:	2500      	movs	r5, #0
 800b044:	4628      	mov	r0, r5
 800b046:	bd38      	pop	{r3, r4, r5, pc}
 800b048:	b118      	cbz	r0, 800b052 <_fflush_r+0x1a>
 800b04a:	6983      	ldr	r3, [r0, #24]
 800b04c:	b90b      	cbnz	r3, 800b052 <_fflush_r+0x1a>
 800b04e:	f000 f887 	bl	800b160 <__sinit>
 800b052:	4b14      	ldr	r3, [pc, #80]	; (800b0a4 <_fflush_r+0x6c>)
 800b054:	429c      	cmp	r4, r3
 800b056:	d11b      	bne.n	800b090 <_fflush_r+0x58>
 800b058:	686c      	ldr	r4, [r5, #4]
 800b05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d0ef      	beq.n	800b042 <_fflush_r+0xa>
 800b062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b064:	07d0      	lsls	r0, r2, #31
 800b066:	d404      	bmi.n	800b072 <_fflush_r+0x3a>
 800b068:	0599      	lsls	r1, r3, #22
 800b06a:	d402      	bmi.n	800b072 <_fflush_r+0x3a>
 800b06c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b06e:	f000 f915 	bl	800b29c <__retarget_lock_acquire_recursive>
 800b072:	4628      	mov	r0, r5
 800b074:	4621      	mov	r1, r4
 800b076:	f7ff ff59 	bl	800af2c <__sflush_r>
 800b07a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b07c:	07da      	lsls	r2, r3, #31
 800b07e:	4605      	mov	r5, r0
 800b080:	d4e0      	bmi.n	800b044 <_fflush_r+0xc>
 800b082:	89a3      	ldrh	r3, [r4, #12]
 800b084:	059b      	lsls	r3, r3, #22
 800b086:	d4dd      	bmi.n	800b044 <_fflush_r+0xc>
 800b088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b08a:	f000 f908 	bl	800b29e <__retarget_lock_release_recursive>
 800b08e:	e7d9      	b.n	800b044 <_fflush_r+0xc>
 800b090:	4b05      	ldr	r3, [pc, #20]	; (800b0a8 <_fflush_r+0x70>)
 800b092:	429c      	cmp	r4, r3
 800b094:	d101      	bne.n	800b09a <_fflush_r+0x62>
 800b096:	68ac      	ldr	r4, [r5, #8]
 800b098:	e7df      	b.n	800b05a <_fflush_r+0x22>
 800b09a:	4b04      	ldr	r3, [pc, #16]	; (800b0ac <_fflush_r+0x74>)
 800b09c:	429c      	cmp	r4, r3
 800b09e:	bf08      	it	eq
 800b0a0:	68ec      	ldreq	r4, [r5, #12]
 800b0a2:	e7da      	b.n	800b05a <_fflush_r+0x22>
 800b0a4:	0800ba14 	.word	0x0800ba14
 800b0a8:	0800ba34 	.word	0x0800ba34
 800b0ac:	0800b9f4 	.word	0x0800b9f4

0800b0b0 <std>:
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	b510      	push	{r4, lr}
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	e9c0 3300 	strd	r3, r3, [r0]
 800b0ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0be:	6083      	str	r3, [r0, #8]
 800b0c0:	8181      	strh	r1, [r0, #12]
 800b0c2:	6643      	str	r3, [r0, #100]	; 0x64
 800b0c4:	81c2      	strh	r2, [r0, #14]
 800b0c6:	6183      	str	r3, [r0, #24]
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	2208      	movs	r2, #8
 800b0cc:	305c      	adds	r0, #92	; 0x5c
 800b0ce:	f7fb fe17 	bl	8006d00 <memset>
 800b0d2:	4b05      	ldr	r3, [pc, #20]	; (800b0e8 <std+0x38>)
 800b0d4:	6263      	str	r3, [r4, #36]	; 0x24
 800b0d6:	4b05      	ldr	r3, [pc, #20]	; (800b0ec <std+0x3c>)
 800b0d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b0da:	4b05      	ldr	r3, [pc, #20]	; (800b0f0 <std+0x40>)
 800b0dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b0de:	4b05      	ldr	r3, [pc, #20]	; (800b0f4 <std+0x44>)
 800b0e0:	6224      	str	r4, [r4, #32]
 800b0e2:	6323      	str	r3, [r4, #48]	; 0x30
 800b0e4:	bd10      	pop	{r4, pc}
 800b0e6:	bf00      	nop
 800b0e8:	0800b401 	.word	0x0800b401
 800b0ec:	0800b423 	.word	0x0800b423
 800b0f0:	0800b45b 	.word	0x0800b45b
 800b0f4:	0800b47f 	.word	0x0800b47f

0800b0f8 <_cleanup_r>:
 800b0f8:	4901      	ldr	r1, [pc, #4]	; (800b100 <_cleanup_r+0x8>)
 800b0fa:	f000 b8af 	b.w	800b25c <_fwalk_reent>
 800b0fe:	bf00      	nop
 800b100:	0800b039 	.word	0x0800b039

0800b104 <__sfmoreglue>:
 800b104:	b570      	push	{r4, r5, r6, lr}
 800b106:	1e4a      	subs	r2, r1, #1
 800b108:	2568      	movs	r5, #104	; 0x68
 800b10a:	4355      	muls	r5, r2
 800b10c:	460e      	mov	r6, r1
 800b10e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b112:	f7ff fa7f 	bl	800a614 <_malloc_r>
 800b116:	4604      	mov	r4, r0
 800b118:	b140      	cbz	r0, 800b12c <__sfmoreglue+0x28>
 800b11a:	2100      	movs	r1, #0
 800b11c:	e9c0 1600 	strd	r1, r6, [r0]
 800b120:	300c      	adds	r0, #12
 800b122:	60a0      	str	r0, [r4, #8]
 800b124:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b128:	f7fb fdea 	bl	8006d00 <memset>
 800b12c:	4620      	mov	r0, r4
 800b12e:	bd70      	pop	{r4, r5, r6, pc}

0800b130 <__sfp_lock_acquire>:
 800b130:	4801      	ldr	r0, [pc, #4]	; (800b138 <__sfp_lock_acquire+0x8>)
 800b132:	f000 b8b3 	b.w	800b29c <__retarget_lock_acquire_recursive>
 800b136:	bf00      	nop
 800b138:	2000126c 	.word	0x2000126c

0800b13c <__sfp_lock_release>:
 800b13c:	4801      	ldr	r0, [pc, #4]	; (800b144 <__sfp_lock_release+0x8>)
 800b13e:	f000 b8ae 	b.w	800b29e <__retarget_lock_release_recursive>
 800b142:	bf00      	nop
 800b144:	2000126c 	.word	0x2000126c

0800b148 <__sinit_lock_acquire>:
 800b148:	4801      	ldr	r0, [pc, #4]	; (800b150 <__sinit_lock_acquire+0x8>)
 800b14a:	f000 b8a7 	b.w	800b29c <__retarget_lock_acquire_recursive>
 800b14e:	bf00      	nop
 800b150:	20001267 	.word	0x20001267

0800b154 <__sinit_lock_release>:
 800b154:	4801      	ldr	r0, [pc, #4]	; (800b15c <__sinit_lock_release+0x8>)
 800b156:	f000 b8a2 	b.w	800b29e <__retarget_lock_release_recursive>
 800b15a:	bf00      	nop
 800b15c:	20001267 	.word	0x20001267

0800b160 <__sinit>:
 800b160:	b510      	push	{r4, lr}
 800b162:	4604      	mov	r4, r0
 800b164:	f7ff fff0 	bl	800b148 <__sinit_lock_acquire>
 800b168:	69a3      	ldr	r3, [r4, #24]
 800b16a:	b11b      	cbz	r3, 800b174 <__sinit+0x14>
 800b16c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b170:	f7ff bff0 	b.w	800b154 <__sinit_lock_release>
 800b174:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b178:	6523      	str	r3, [r4, #80]	; 0x50
 800b17a:	4b13      	ldr	r3, [pc, #76]	; (800b1c8 <__sinit+0x68>)
 800b17c:	4a13      	ldr	r2, [pc, #76]	; (800b1cc <__sinit+0x6c>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	62a2      	str	r2, [r4, #40]	; 0x28
 800b182:	42a3      	cmp	r3, r4
 800b184:	bf04      	itt	eq
 800b186:	2301      	moveq	r3, #1
 800b188:	61a3      	streq	r3, [r4, #24]
 800b18a:	4620      	mov	r0, r4
 800b18c:	f000 f820 	bl	800b1d0 <__sfp>
 800b190:	6060      	str	r0, [r4, #4]
 800b192:	4620      	mov	r0, r4
 800b194:	f000 f81c 	bl	800b1d0 <__sfp>
 800b198:	60a0      	str	r0, [r4, #8]
 800b19a:	4620      	mov	r0, r4
 800b19c:	f000 f818 	bl	800b1d0 <__sfp>
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	60e0      	str	r0, [r4, #12]
 800b1a4:	2104      	movs	r1, #4
 800b1a6:	6860      	ldr	r0, [r4, #4]
 800b1a8:	f7ff ff82 	bl	800b0b0 <std>
 800b1ac:	68a0      	ldr	r0, [r4, #8]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	2109      	movs	r1, #9
 800b1b2:	f7ff ff7d 	bl	800b0b0 <std>
 800b1b6:	68e0      	ldr	r0, [r4, #12]
 800b1b8:	2202      	movs	r2, #2
 800b1ba:	2112      	movs	r1, #18
 800b1bc:	f7ff ff78 	bl	800b0b0 <std>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	61a3      	str	r3, [r4, #24]
 800b1c4:	e7d2      	b.n	800b16c <__sinit+0xc>
 800b1c6:	bf00      	nop
 800b1c8:	0800b5a0 	.word	0x0800b5a0
 800b1cc:	0800b0f9 	.word	0x0800b0f9

0800b1d0 <__sfp>:
 800b1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d2:	4607      	mov	r7, r0
 800b1d4:	f7ff ffac 	bl	800b130 <__sfp_lock_acquire>
 800b1d8:	4b1e      	ldr	r3, [pc, #120]	; (800b254 <__sfp+0x84>)
 800b1da:	681e      	ldr	r6, [r3, #0]
 800b1dc:	69b3      	ldr	r3, [r6, #24]
 800b1de:	b913      	cbnz	r3, 800b1e6 <__sfp+0x16>
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f7ff ffbd 	bl	800b160 <__sinit>
 800b1e6:	3648      	adds	r6, #72	; 0x48
 800b1e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b1ec:	3b01      	subs	r3, #1
 800b1ee:	d503      	bpl.n	800b1f8 <__sfp+0x28>
 800b1f0:	6833      	ldr	r3, [r6, #0]
 800b1f2:	b30b      	cbz	r3, 800b238 <__sfp+0x68>
 800b1f4:	6836      	ldr	r6, [r6, #0]
 800b1f6:	e7f7      	b.n	800b1e8 <__sfp+0x18>
 800b1f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b1fc:	b9d5      	cbnz	r5, 800b234 <__sfp+0x64>
 800b1fe:	4b16      	ldr	r3, [pc, #88]	; (800b258 <__sfp+0x88>)
 800b200:	60e3      	str	r3, [r4, #12]
 800b202:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b206:	6665      	str	r5, [r4, #100]	; 0x64
 800b208:	f000 f847 	bl	800b29a <__retarget_lock_init_recursive>
 800b20c:	f7ff ff96 	bl	800b13c <__sfp_lock_release>
 800b210:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b214:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b218:	6025      	str	r5, [r4, #0]
 800b21a:	61a5      	str	r5, [r4, #24]
 800b21c:	2208      	movs	r2, #8
 800b21e:	4629      	mov	r1, r5
 800b220:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b224:	f7fb fd6c 	bl	8006d00 <memset>
 800b228:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b22c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b230:	4620      	mov	r0, r4
 800b232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b234:	3468      	adds	r4, #104	; 0x68
 800b236:	e7d9      	b.n	800b1ec <__sfp+0x1c>
 800b238:	2104      	movs	r1, #4
 800b23a:	4638      	mov	r0, r7
 800b23c:	f7ff ff62 	bl	800b104 <__sfmoreglue>
 800b240:	4604      	mov	r4, r0
 800b242:	6030      	str	r0, [r6, #0]
 800b244:	2800      	cmp	r0, #0
 800b246:	d1d5      	bne.n	800b1f4 <__sfp+0x24>
 800b248:	f7ff ff78 	bl	800b13c <__sfp_lock_release>
 800b24c:	230c      	movs	r3, #12
 800b24e:	603b      	str	r3, [r7, #0]
 800b250:	e7ee      	b.n	800b230 <__sfp+0x60>
 800b252:	bf00      	nop
 800b254:	0800b5a0 	.word	0x0800b5a0
 800b258:	ffff0001 	.word	0xffff0001

0800b25c <_fwalk_reent>:
 800b25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b260:	4606      	mov	r6, r0
 800b262:	4688      	mov	r8, r1
 800b264:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b268:	2700      	movs	r7, #0
 800b26a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b26e:	f1b9 0901 	subs.w	r9, r9, #1
 800b272:	d505      	bpl.n	800b280 <_fwalk_reent+0x24>
 800b274:	6824      	ldr	r4, [r4, #0]
 800b276:	2c00      	cmp	r4, #0
 800b278:	d1f7      	bne.n	800b26a <_fwalk_reent+0xe>
 800b27a:	4638      	mov	r0, r7
 800b27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b280:	89ab      	ldrh	r3, [r5, #12]
 800b282:	2b01      	cmp	r3, #1
 800b284:	d907      	bls.n	800b296 <_fwalk_reent+0x3a>
 800b286:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b28a:	3301      	adds	r3, #1
 800b28c:	d003      	beq.n	800b296 <_fwalk_reent+0x3a>
 800b28e:	4629      	mov	r1, r5
 800b290:	4630      	mov	r0, r6
 800b292:	47c0      	blx	r8
 800b294:	4307      	orrs	r7, r0
 800b296:	3568      	adds	r5, #104	; 0x68
 800b298:	e7e9      	b.n	800b26e <_fwalk_reent+0x12>

0800b29a <__retarget_lock_init_recursive>:
 800b29a:	4770      	bx	lr

0800b29c <__retarget_lock_acquire_recursive>:
 800b29c:	4770      	bx	lr

0800b29e <__retarget_lock_release_recursive>:
 800b29e:	4770      	bx	lr

0800b2a0 <__swhatbuf_r>:
 800b2a0:	b570      	push	{r4, r5, r6, lr}
 800b2a2:	460e      	mov	r6, r1
 800b2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a8:	2900      	cmp	r1, #0
 800b2aa:	b096      	sub	sp, #88	; 0x58
 800b2ac:	4614      	mov	r4, r2
 800b2ae:	461d      	mov	r5, r3
 800b2b0:	da07      	bge.n	800b2c2 <__swhatbuf_r+0x22>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	602b      	str	r3, [r5, #0]
 800b2b6:	89b3      	ldrh	r3, [r6, #12]
 800b2b8:	061a      	lsls	r2, r3, #24
 800b2ba:	d410      	bmi.n	800b2de <__swhatbuf_r+0x3e>
 800b2bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2c0:	e00e      	b.n	800b2e0 <__swhatbuf_r+0x40>
 800b2c2:	466a      	mov	r2, sp
 800b2c4:	f000 f902 	bl	800b4cc <_fstat_r>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	dbf2      	blt.n	800b2b2 <__swhatbuf_r+0x12>
 800b2cc:	9a01      	ldr	r2, [sp, #4]
 800b2ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b2d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b2d6:	425a      	negs	r2, r3
 800b2d8:	415a      	adcs	r2, r3
 800b2da:	602a      	str	r2, [r5, #0]
 800b2dc:	e7ee      	b.n	800b2bc <__swhatbuf_r+0x1c>
 800b2de:	2340      	movs	r3, #64	; 0x40
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	6023      	str	r3, [r4, #0]
 800b2e4:	b016      	add	sp, #88	; 0x58
 800b2e6:	bd70      	pop	{r4, r5, r6, pc}

0800b2e8 <__smakebuf_r>:
 800b2e8:	898b      	ldrh	r3, [r1, #12]
 800b2ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2ec:	079d      	lsls	r5, r3, #30
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	460c      	mov	r4, r1
 800b2f2:	d507      	bpl.n	800b304 <__smakebuf_r+0x1c>
 800b2f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	6123      	str	r3, [r4, #16]
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	6163      	str	r3, [r4, #20]
 800b300:	b002      	add	sp, #8
 800b302:	bd70      	pop	{r4, r5, r6, pc}
 800b304:	ab01      	add	r3, sp, #4
 800b306:	466a      	mov	r2, sp
 800b308:	f7ff ffca 	bl	800b2a0 <__swhatbuf_r>
 800b30c:	9900      	ldr	r1, [sp, #0]
 800b30e:	4605      	mov	r5, r0
 800b310:	4630      	mov	r0, r6
 800b312:	f7ff f97f 	bl	800a614 <_malloc_r>
 800b316:	b948      	cbnz	r0, 800b32c <__smakebuf_r+0x44>
 800b318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b31c:	059a      	lsls	r2, r3, #22
 800b31e:	d4ef      	bmi.n	800b300 <__smakebuf_r+0x18>
 800b320:	f023 0303 	bic.w	r3, r3, #3
 800b324:	f043 0302 	orr.w	r3, r3, #2
 800b328:	81a3      	strh	r3, [r4, #12]
 800b32a:	e7e3      	b.n	800b2f4 <__smakebuf_r+0xc>
 800b32c:	4b0d      	ldr	r3, [pc, #52]	; (800b364 <__smakebuf_r+0x7c>)
 800b32e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	6020      	str	r0, [r4, #0]
 800b334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b338:	81a3      	strh	r3, [r4, #12]
 800b33a:	9b00      	ldr	r3, [sp, #0]
 800b33c:	6163      	str	r3, [r4, #20]
 800b33e:	9b01      	ldr	r3, [sp, #4]
 800b340:	6120      	str	r0, [r4, #16]
 800b342:	b15b      	cbz	r3, 800b35c <__smakebuf_r+0x74>
 800b344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b348:	4630      	mov	r0, r6
 800b34a:	f000 f8d1 	bl	800b4f0 <_isatty_r>
 800b34e:	b128      	cbz	r0, 800b35c <__smakebuf_r+0x74>
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	f023 0303 	bic.w	r3, r3, #3
 800b356:	f043 0301 	orr.w	r3, r3, #1
 800b35a:	81a3      	strh	r3, [r4, #12]
 800b35c:	89a0      	ldrh	r0, [r4, #12]
 800b35e:	4305      	orrs	r5, r0
 800b360:	81a5      	strh	r5, [r4, #12]
 800b362:	e7cd      	b.n	800b300 <__smakebuf_r+0x18>
 800b364:	0800b0f9 	.word	0x0800b0f9

0800b368 <_malloc_usable_size_r>:
 800b368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b36c:	1f18      	subs	r0, r3, #4
 800b36e:	2b00      	cmp	r3, #0
 800b370:	bfbc      	itt	lt
 800b372:	580b      	ldrlt	r3, [r1, r0]
 800b374:	18c0      	addlt	r0, r0, r3
 800b376:	4770      	bx	lr

0800b378 <_raise_r>:
 800b378:	291f      	cmp	r1, #31
 800b37a:	b538      	push	{r3, r4, r5, lr}
 800b37c:	4604      	mov	r4, r0
 800b37e:	460d      	mov	r5, r1
 800b380:	d904      	bls.n	800b38c <_raise_r+0x14>
 800b382:	2316      	movs	r3, #22
 800b384:	6003      	str	r3, [r0, #0]
 800b386:	f04f 30ff 	mov.w	r0, #4294967295
 800b38a:	bd38      	pop	{r3, r4, r5, pc}
 800b38c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b38e:	b112      	cbz	r2, 800b396 <_raise_r+0x1e>
 800b390:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b394:	b94b      	cbnz	r3, 800b3aa <_raise_r+0x32>
 800b396:	4620      	mov	r0, r4
 800b398:	f000 f830 	bl	800b3fc <_getpid_r>
 800b39c:	462a      	mov	r2, r5
 800b39e:	4601      	mov	r1, r0
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3a6:	f000 b817 	b.w	800b3d8 <_kill_r>
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d00a      	beq.n	800b3c4 <_raise_r+0x4c>
 800b3ae:	1c59      	adds	r1, r3, #1
 800b3b0:	d103      	bne.n	800b3ba <_raise_r+0x42>
 800b3b2:	2316      	movs	r3, #22
 800b3b4:	6003      	str	r3, [r0, #0]
 800b3b6:	2001      	movs	r0, #1
 800b3b8:	e7e7      	b.n	800b38a <_raise_r+0x12>
 800b3ba:	2400      	movs	r4, #0
 800b3bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	4798      	blx	r3
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	e7e0      	b.n	800b38a <_raise_r+0x12>

0800b3c8 <raise>:
 800b3c8:	4b02      	ldr	r3, [pc, #8]	; (800b3d4 <raise+0xc>)
 800b3ca:	4601      	mov	r1, r0
 800b3cc:	6818      	ldr	r0, [r3, #0]
 800b3ce:	f7ff bfd3 	b.w	800b378 <_raise_r>
 800b3d2:	bf00      	nop
 800b3d4:	20000440 	.word	0x20000440

0800b3d8 <_kill_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4d07      	ldr	r5, [pc, #28]	; (800b3f8 <_kill_r+0x20>)
 800b3dc:	2300      	movs	r3, #0
 800b3de:	4604      	mov	r4, r0
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	4611      	mov	r1, r2
 800b3e4:	602b      	str	r3, [r5, #0]
 800b3e6:	f7f6 fe1d 	bl	8002024 <_kill>
 800b3ea:	1c43      	adds	r3, r0, #1
 800b3ec:	d102      	bne.n	800b3f4 <_kill_r+0x1c>
 800b3ee:	682b      	ldr	r3, [r5, #0]
 800b3f0:	b103      	cbz	r3, 800b3f4 <_kill_r+0x1c>
 800b3f2:	6023      	str	r3, [r4, #0]
 800b3f4:	bd38      	pop	{r3, r4, r5, pc}
 800b3f6:	bf00      	nop
 800b3f8:	20001260 	.word	0x20001260

0800b3fc <_getpid_r>:
 800b3fc:	f7f6 be0a 	b.w	8002014 <_getpid>

0800b400 <__sread>:
 800b400:	b510      	push	{r4, lr}
 800b402:	460c      	mov	r4, r1
 800b404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b408:	f000 f894 	bl	800b534 <_read_r>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	bfab      	itete	ge
 800b410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b412:	89a3      	ldrhlt	r3, [r4, #12]
 800b414:	181b      	addge	r3, r3, r0
 800b416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b41a:	bfac      	ite	ge
 800b41c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b41e:	81a3      	strhlt	r3, [r4, #12]
 800b420:	bd10      	pop	{r4, pc}

0800b422 <__swrite>:
 800b422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b426:	461f      	mov	r7, r3
 800b428:	898b      	ldrh	r3, [r1, #12]
 800b42a:	05db      	lsls	r3, r3, #23
 800b42c:	4605      	mov	r5, r0
 800b42e:	460c      	mov	r4, r1
 800b430:	4616      	mov	r6, r2
 800b432:	d505      	bpl.n	800b440 <__swrite+0x1e>
 800b434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b438:	2302      	movs	r3, #2
 800b43a:	2200      	movs	r2, #0
 800b43c:	f000 f868 	bl	800b510 <_lseek_r>
 800b440:	89a3      	ldrh	r3, [r4, #12]
 800b442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b44a:	81a3      	strh	r3, [r4, #12]
 800b44c:	4632      	mov	r2, r6
 800b44e:	463b      	mov	r3, r7
 800b450:	4628      	mov	r0, r5
 800b452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b456:	f000 b817 	b.w	800b488 <_write_r>

0800b45a <__sseek>:
 800b45a:	b510      	push	{r4, lr}
 800b45c:	460c      	mov	r4, r1
 800b45e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b462:	f000 f855 	bl	800b510 <_lseek_r>
 800b466:	1c43      	adds	r3, r0, #1
 800b468:	89a3      	ldrh	r3, [r4, #12]
 800b46a:	bf15      	itete	ne
 800b46c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b46e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b476:	81a3      	strheq	r3, [r4, #12]
 800b478:	bf18      	it	ne
 800b47a:	81a3      	strhne	r3, [r4, #12]
 800b47c:	bd10      	pop	{r4, pc}

0800b47e <__sclose>:
 800b47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b482:	f000 b813 	b.w	800b4ac <_close_r>
	...

0800b488 <_write_r>:
 800b488:	b538      	push	{r3, r4, r5, lr}
 800b48a:	4d07      	ldr	r5, [pc, #28]	; (800b4a8 <_write_r+0x20>)
 800b48c:	4604      	mov	r4, r0
 800b48e:	4608      	mov	r0, r1
 800b490:	4611      	mov	r1, r2
 800b492:	2200      	movs	r2, #0
 800b494:	602a      	str	r2, [r5, #0]
 800b496:	461a      	mov	r2, r3
 800b498:	f7f6 fdfb 	bl	8002092 <_write>
 800b49c:	1c43      	adds	r3, r0, #1
 800b49e:	d102      	bne.n	800b4a6 <_write_r+0x1e>
 800b4a0:	682b      	ldr	r3, [r5, #0]
 800b4a2:	b103      	cbz	r3, 800b4a6 <_write_r+0x1e>
 800b4a4:	6023      	str	r3, [r4, #0]
 800b4a6:	bd38      	pop	{r3, r4, r5, pc}
 800b4a8:	20001260 	.word	0x20001260

0800b4ac <_close_r>:
 800b4ac:	b538      	push	{r3, r4, r5, lr}
 800b4ae:	4d06      	ldr	r5, [pc, #24]	; (800b4c8 <_close_r+0x1c>)
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	4608      	mov	r0, r1
 800b4b6:	602b      	str	r3, [r5, #0]
 800b4b8:	f7f6 fe07 	bl	80020ca <_close>
 800b4bc:	1c43      	adds	r3, r0, #1
 800b4be:	d102      	bne.n	800b4c6 <_close_r+0x1a>
 800b4c0:	682b      	ldr	r3, [r5, #0]
 800b4c2:	b103      	cbz	r3, 800b4c6 <_close_r+0x1a>
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	bd38      	pop	{r3, r4, r5, pc}
 800b4c8:	20001260 	.word	0x20001260

0800b4cc <_fstat_r>:
 800b4cc:	b538      	push	{r3, r4, r5, lr}
 800b4ce:	4d07      	ldr	r5, [pc, #28]	; (800b4ec <_fstat_r+0x20>)
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	4608      	mov	r0, r1
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	602b      	str	r3, [r5, #0]
 800b4da:	f7f6 fe02 	bl	80020e2 <_fstat>
 800b4de:	1c43      	adds	r3, r0, #1
 800b4e0:	d102      	bne.n	800b4e8 <_fstat_r+0x1c>
 800b4e2:	682b      	ldr	r3, [r5, #0]
 800b4e4:	b103      	cbz	r3, 800b4e8 <_fstat_r+0x1c>
 800b4e6:	6023      	str	r3, [r4, #0]
 800b4e8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ea:	bf00      	nop
 800b4ec:	20001260 	.word	0x20001260

0800b4f0 <_isatty_r>:
 800b4f0:	b538      	push	{r3, r4, r5, lr}
 800b4f2:	4d06      	ldr	r5, [pc, #24]	; (800b50c <_isatty_r+0x1c>)
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	4608      	mov	r0, r1
 800b4fa:	602b      	str	r3, [r5, #0]
 800b4fc:	f7f6 fe01 	bl	8002102 <_isatty>
 800b500:	1c43      	adds	r3, r0, #1
 800b502:	d102      	bne.n	800b50a <_isatty_r+0x1a>
 800b504:	682b      	ldr	r3, [r5, #0]
 800b506:	b103      	cbz	r3, 800b50a <_isatty_r+0x1a>
 800b508:	6023      	str	r3, [r4, #0]
 800b50a:	bd38      	pop	{r3, r4, r5, pc}
 800b50c:	20001260 	.word	0x20001260

0800b510 <_lseek_r>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	4d07      	ldr	r5, [pc, #28]	; (800b530 <_lseek_r+0x20>)
 800b514:	4604      	mov	r4, r0
 800b516:	4608      	mov	r0, r1
 800b518:	4611      	mov	r1, r2
 800b51a:	2200      	movs	r2, #0
 800b51c:	602a      	str	r2, [r5, #0]
 800b51e:	461a      	mov	r2, r3
 800b520:	f7f6 fdfa 	bl	8002118 <_lseek>
 800b524:	1c43      	adds	r3, r0, #1
 800b526:	d102      	bne.n	800b52e <_lseek_r+0x1e>
 800b528:	682b      	ldr	r3, [r5, #0]
 800b52a:	b103      	cbz	r3, 800b52e <_lseek_r+0x1e>
 800b52c:	6023      	str	r3, [r4, #0]
 800b52e:	bd38      	pop	{r3, r4, r5, pc}
 800b530:	20001260 	.word	0x20001260

0800b534 <_read_r>:
 800b534:	b538      	push	{r3, r4, r5, lr}
 800b536:	4d07      	ldr	r5, [pc, #28]	; (800b554 <_read_r+0x20>)
 800b538:	4604      	mov	r4, r0
 800b53a:	4608      	mov	r0, r1
 800b53c:	4611      	mov	r1, r2
 800b53e:	2200      	movs	r2, #0
 800b540:	602a      	str	r2, [r5, #0]
 800b542:	461a      	mov	r2, r3
 800b544:	f7f6 fd88 	bl	8002058 <_read>
 800b548:	1c43      	adds	r3, r0, #1
 800b54a:	d102      	bne.n	800b552 <_read_r+0x1e>
 800b54c:	682b      	ldr	r3, [r5, #0]
 800b54e:	b103      	cbz	r3, 800b552 <_read_r+0x1e>
 800b550:	6023      	str	r3, [r4, #0]
 800b552:	bd38      	pop	{r3, r4, r5, pc}
 800b554:	20001260 	.word	0x20001260

0800b558 <_init>:
 800b558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b55a:	bf00      	nop
 800b55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b55e:	bc08      	pop	{r3}
 800b560:	469e      	mov	lr, r3
 800b562:	4770      	bx	lr

0800b564 <_fini>:
 800b564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b566:	bf00      	nop
 800b568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b56a:	bc08      	pop	{r3}
 800b56c:	469e      	mov	lr, r3
 800b56e:	4770      	bx	lr
