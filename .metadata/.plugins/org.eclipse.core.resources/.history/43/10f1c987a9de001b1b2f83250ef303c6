/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "dma.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "ADS8688.h"
#include "stdio.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

// macro and pattern to print binary numbers
#define BYTE_TO_BIN_PAT "%c%c%c%c%c%c%c%c"
#define BYTE_TO_BIN(byte)		\
	(byte & 0x80 ? '1' : '0'),	\
	(byte & 0x40 ? '1' : '0'),	\
	(byte & 0x20 ? '1' : '0'),	\
	(byte & 0x10 ? '1' : '0'),	\
	(byte & 0x08 ? '1' : '0'),	\
	(byte & 0x04 ? '1' : '0'),	\
	(byte & 0x02 ? '1' : '0'),	\
	(byte & 0x01 ? '1' : '0')


/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

// ADS variables
//大彩屏指�????
uint8_t scream_head=0xEE,screen_end[4]={0xFF,0xFC,0xFF,0xFF};
//触发状�??   0已触�?    1未触�?
uint8_t chufazhuangtai=0;

//通道触发          1,1通道触发,2,2通道触发
uint8_t trigger_mode;
//通道显示与否    1显示�????0不显�????
uint8_t ch1_show=1,ch2_show=1;

int count_caiyang=0,count_pinlv=0;      //定时器计数器
//垂直刻度    0�????10mv        1�????100mv          2�????1v
uint8_t chuizhi_scale=2;

//水平刻度     0�??????????????????1ms档位     1,10ms档位       2,100ms档位
uint8_t shuiping_scale=0;
//水平刻度对应的分�??????????????????
int fenpin_count[3]={1,10,100};
//采样总时间（�??????????????????大计数器计数值）
int max_count[3]={502,5020,50200};
//采样到的�??????????????????
uint16_t ch1_values[502],ch2_values[502];
//两个通道采样到的点的�??????????????????大�?�和�??????????????????小�??
uint16_t ch1_max,ch2_max,ch1_min,ch2_min;
//触发电平
uint16_t chufa_volts=0;
//触发模式   0上升沿触�??????????????????    1下降沿触�??????????????????
uint8_t chufa_mode=0;
//触发通道  0,�??????????????????通道   1，二通道
uint8_t chufa_ch=0;
//两个通道的合计�??  （用来测量平均�?�）
int total_ch1,total_ch2;
int i;

//指令
uint8_t ch1_show_head[10]={0xEE,0xB1,0x32,0x00,0x00,0x00,0x02,0x00,0x01,0xf4};
uint8_t ch2_show_head[10]={0xEE,0xB1,0x32,0x00,0x00,0x00,0x02,0x01,0x01,0xf4};


//收到的指令
uint8_t R_alldata[256];   //指令完整内容
uint8_t R_onedata;    //指令单元
uint16_t R_place=0;         //接收指令的位置



//两个通道的方波周期和占空�???????
uint32_t ch1_period=0,ch1_duty,ch2_period,ch2_duty;


ADS8688 ads;
//采样到的�??????????????????
uint16_t ads_data[2];

uint8_t rxbuf[2] = {0};
uint8_t txbuf[2] = {0x00, 0x00};

uint8_t CH1_ON=0;
uint8_t CH2_ON=0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void print(char *msg, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  HAL_Delay(200);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_TIM2_Init();
  MX_SPI3_Init();
  MX_TIM5_Init();
  MX_TIM3_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
  HAL_TIM_IC_Start_DMA(&htim2,TIM_CHANNEL_1,&ch1_period,1);
  HAL_TIM_Base_Start(&htim5);
  HAL_TIM_IC_Start_DMA(&htim5,TIM_CHANNEL_2,&ch2_period,1);
  htim2.State = HAL_TIM_STATE_READY;
  htim3.State = HAL_TIM_STATE_READY;
  //HAL_TIM_IC_Start_DMA(&htim2,TIM_CHANNEL_2,&ch1_duty,1);

  ADS8688_Init(&ads, &hspi3, SPI3_CS_GPIO_Port, SPI3_CS_Pin);
  HAL_Delay(500);
  //ADS_Read_All_Raw(&ads, ads_data);
  HAL_TIM_Base_Start_IT(&htim3);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//		  for(int i=0; i<2; i++) {
//			  if(i==1)
//			  {
//			  printf("CHN_%d: %u %u    "BYTE_TO_BIN_PAT" "BYTE_TO_BIN_PAT"  %f\n", i, (uint16_t)(ads_data[0]), (uint16_t)(ads_data[1]) ,  BYTE_TO_BIN(ads_data[1]), BYTE_TO_BIN(ads_data[0]), volt1[0]);
//				//printf("%d",12);
//			  }
//			  else
//			  {
//			  printf("CHN_%d: %u %u    "BYTE_TO_BIN_PAT" "BYTE_TO_BIN_PAT"  %f\n", i, (uint16_t)(ads_data[0]), (uint16_t)(ads_data[1]) ,  BYTE_TO_BIN(ads_data[1]), BYTE_TO_BIN(ads_data[0]), volt2[0]);
//			  }
//		  }


  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
}

/* USER CODE BEGIN 4 */
//计数完后处理数据的函�??????????????????
void FinishCount(){

	for(i=0;i<=500;i++)
	{
			  ch1_values[i]=(uint16_t)(ch1_values[i]<<8|ch1_values[i]>>8);
			  ch2_values[i]=(uint16_t)(ch2_values[i]<<8|ch2_values[i]>>8);
	}
//	for(i=0;i<=3;i++)
//	{
//		HAL_UART_Transmit(&huart2, (uint8_t *)&ch1_values[125*i+1], 250, 5);
//		HAL_UART_Transmit(&huart2, "\0", 1, 5);
//	}

HAL_UART_Transmit(&huart2, (uint8_t *)ch1_show_head, 10, 5);
	for(i=1;i<=501;i++){
		HAL_UART_Transmit(&huart2, (uint8_t *)&ch1_values[i], 1, 5);
	}
HAL_UART_Transmit(&huart2, (uint8_t *)screen_end, 4, 5);

HAL_UART_Transmit(&huart2, (uint8_t *)ch2_show_head, 10, 5);
	for(i=1;i<=501;i++){
		HAL_UART_Transmit(&huart2, (uint8_t *)&ch2_values[i], 1, 5);
	}
HAL_UART_Transmit(&huart2, (uint8_t *)screen_end, 4, 5);

	chufazhuangtai=1;
	HAL_TIM_Base_Start_IT(&htim3);

}

int Dosomething(){
//	//如果按钮被按下
//	if(R_alldata[1]==0xB1&&R_alldata[2]==0x11&&R_alldata[3]==0x00&&R_alldata[4]==0x00&&R_alldata[5]==0x00&&R_alldata[7]==0x10&&R_alldata[8]==0x01&&)
//	{
//
//
//	}
}




/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
