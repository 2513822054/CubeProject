
ADS8688_444444444444444444444444444444444444444.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003070  08003070  00013070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003088  08003088  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003088  08003088  00013088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003090  08003090  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003090  08003090  00013090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  080030a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080030a4  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000908e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016fd  00000000  00000000  000290ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0002a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002b000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020533  00000000  00000000  0002b7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008de2  00000000  00000000  0004bce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3eb3  00000000  00000000  00054ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118978  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002240  00000000  00000000  001189cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003058 	.word	0x08003058

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003058 	.word	0x08003058

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b96e 	b.w	8000ca8 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468c      	mov	ip, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f040 8083 	bne.w	8000afa <__udivmoddi4+0x116>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4617      	mov	r7, r2
 80009f8:	d947      	bls.n	8000a8a <__udivmoddi4+0xa6>
 80009fa:	fab2 f282 	clz	r2, r2
 80009fe:	b142      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	f1c2 0020 	rsb	r0, r2, #32
 8000a04:	fa24 f000 	lsr.w	r0, r4, r0
 8000a08:	4091      	lsls	r1, r2
 8000a0a:	4097      	lsls	r7, r2
 8000a0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbbc f6f8 	udiv	r6, ip, r8
 8000a1c:	fa1f fe87 	uxth.w	lr, r7
 8000a20:	fb08 c116 	mls	r1, r8, r6, ip
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f10e 	mul.w	r1, r6, lr
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a36:	f080 8119 	bcs.w	8000c6c <__udivmoddi4+0x288>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8116 	bls.w	8000c6c <__udivmoddi4+0x288>
 8000a40:	3e02      	subs	r6, #2
 8000a42:	443b      	add	r3, r7
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a58:	45a6      	cmp	lr, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8105 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a66:	45a6      	cmp	lr, r4
 8000a68:	f240 8102 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	443c      	add	r4, r7
 8000a70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a74:	eba4 040e 	sub.w	r4, r4, lr
 8000a78:	2600      	movs	r6, #0
 8000a7a:	b11d      	cbz	r5, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c5 4300 	strd	r4, r3, [r5]
 8000a84:	4631      	mov	r1, r6
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	b902      	cbnz	r2, 8000a8e <__udivmoddi4+0xaa>
 8000a8c:	deff      	udf	#255	; 0xff
 8000a8e:	fab2 f282 	clz	r2, r2
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d150      	bne.n	8000b38 <__udivmoddi4+0x154>
 8000a96:	1bcb      	subs	r3, r1, r7
 8000a98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a9c:	fa1f f887 	uxth.w	r8, r7
 8000aa0:	2601      	movs	r6, #1
 8000aa2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000aa6:	0c21      	lsrs	r1, r4, #16
 8000aa8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ab4:	428b      	cmp	r3, r1
 8000ab6:	d907      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 8000ab8:	1879      	adds	r1, r7, r1
 8000aba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000abe:	d202      	bcs.n	8000ac6 <__udivmoddi4+0xe2>
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	f200 80e9 	bhi.w	8000c98 <__udivmoddi4+0x2b4>
 8000ac6:	4684      	mov	ip, r0
 8000ac8:	1ac9      	subs	r1, r1, r3
 8000aca:	b2a3      	uxth	r3, r4
 8000acc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ad4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ad8:	fb08 f800 	mul.w	r8, r8, r0
 8000adc:	45a0      	cmp	r8, r4
 8000ade:	d907      	bls.n	8000af0 <__udivmoddi4+0x10c>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x10a>
 8000ae8:	45a0      	cmp	r8, r4
 8000aea:	f200 80d9 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000aee:	4618      	mov	r0, r3
 8000af0:	eba4 0408 	sub.w	r4, r4, r8
 8000af4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000af8:	e7bf      	b.n	8000a7a <__udivmoddi4+0x96>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x12e>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	f000 80b1 	beq.w	8000c66 <__udivmoddi4+0x282>
 8000b04:	2600      	movs	r6, #0
 8000b06:	e9c5 0100 	strd	r0, r1, [r5]
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	4631      	mov	r1, r6
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	fab3 f683 	clz	r6, r3
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d14a      	bne.n	8000bb0 <__udivmoddi4+0x1cc>
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d302      	bcc.n	8000b24 <__udivmoddi4+0x140>
 8000b1e:	4282      	cmp	r2, r0
 8000b20:	f200 80b8 	bhi.w	8000c94 <__udivmoddi4+0x2b0>
 8000b24:	1a84      	subs	r4, r0, r2
 8000b26:	eb61 0103 	sbc.w	r1, r1, r3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d0a8      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000b32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b36:	e7a5      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000b38:	f1c2 0320 	rsb	r3, r2, #32
 8000b3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b40:	4097      	lsls	r7, r2
 8000b42:	fa01 f002 	lsl.w	r0, r1, r2
 8000b46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b4a:	40d9      	lsrs	r1, r3
 8000b4c:	4330      	orrs	r0, r6
 8000b4e:	0c03      	lsrs	r3, r0, #16
 8000b50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f108 	mul.w	r1, r6, r8
 8000b64:	4299      	cmp	r1, r3
 8000b66:	fa04 f402 	lsl.w	r4, r4, r2
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x19c>
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b72:	f080 808d 	bcs.w	8000c90 <__udivmoddi4+0x2ac>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 808a 	bls.w	8000c90 <__udivmoddi4+0x2ac>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	443b      	add	r3, r7
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b281      	uxth	r1, r0
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b90:	fb00 f308 	mul.w	r3, r0, r8
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x1c4>
 8000b98:	1879      	adds	r1, r7, r1
 8000b9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b9e:	d273      	bcs.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d971      	bls.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	4439      	add	r1, r7
 8000ba8:	1acb      	subs	r3, r1, r3
 8000baa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bae:	e778      	b.n	8000aa2 <__udivmoddi4+0xbe>
 8000bb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bbc:	431c      	orrs	r4, r3
 8000bbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	0c3b      	lsrs	r3, r7, #16
 8000bd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd6:	fa1f f884 	uxth.w	r8, r4
 8000bda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000be2:	fb09 fa08 	mul.w	sl, r9, r8
 8000be6:	458a      	cmp	sl, r1
 8000be8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bec:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x220>
 8000bf2:	1861      	adds	r1, r4, r1
 8000bf4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bf8:	d248      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfa:	458a      	cmp	sl, r1
 8000bfc:	d946      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000c02:	4421      	add	r1, r4
 8000c04:	eba1 010a 	sub.w	r1, r1, sl
 8000c08:	b2bf      	uxth	r7, r7
 8000c0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c16:	fb00 f808 	mul.w	r8, r0, r8
 8000c1a:	45b8      	cmp	r8, r7
 8000c1c:	d907      	bls.n	8000c2e <__udivmoddi4+0x24a>
 8000c1e:	19e7      	adds	r7, r4, r7
 8000c20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c24:	d22e      	bcs.n	8000c84 <__udivmoddi4+0x2a0>
 8000c26:	45b8      	cmp	r8, r7
 8000c28:	d92c      	bls.n	8000c84 <__udivmoddi4+0x2a0>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4427      	add	r7, r4
 8000c2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c32:	eba7 0708 	sub.w	r7, r7, r8
 8000c36:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3a:	454f      	cmp	r7, r9
 8000c3c:	46c6      	mov	lr, r8
 8000c3e:	4649      	mov	r1, r9
 8000c40:	d31a      	bcc.n	8000c78 <__udivmoddi4+0x294>
 8000c42:	d017      	beq.n	8000c74 <__udivmoddi4+0x290>
 8000c44:	b15d      	cbz	r5, 8000c5e <__udivmoddi4+0x27a>
 8000c46:	ebb3 020e 	subs.w	r2, r3, lr
 8000c4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c52:	40f2      	lsrs	r2, r6
 8000c54:	ea4c 0202 	orr.w	r2, ip, r2
 8000c58:	40f7      	lsrs	r7, r6
 8000c5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c5e:	2600      	movs	r6, #0
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e70b      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e9      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6fd      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c74:	4543      	cmp	r3, r8
 8000c76:	d2e5      	bcs.n	8000c44 <__udivmoddi4+0x260>
 8000c78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7df      	b.n	8000c44 <__udivmoddi4+0x260>
 8000c84:	4608      	mov	r0, r1
 8000c86:	e7d2      	b.n	8000c2e <__udivmoddi4+0x24a>
 8000c88:	4660      	mov	r0, ip
 8000c8a:	e78d      	b.n	8000ba8 <__udivmoddi4+0x1c4>
 8000c8c:	4681      	mov	r9, r0
 8000c8e:	e7b9      	b.n	8000c04 <__udivmoddi4+0x220>
 8000c90:	4666      	mov	r6, ip
 8000c92:	e775      	b.n	8000b80 <__udivmoddi4+0x19c>
 8000c94:	4630      	mov	r0, r6
 8000c96:	e74a      	b.n	8000b2e <__udivmoddi4+0x14a>
 8000c98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c9c:	4439      	add	r1, r7
 8000c9e:	e713      	b.n	8000ac8 <__udivmoddi4+0xe4>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	e724      	b.n	8000af0 <__udivmoddi4+0x10c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <ADS8688_Init>:
#include "ADS8688.h"

/*
 * INITIALISATION
 */
uint8_t ADS8688_Init(ADS8688 *ads, SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	807b      	strh	r3, [r7, #2]
/* Store interface parameters in struct */
	ads->spiHandle 		= spiHandle;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	601a      	str	r2, [r3, #0]
	ads->csPinBank 	= csPinBank;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	605a      	str	r2, [r3, #4]
	ads->csPin 		= csPin;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	887a      	ldrh	r2, [r7, #2]
 8000cca:	811a      	strh	r2, [r3, #8]

	uint8_t ads_data[2] = {0};
 8000ccc:	2300      	movs	r3, #0
 8000cce:	82bb      	strh	r3, [r7, #20]
	uint8_t state = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	75fb      	strb	r3, [r7, #23]
	// reset all registers to default
	state += ADS_Cmd_Write(ads, RST, ads_data);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	461a      	mov	r2, r3
 8000cda:	2185      	movs	r1, #133	; 0x85
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f000 f8b8 	bl	8000e52 <ADS_Cmd_Write>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	7dfb      	ldrb	r3, [r7, #23]
 8000ce8:	4413      	add	r3, r2
 8000cea:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 8000cec:	2064      	movs	r0, #100	; 0x64
 8000cee:	f000 fc6b 	bl	80015c8 <HAL_Delay>
	// send a no_op message to the ADS to enter IDLE mode
	state += ADS_Cmd_Write(ads, NO_OP, ads_data);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f000 f8a9 	bl	8000e52 <ADS_Cmd_Write>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	7dfb      	ldrb	r3, [r7, #23]
 8000d06:	4413      	add	r3, r2
 8000d08:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000d0a:	200a      	movs	r0, #10
 8000d0c:	f000 fc5c 	bl	80015c8 <HAL_Delay>
	// enable auto transmit for all inputs(datasheet page 54) or as many as you want
	// if you want only some of the inputs enabled, make sure to power down the unused ones
	ads_data[0] = 0x03;
 8000d10:	2303      	movs	r3, #3
 8000d12:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, AUTO_SEQ_EN, ads_data);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	461a      	mov	r2, r3
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	f000 f85d 	bl	8000ddc <ADS_Prog_Write>
 8000d22:	4603      	mov	r3, r0
 8000d24:	461a      	mov	r2, r3
 8000d26:	7dfb      	ldrb	r3, [r7, #23]
 8000d28:	4413      	add	r3, r2
 8000d2a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000d2c:	200a      	movs	r0, #10
 8000d2e:	f000 fc4b 	bl	80015c8 <HAL_Delay>
	// set the desired features such as device id (if multiple devices are used), alarm enable/disable and output format
	ads_data[0] = 0x03; // here i chose id = 0, alarm = disabled and SDO_format = 3 (datasheet page 56)
 8000d32:	2303      	movs	r3, #3
 8000d34:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, F_S, ads_data);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f000 f84c 	bl	8000ddc <ADS_Prog_Write>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	7dfb      	ldrb	r3, [r7, #23]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000d4e:	200a      	movs	r0, #10
 8000d50:	f000 fc3a 	bl	80015c8 <HAL_Delay>
	// set all channels ranges(page 57)
	// 0x05 -> Input range is set to 0 to 2.5 x VREF (for VREF=5 volts, this means 0-10 volts range)
	// 0x06 -> Input range is set to 0 to 1.25 x VREF (for VREF=5 volts, this means 0-5 volts range)
	ads_data[0] = IR_5V;
 8000d54:	2301      	movs	r3, #1
 8000d56:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHIR_0, ads_data);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	2105      	movs	r1, #5
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f000 f83b 	bl	8000ddc <ADS_Prog_Write>
 8000d66:	4603      	mov	r3, r0
 8000d68:	461a      	mov	r2, r3
 8000d6a:	7dfb      	ldrb	r3, [r7, #23]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000d70:	200a      	movs	r0, #10
 8000d72:	f000 fc29 	bl	80015c8 <HAL_Delay>
	ads_data[0] = IR_5V;
 8000d76:	2301      	movs	r3, #1
 8000d78:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHIR_1, ads_data);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	461a      	mov	r2, r3
 8000d80:	2106      	movs	r1, #6
 8000d82:	68f8      	ldr	r0, [r7, #12]
 8000d84:	f000 f82a 	bl	8000ddc <ADS_Prog_Write>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	7dfb      	ldrb	r3, [r7, #23]
 8000d8e:	4413      	add	r3, r2
 8000d90:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000d92:	200a      	movs	r0, #10
 8000d94:	f000 fc18 	bl	80015c8 <HAL_Delay>
	ads_data[0] = 0xfc;
 8000d98:	23fc      	movs	r3, #252	; 0xfc
 8000d9a:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CH_PD, ads_data);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	461a      	mov	r2, r3
 8000da2:	2102      	movs	r1, #2
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f000 f819 	bl	8000ddc <ADS_Prog_Write>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	7dfb      	ldrb	r3, [r7, #23]
 8000db0:	4413      	add	r3, r2
 8000db2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000db4:	200a      	movs	r0, #10
 8000db6:	f000 fc07 	bl	80015c8 <HAL_Delay>
	// start the auto transmission by entering the appropriate state
	state += ADS_Cmd_Write(ads, AUTO_RST, ads_data);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	21a0      	movs	r1, #160	; 0xa0
 8000dc2:	68f8      	ldr	r0, [r7, #12]
 8000dc4:	f000 f845 	bl	8000e52 <ADS_Cmd_Write>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	7dfb      	ldrb	r3, [r7, #23]
 8000dce:	4413      	add	r3, r2
 8000dd0:	75fb      	strb	r3, [r7, #23]

	return state;
 8000dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <ADS_Prog_Write>:
	data[1] = rxbuf[3];
	return ret;
}

// after the write, data should contain the data (byte) written to the addressed register (check equality for evaluation)
HAL_StatusTypeDef ADS_Prog_Write(ADS8688 *ads, uint8_t addr, uint8_t *data) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af02      	add	r7, sp, #8
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	460b      	mov	r3, r1
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;
	uint8_t txbuf[2] = {data[0], (addr << 1 | 0x01)}; // [15:9]->address[6:0], [8]->1, [7:0]->data[7:0] (stm32 uses little endian so reverse it)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	753b      	strb	r3, [r7, #20]
 8000df0:	7afb      	ldrb	r3, [r7, #11]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	757b      	strb	r3, [r7, #21]
	uint8_t rxbuf[4];

	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_RESET);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6858      	ldr	r0, [r3, #4]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	891b      	ldrh	r3, [r3, #8]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f000 fe82 	bl	8001b14 <HAL_GPIO_WritePin>
	ret = HAL_SPI_TransmitReceive(ads->spiHandle, txbuf, rxbuf, 2, 10);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	f107 0210 	add.w	r2, r7, #16
 8000e18:	f107 0114 	add.w	r1, r7, #20
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2302      	movs	r3, #2
 8000e22:	f001 fb8e 	bl	8002542 <HAL_SPI_TransmitReceive>
 8000e26:	4603      	mov	r3, r0
 8000e28:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_SET);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	6858      	ldr	r0, [r3, #4]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	891b      	ldrh	r3, [r3, #8]
 8000e32:	2201      	movs	r2, #1
 8000e34:	4619      	mov	r1, r3
 8000e36:	f000 fe6d 	bl	8001b14 <HAL_GPIO_WritePin>

	data[0] = rxbuf[3];
 8000e3a:	7cfa      	ldrb	r2, [r7, #19]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3301      	adds	r3, #1
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
	return ret;
 8000e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <ADS_Cmd_Write>:

HAL_StatusTypeDef ADS_Cmd_Write(ADS8688 *ads, uint8_t cmd, uint8_t *data) {
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b088      	sub	sp, #32
 8000e56:	af02      	add	r7, sp, #8
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;
	uint8_t txbuf[2] = {0x00,cmd}; // [15:9]->address[6:0], [8]->1, [7:0]->data[7:0] (stm32 uses little endian so reverse it)
 8000e60:	2300      	movs	r3, #0
 8000e62:	753b      	strb	r3, [r7, #20]
 8000e64:	7afb      	ldrb	r3, [r7, #11]
 8000e66:	757b      	strb	r3, [r7, #21]
	uint8_t rxbuf[4];

	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_RESET);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6858      	ldr	r0, [r3, #4]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	891b      	ldrh	r3, [r3, #8]
 8000e70:	2200      	movs	r2, #0
 8000e72:	4619      	mov	r1, r3
 8000e74:	f000 fe4e 	bl	8001b14 <HAL_GPIO_WritePin>
	ret = HAL_SPI_TransmitReceive(ads->spiHandle, txbuf, rxbuf, 2, 10);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	6818      	ldr	r0, [r3, #0]
 8000e7c:	f107 0210 	add.w	r2, r7, #16
 8000e80:	f107 0114 	add.w	r1, r7, #20
 8000e84:	230a      	movs	r3, #10
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	2302      	movs	r3, #2
 8000e8a:	f001 fb5a 	bl	8002542 <HAL_SPI_TransmitReceive>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_SET);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6858      	ldr	r0, [r3, #4]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	891b      	ldrh	r3, [r3, #8]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f000 fe39 	bl	8001b14 <HAL_GPIO_WritePin>

	data[0] = rxbuf[2];
 8000ea2:	7cba      	ldrb	r2, [r7, #18]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	701a      	strb	r2, [r3, #0]
	data[1] = rxbuf[3];
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	7cfa      	ldrb	r2, [r7, #19]
 8000eae:	701a      	strb	r2, [r3, #0]
	return ret;
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <ADS_Read_All_Raw>:

HAL_StatusTypeDef ADS_Read_All_Raw(ADS8688 *ads, uint16_t *data) {
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;
	uint8_t ads_raw[2];
	for(int i=0; i<CHNS_NUM_READ; i++) {
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	e018      	b.n	8000efc <ADS_Read_All_Raw+0x42>
	  ret = ADS_Cmd_Write(ads, NO_OP, ads_raw);
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffbd 	bl	8000e52 <ADS_Cmd_Write>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	75fb      	strb	r3, [r7, #23]
	  data[i] = (int)((uint16_t)(ads_raw[1]<<8 | ads_raw[0]));
 8000edc:	7b7b      	ldrb	r3, [r7, #13]
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	b21a      	sxth	r2, r3
 8000ee2:	7b3b      	ldrb	r3, [r7, #12]
 8000ee4:	b21b      	sxth	r3, r3
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b219      	sxth	r1, r3
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	b28a      	uxth	r2, r1
 8000ef4:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<CHNS_NUM_READ; i++) {
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	dde3      	ble.n	8000eca <ADS_Read_All_Raw+0x10>
	}
	return ret;
 8000f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	0000      	movs	r0, r0
	...

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f16:	f000 fae5 	bl	80014e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(200);
 8000f1a:	20c8      	movs	r0, #200	; 0xc8
 8000f1c:	f000 fb54 	bl	80015c8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f20:	f000 f89e 	bl	8001060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f24:	f000 f968 	bl	80011f8 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000f28:	f000 f904 	bl	8001134 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000f2c:	f000 f93a 	bl	80011a4 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  ADS8688_Init(&ads, &hspi3, SPI3_CS_GPIO_Port, SPI3_CS_Pin);
 8000f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f34:	4a44      	ldr	r2, [pc, #272]	; (8001048 <main+0x138>)
 8000f36:	4945      	ldr	r1, [pc, #276]	; (800104c <main+0x13c>)
 8000f38:	4845      	ldr	r0, [pc, #276]	; (8001050 <main+0x140>)
 8000f3a:	f7ff feb7 	bl	8000cac <ADS8688_Init>
  {
	  //current = HAL_GetTick();
	      /* USER CODE END WHILE */

	      /* USER CODE BEGIN 3 */
	  ADS_Read_All_Raw(&ads, ads_data);
 8000f3e:	4945      	ldr	r1, [pc, #276]	; (8001054 <main+0x144>)
 8000f40:	4843      	ldr	r0, [pc, #268]	; (8001050 <main+0x140>)
 8000f42:	f7ff ffba 	bl	8000eba <ADS_Read_All_Raw>
	  		  for(int i=0; i<2; i++) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	e069      	b.n	8001020 <main+0x110>
	  			  if(i==0){
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d12f      	bne.n	8000fb2 <main+0xa2>
	  				  volt[i] = (((float)(ads_data[i]+3))*10.24/65535.0)-5.12;
 8000f52:	4a40      	ldr	r2, [pc, #256]	; (8001054 <main+0x144>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f5a:	3303      	adds	r3, #3
 8000f5c:	ee07 3a90 	vmov	s15, r3
 8000f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f64:	ee17 0a90 	vmov	r0, s15
 8000f68:	f7ff fa92 	bl	8000490 <__aeabi_f2d>
 8000f6c:	a330      	add	r3, pc, #192	; (adr r3, 8001030 <main+0x120>)
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	f7ff fae5 	bl	8000540 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	a32e      	add	r3, pc, #184	; (adr r3, 8001038 <main+0x128>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	f7ff fc06 	bl	8000794 <__aeabi_ddiv>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	a32b      	add	r3, pc, #172	; (adr r3, 8001040 <main+0x130>)
 8000f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f96:	f7ff f91b 	bl	80001d0 <__aeabi_dsub>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f7ff fcdf 	bl	8000964 <__aeabi_d2iz>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	492b      	ldr	r1, [pc, #172]	; (8001058 <main+0x148>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000fb0:	e02d      	b.n	800100e <main+0xfe>
	  			  }
	  			  else{
	  				  volt[i] = (((float)(ads_data[i]))*10.24/65535.0)-5.12;
 8000fb2:	4a28      	ldr	r2, [pc, #160]	; (8001054 <main+0x144>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc2:	ee17 0a90 	vmov	r0, s15
 8000fc6:	f7ff fa63 	bl	8000490 <__aeabi_f2d>
 8000fca:	a319      	add	r3, pc, #100	; (adr r3, 8001030 <main+0x120>)
 8000fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd0:	f7ff fab6 	bl	8000540 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	a316      	add	r3, pc, #88	; (adr r3, 8001038 <main+0x128>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff fbd7 	bl	8000794 <__aeabi_ddiv>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	a314      	add	r3, pc, #80	; (adr r3, 8001040 <main+0x130>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff f8ec 	bl	80001d0 <__aeabi_dsub>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f7ff fcb0 	bl	8000964 <__aeabi_d2iz>
 8001004:	4602      	mov	r2, r0
 8001006:	4914      	ldr	r1, [pc, #80]	; (8001058 <main+0x148>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  			  }
	  			  //printf("CHN_%d: %u %u    "BYTE_TO_BIN_PAT" "BYTE_TO_BIN_PAT"  %f\n", i, (uint16_t)(ads_data[0]), (uint16_t)(ads_data[1]) ,  BYTE_TO_BIN(ads_data[1]), BYTE_TO_BIN(ads_data[0]), volt[i]);
	  			  HAL_UART_Transmit(&huart2, (uint8_t *)ads_data, 4, 5);
 800100e:	2305      	movs	r3, #5
 8001010:	2204      	movs	r2, #4
 8001012:	4910      	ldr	r1, [pc, #64]	; (8001054 <main+0x144>)
 8001014:	4811      	ldr	r0, [pc, #68]	; (800105c <main+0x14c>)
 8001016:	f001 fd4e 	bl	8002ab6 <HAL_UART_Transmit>
	  		  for(int i=0; i<2; i++) {
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3301      	adds	r3, #1
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b01      	cmp	r3, #1
 8001024:	dd92      	ble.n	8000f4c <main+0x3c>
	  }
	  HAL_Delay(200);
 8001026:	20c8      	movs	r0, #200	; 0xc8
 8001028:	f000 face 	bl	80015c8 <HAL_Delay>
	  ADS_Read_All_Raw(&ads, ads_data);
 800102c:	e787      	b.n	8000f3e <main+0x2e>
 800102e:	bf00      	nop
 8001030:	47ae147b 	.word	0x47ae147b
 8001034:	40247ae1 	.word	0x40247ae1
 8001038:	00000000 	.word	0x00000000
 800103c:	40efffe0 	.word	0x40efffe0
 8001040:	47ae147b 	.word	0x47ae147b
 8001044:	40147ae1 	.word	0x40147ae1
 8001048:	40020000 	.word	0x40020000
 800104c:	20000048 	.word	0x20000048
 8001050:	20000158 	.word	0x20000158
 8001054:	200000a0 	.word	0x200000a0
 8001058:	20000028 	.word	0x20000028
 800105c:	20000114 	.word	0x20000114

08001060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b094      	sub	sp, #80	; 0x50
 8001064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	2230      	movs	r2, #48	; 0x30
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f001 ffea 	bl	8003048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	4b28      	ldr	r3, [pc, #160]	; (800112c <SystemClock_Config+0xcc>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	4a27      	ldr	r2, [pc, #156]	; (800112c <SystemClock_Config+0xcc>)
 800108e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001092:	6413      	str	r3, [r2, #64]	; 0x40
 8001094:	4b25      	ldr	r3, [pc, #148]	; (800112c <SystemClock_Config+0xcc>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <SystemClock_Config+0xd0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a21      	ldr	r2, [pc, #132]	; (8001130 <SystemClock_Config+0xd0>)
 80010aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <SystemClock_Config+0xd0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010bc:	2301      	movs	r3, #1
 80010be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c6:	2302      	movs	r3, #2
 80010c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010d0:	2304      	movs	r3, #4
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010d4:	23a8      	movs	r3, #168	; 0xa8
 80010d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d8:	2302      	movs	r3, #2
 80010da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010dc:	2304      	movs	r3, #4
 80010de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e0:	f107 0320 	add.w	r3, r7, #32
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fd2f 	bl	8001b48 <HAL_RCC_OscConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f0:	f000 f8d4 	bl	800129c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f4:	230f      	movs	r3, #15
 80010f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f8:	2302      	movs	r3, #2
 80010fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001100:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001104:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2105      	movs	r1, #5
 8001112:	4618      	mov	r0, r3
 8001114:	f000 ff90 	bl	8002038 <HAL_RCC_ClockConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800111e:	f000 f8bd 	bl	800129c <Error_Handler>
  }
}
 8001122:	bf00      	nop
 8001124:	3750      	adds	r7, #80	; 0x50
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40007000 	.word	0x40007000

08001134 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_SPI3_Init+0x68>)
 800113a:	4a19      	ldr	r2, [pc, #100]	; (80011a0 <MX_SPI3_Init+0x6c>)
 800113c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_SPI3_Init+0x68>)
 8001140:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001144:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_SPI3_Init+0x68>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_SPI3_Init+0x68>)
 800114e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001152:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_SPI3_Init+0x68>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <MX_SPI3_Init+0x68>)
 800115c:	2201      	movs	r2, #1
 800115e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_SPI3_Init+0x68>)
 8001162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001166:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_SPI3_Init+0x68>)
 800116a:	2218      	movs	r2, #24
 800116c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_SPI3_Init+0x68>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_SPI3_Init+0x68>)
 8001176:	2200      	movs	r2, #0
 8001178:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <MX_SPI3_Init+0x68>)
 800117c:	2200      	movs	r2, #0
 800117e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_SPI3_Init+0x68>)
 8001182:	220a      	movs	r2, #10
 8001184:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_SPI3_Init+0x68>)
 8001188:	f001 f952 	bl	8002430 <HAL_SPI_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001192:	f000 f883 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000048 	.word	0x20000048
 80011a0:	40003c00 	.word	0x40003c00

080011a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011aa:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <MX_USART2_UART_Init+0x50>)
 80011ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011dc:	f001 fc1e 	bl	8002a1c <HAL_UART_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011e6:	f000 f859 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000114 	.word	0x20000114
 80011f4:	40004400 	.word	0x40004400

080011f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	f107 030c 	add.w	r3, r7, #12
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <MX_GPIO_Init+0x9c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <MX_GPIO_Init+0x9c>)
 8001218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <MX_GPIO_Init+0x9c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MX_GPIO_Init+0x9c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a18      	ldr	r2, [pc, #96]	; (8001294 <MX_GPIO_Init+0x9c>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_GPIO_Init+0x9c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_GPIO_Init+0x9c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a11      	ldr	r2, [pc, #68]	; (8001294 <MX_GPIO_Init+0x9c>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_GPIO_Init+0x9c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <MX_GPIO_Init+0xa0>)
 800126a:	f000 fc53 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800126e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001272:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001278:	2301      	movs	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	4619      	mov	r1, r3
 8001286:	4804      	ldr	r0, [pc, #16]	; (8001298 <MX_GPIO_Init+0xa0>)
 8001288:	f000 faa8 	bl	80017dc <HAL_GPIO_Init>

}
 800128c:	bf00      	nop
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <Error_Handler+0x8>
	...

080012a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <HAL_MspInit+0x4c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <HAL_MspInit+0x4c>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012bc:	6453      	str	r3, [r2, #68]	; 0x44
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <HAL_MspInit+0x4c>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_MspInit+0x4c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <HAL_MspInit+0x4c>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_MspInit+0x4c>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a19      	ldr	r2, [pc, #100]	; (800137c <HAL_SPI_MspInit+0x84>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d12c      	bne.n	8001374 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <HAL_SPI_MspInit+0x88>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a17      	ldr	r2, [pc, #92]	; (8001380 <HAL_SPI_MspInit+0x88>)
 8001324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_SPI_MspInit+0x88>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_SPI_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a10      	ldr	r2, [pc, #64]	; (8001380 <HAL_SPI_MspInit+0x88>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_SPI_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001352:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001364:	2306      	movs	r3, #6
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <HAL_SPI_MspInit+0x8c>)
 8001370:	f000 fa34 	bl	80017dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001374:	bf00      	nop
 8001376:	3728      	adds	r7, #40	; 0x28
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40003c00 	.word	0x40003c00
 8001380:	40023800 	.word	0x40023800
 8001384:	40020800 	.word	0x40020800

08001388 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a19      	ldr	r2, [pc, #100]	; (800140c <HAL_UART_MspInit+0x84>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d12b      	bne.n	8001402 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <HAL_UART_MspInit+0x88>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a17      	ldr	r2, [pc, #92]	; (8001410 <HAL_UART_MspInit+0x88>)
 80013b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_UART_MspInit+0x88>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_UART_MspInit+0x88>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a10      	ldr	r2, [pc, #64]	; (8001410 <HAL_UART_MspInit+0x88>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_UART_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013e2:	230c      	movs	r3, #12
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013f2:	2307      	movs	r3, #7
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	; (8001414 <HAL_UART_MspInit+0x8c>)
 80013fe:	f000 f9ed 	bl	80017dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	; 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40004400 	.word	0x40004400
 8001410:	40023800 	.word	0x40023800
 8001414:	40020000 	.word	0x40020000

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	e7fe      	b.n	800141c <NMI_Handler+0x4>

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler+0x4>

0800142a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler+0x4>

08001436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001464:	f000 f890 	bl	8001588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <SystemInit+0x20>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <SystemInit+0x20>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001494:	480d      	ldr	r0, [pc, #52]	; (80014cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001496:	490e      	ldr	r1, [pc, #56]	; (80014d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001498:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800149c:	e002      	b.n	80014a4 <LoopCopyDataInit>

0800149e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a2:	3304      	adds	r3, #4

080014a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a8:	d3f9      	bcc.n	800149e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014aa:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014ac:	4c0b      	ldr	r4, [pc, #44]	; (80014dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b0:	e001      	b.n	80014b6 <LoopFillZerobss>

080014b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b4:	3204      	adds	r2, #4

080014b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b8:	d3fb      	bcc.n	80014b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014ba:	f7ff ffd7 	bl	800146c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014be:	f001 fd9f 	bl	8003000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c2:	f7ff fd25 	bl	8000f10 <main>
  bx  lr    
 80014c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014d4:	08003098 	.word	0x08003098
  ldr r2, =_sbss
 80014d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014dc:	20000168 	.word	0x20000168

080014e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC_IRQHandler>
	...

080014e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <HAL_Init+0x40>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <HAL_Init+0x40>)
 80014ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_Init+0x40>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <HAL_Init+0x40>)
 80014fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_Init+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_Init+0x40>)
 8001506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150c:	2003      	movs	r0, #3
 800150e:	f000 f931 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001512:	2000      	movs	r0, #0
 8001514:	f000 f808 	bl	8001528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001518:	f7ff fec6 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023c00 	.word	0x40023c00

08001528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x54>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_InitTick+0x58>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001542:	fbb2 f3f3 	udiv	r3, r2, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f93b 	bl	80017c2 <HAL_SYSTICK_Config>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e00e      	b.n	8001574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b0f      	cmp	r3, #15
 800155a:	d80a      	bhi.n	8001572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155c:	2200      	movs	r2, #0
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f000 f911 	bl	800178a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001568:	4a06      	ldr	r2, [pc, #24]	; (8001584 <HAL_InitTick+0x5c>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	e000      	b.n	8001574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000000 	.word	0x20000000
 8001580:	20000008 	.word	0x20000008
 8001584:	20000004 	.word	0x20000004

08001588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x20>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_IncTick+0x24>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <HAL_IncTick+0x24>)
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008
 80015ac:	20000164 	.word	0x20000164

080015b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return uwTick;
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_GetTick+0x14>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000164 	.word	0x20000164

080015c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff ffee 	bl	80015b0 <HAL_GetTick>
 80015d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d005      	beq.n	80015ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_Delay+0x44>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ee:	bf00      	nop
 80015f0:	f7ff ffde 	bl	80015b0 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d8f7      	bhi.n	80015f0 <HAL_Delay+0x28>
  {
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008

08001610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800162c:	4013      	ands	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800163c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001642:	4a04      	ldr	r2, [pc, #16]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	60d3      	str	r3, [r2, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <__NVIC_GetPriorityGrouping+0x18>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0307 	and.w	r3, r3, #7
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	2b00      	cmp	r3, #0
 8001686:	db0a      	blt.n	800169e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	b2da      	uxtb	r2, r3
 800168c:	490c      	ldr	r1, [pc, #48]	; (80016c0 <__NVIC_SetPriority+0x4c>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	0112      	lsls	r2, r2, #4
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	440b      	add	r3, r1
 8001698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800169c:	e00a      	b.n	80016b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4908      	ldr	r1, [pc, #32]	; (80016c4 <__NVIC_SetPriority+0x50>)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	3b04      	subs	r3, #4
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	440b      	add	r3, r1
 80016b2:	761a      	strb	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000e100 	.word	0xe000e100
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f1c3 0307 	rsb	r3, r3, #7
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	bf28      	it	cs
 80016e6:	2304      	movcs	r3, #4
 80016e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3304      	adds	r3, #4
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d902      	bls.n	80016f8 <NVIC_EncodePriority+0x30>
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b03      	subs	r3, #3
 80016f6:	e000      	b.n	80016fa <NVIC_EncodePriority+0x32>
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	401a      	ands	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001710:	f04f 31ff 	mov.w	r1, #4294967295
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	43d9      	mvns	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	4313      	orrs	r3, r2
         );
}
 8001722:	4618      	mov	r0, r3
 8001724:	3724      	adds	r7, #36	; 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f7ff ff8e 	bl	8001674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff47 	bl	8001610 <__NVIC_SetPriorityGrouping>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff5c 	bl	8001658 <__NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff8e 	bl	80016c8 <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5d 	bl	8001674 <__NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffb0 	bl	8001730 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
 80017f6:	e16b      	b.n	8001ad0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f8:	2201      	movs	r2, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	429a      	cmp	r2, r3
 8001812:	f040 815a 	bne.w	8001aca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b01      	cmp	r3, #1
 8001820:	d005      	beq.n	800182e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182a:	2b02      	cmp	r3, #2
 800182c:	d130      	bne.n	8001890 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	2203      	movs	r2, #3
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001864:	2201      	movs	r2, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f003 0201 	and.w	r2, r3, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b03      	cmp	r3, #3
 800189a:	d017      	beq.n	80018cc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d123      	bne.n	8001920 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	08da      	lsrs	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3208      	adds	r2, #8
 80018e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	220f      	movs	r2, #15
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	08da      	lsrs	r2, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3208      	adds	r2, #8
 800191a:	69b9      	ldr	r1, [r7, #24]
 800191c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0203 	and.w	r2, r3, #3
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80b4 	beq.w	8001aca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b60      	ldr	r3, [pc, #384]	; (8001ae8 <HAL_GPIO_Init+0x30c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	4a5f      	ldr	r2, [pc, #380]	; (8001ae8 <HAL_GPIO_Init+0x30c>)
 800196c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001970:	6453      	str	r3, [r2, #68]	; 0x44
 8001972:	4b5d      	ldr	r3, [pc, #372]	; (8001ae8 <HAL_GPIO_Init+0x30c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197e:	4a5b      	ldr	r2, [pc, #364]	; (8001aec <HAL_GPIO_Init+0x310>)
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	3302      	adds	r3, #2
 8001986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a52      	ldr	r2, [pc, #328]	; (8001af0 <HAL_GPIO_Init+0x314>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d02b      	beq.n	8001a02 <HAL_GPIO_Init+0x226>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a51      	ldr	r2, [pc, #324]	; (8001af4 <HAL_GPIO_Init+0x318>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d025      	beq.n	80019fe <HAL_GPIO_Init+0x222>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a50      	ldr	r2, [pc, #320]	; (8001af8 <HAL_GPIO_Init+0x31c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d01f      	beq.n	80019fa <HAL_GPIO_Init+0x21e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4f      	ldr	r2, [pc, #316]	; (8001afc <HAL_GPIO_Init+0x320>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d019      	beq.n	80019f6 <HAL_GPIO_Init+0x21a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4e      	ldr	r2, [pc, #312]	; (8001b00 <HAL_GPIO_Init+0x324>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <HAL_GPIO_Init+0x216>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4d      	ldr	r2, [pc, #308]	; (8001b04 <HAL_GPIO_Init+0x328>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00d      	beq.n	80019ee <HAL_GPIO_Init+0x212>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4c      	ldr	r2, [pc, #304]	; (8001b08 <HAL_GPIO_Init+0x32c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d007      	beq.n	80019ea <HAL_GPIO_Init+0x20e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4b      	ldr	r2, [pc, #300]	; (8001b0c <HAL_GPIO_Init+0x330>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_GPIO_Init+0x20a>
 80019e2:	2307      	movs	r3, #7
 80019e4:	e00e      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019e6:	2308      	movs	r3, #8
 80019e8:	e00c      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019ea:	2306      	movs	r3, #6
 80019ec:	e00a      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019ee:	2305      	movs	r3, #5
 80019f0:	e008      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019f2:	2304      	movs	r3, #4
 80019f4:	e006      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019f6:	2303      	movs	r3, #3
 80019f8:	e004      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e002      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 8001a02:	2300      	movs	r3, #0
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	f002 0203 	and.w	r2, r2, #3
 8001a0a:	0092      	lsls	r2, r2, #2
 8001a0c:	4093      	lsls	r3, r2
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a14:	4935      	ldr	r1, [pc, #212]	; (8001aec <HAL_GPIO_Init+0x310>)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a22:	4b3b      	ldr	r3, [pc, #236]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a46:	4a32      	ldr	r2, [pc, #200]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a4c:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a70:	4a27      	ldr	r2, [pc, #156]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a76:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a9a:	4a1d      	ldr	r2, [pc, #116]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac4:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3301      	adds	r3, #1
 8001ace:	61fb      	str	r3, [r7, #28]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	2b0f      	cmp	r3, #15
 8001ad4:	f67f ae90 	bls.w	80017f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40013800 	.word	0x40013800
 8001af0:	40020000 	.word	0x40020000
 8001af4:	40020400 	.word	0x40020400
 8001af8:	40020800 	.word	0x40020800
 8001afc:	40020c00 	.word	0x40020c00
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40021400 	.word	0x40021400
 8001b08:	40021800 	.word	0x40021800
 8001b0c:	40021c00 	.word	0x40021c00
 8001b10:	40013c00 	.word	0x40013c00

08001b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
 8001b20:	4613      	mov	r3, r2
 8001b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b24:	787b      	ldrb	r3, [r7, #1]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b30:	e003      	b.n	8001b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	041a      	lsls	r2, r3, #16
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	619a      	str	r2, [r3, #24]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e264      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d075      	beq.n	8001c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b66:	4ba3      	ldr	r3, [pc, #652]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d00c      	beq.n	8001b8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b72:	4ba0      	ldr	r3, [pc, #640]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d112      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7e:	4b9d      	ldr	r3, [pc, #628]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	4b99      	ldr	r3, [pc, #612]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d05b      	beq.n	8001c50 <HAL_RCC_OscConfig+0x108>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d157      	bne.n	8001c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e23f      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bac:	d106      	bne.n	8001bbc <HAL_RCC_OscConfig+0x74>
 8001bae:	4b91      	ldr	r3, [pc, #580]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a90      	ldr	r2, [pc, #576]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e01d      	b.n	8001bf8 <HAL_RCC_OscConfig+0xb0>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x98>
 8001bc6:	4b8b      	ldr	r3, [pc, #556]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a8a      	ldr	r2, [pc, #552]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b88      	ldr	r3, [pc, #544]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a87      	ldr	r2, [pc, #540]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0xb0>
 8001be0:	4b84      	ldr	r3, [pc, #528]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a83      	ldr	r2, [pc, #524]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b81      	ldr	r3, [pc, #516]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a80      	ldr	r2, [pc, #512]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d013      	beq.n	8001c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff fcd6 	bl	80015b0 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c08:	f7ff fcd2 	bl	80015b0 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	; 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e204      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	4b76      	ldr	r3, [pc, #472]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0xc0>
 8001c26:	e014      	b.n	8001c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff fcc2 	bl	80015b0 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff fcbe 	bl	80015b0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e1f0      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c42:	4b6c      	ldr	r3, [pc, #432]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0xe8>
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d063      	beq.n	8001d26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c5e:	4b65      	ldr	r3, [pc, #404]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00b      	beq.n	8001c82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c6a:	4b62      	ldr	r3, [pc, #392]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d11c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c76:	4b5f      	ldr	r3, [pc, #380]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d116      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c82:	4b5c      	ldr	r3, [pc, #368]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <HAL_RCC_OscConfig+0x152>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d001      	beq.n	8001c9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e1c4      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9a:	4b56      	ldr	r3, [pc, #344]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4952      	ldr	r1, [pc, #328]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cae:	e03a      	b.n	8001d26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d020      	beq.n	8001cfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb8:	4b4f      	ldr	r3, [pc, #316]	; (8001df8 <HAL_RCC_OscConfig+0x2b0>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbe:	f7ff fc77 	bl	80015b0 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc6:	f7ff fc73 	bl	80015b0 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e1a5      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	4b46      	ldr	r3, [pc, #280]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce4:	4b43      	ldr	r3, [pc, #268]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4940      	ldr	r1, [pc, #256]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfa:	4b3f      	ldr	r3, [pc, #252]	; (8001df8 <HAL_RCC_OscConfig+0x2b0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fc56 	bl	80015b0 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d08:	f7ff fc52 	bl	80015b0 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e184      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1a:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d030      	beq.n	8001d94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d016      	beq.n	8001d68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d3a:	4b30      	ldr	r3, [pc, #192]	; (8001dfc <HAL_RCC_OscConfig+0x2b4>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d40:	f7ff fc36 	bl	80015b0 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d48:	f7ff fc32 	bl	80015b0 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e164      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x200>
 8001d66:	e015      	b.n	8001d94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d68:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <HAL_RCC_OscConfig+0x2b4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fc1f 	bl	80015b0 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d76:	f7ff fc1b 	bl	80015b0 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e14d      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1f0      	bne.n	8001d76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80a0 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10f      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_RCC_OscConfig+0x2b8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d121      	bne.n	8001e22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HAL_RCC_OscConfig+0x2b8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <HAL_RCC_OscConfig+0x2b8>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dea:	f7ff fbe1 	bl	80015b0 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	e011      	b.n	8001e16 <HAL_RCC_OscConfig+0x2ce>
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	42470000 	.word	0x42470000
 8001dfc:	42470e80 	.word	0x42470e80
 8001e00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e04:	f7ff fbd4 	bl	80015b0 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e106      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e16:	4b85      	ldr	r3, [pc, #532]	; (800202c <HAL_RCC_OscConfig+0x4e4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d106      	bne.n	8001e38 <HAL_RCC_OscConfig+0x2f0>
 8001e2a:	4b81      	ldr	r3, [pc, #516]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2e:	4a80      	ldr	r2, [pc, #512]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6713      	str	r3, [r2, #112]	; 0x70
 8001e36:	e01c      	b.n	8001e72 <HAL_RCC_OscConfig+0x32a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b05      	cmp	r3, #5
 8001e3e:	d10c      	bne.n	8001e5a <HAL_RCC_OscConfig+0x312>
 8001e40:	4b7b      	ldr	r3, [pc, #492]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	4a7a      	ldr	r2, [pc, #488]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4c:	4b78      	ldr	r3, [pc, #480]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	4a77      	ldr	r2, [pc, #476]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6713      	str	r3, [r2, #112]	; 0x70
 8001e58:	e00b      	b.n	8001e72 <HAL_RCC_OscConfig+0x32a>
 8001e5a:	4b75      	ldr	r3, [pc, #468]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5e:	4a74      	ldr	r2, [pc, #464]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6713      	str	r3, [r2, #112]	; 0x70
 8001e66:	4b72      	ldr	r3, [pc, #456]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6a:	4a71      	ldr	r2, [pc, #452]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d015      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fb99 	bl	80015b0 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e80:	e00a      	b.n	8001e98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7ff fb95 	bl	80015b0 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e0c5      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e98:	4b65      	ldr	r3, [pc, #404]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ee      	beq.n	8001e82 <HAL_RCC_OscConfig+0x33a>
 8001ea4:	e014      	b.n	8001ed0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fb83 	bl	80015b0 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7ff fb7f 	bl	80015b0 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e0af      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec4:	4b5a      	ldr	r3, [pc, #360]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1ee      	bne.n	8001eae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d105      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed6:	4b56      	ldr	r3, [pc, #344]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a55      	ldr	r2, [pc, #340]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 809b 	beq.w	8002022 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eec:	4b50      	ldr	r3, [pc, #320]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d05c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d141      	bne.n	8001f84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f00:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <HAL_RCC_OscConfig+0x4ec>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7ff fb53 	bl	80015b0 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7ff fb4f 	bl	80015b0 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e081      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f20:	4b43      	ldr	r3, [pc, #268]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69da      	ldr	r2, [r3, #28]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	019b      	lsls	r3, r3, #6
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	3b01      	subs	r3, #1
 8001f46:	041b      	lsls	r3, r3, #16
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	061b      	lsls	r3, r3, #24
 8001f50:	4937      	ldr	r1, [pc, #220]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f56:	4b37      	ldr	r3, [pc, #220]	; (8002034 <HAL_RCC_OscConfig+0x4ec>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fb28 	bl	80015b0 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f64:	f7ff fb24 	bl	80015b0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e056      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f76:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x41c>
 8001f82:	e04e      	b.n	8002022 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f84:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <HAL_RCC_OscConfig+0x4ec>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7ff fb11 	bl	80015b0 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f92:	f7ff fb0d 	bl	80015b0 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e03f      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa4:	4b22      	ldr	r3, [pc, #136]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f0      	bne.n	8001f92 <HAL_RCC_OscConfig+0x44a>
 8001fb0:	e037      	b.n	8002022 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e032      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d028      	beq.n	800201e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d121      	bne.n	800201e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d11a      	bne.n	800201e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fee:	4013      	ands	r3, r2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ff4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d111      	bne.n	800201e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	085b      	lsrs	r3, r3, #1
 8002006:	3b01      	subs	r3, #1
 8002008:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d107      	bne.n	800201e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d001      	beq.n	8002022 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40007000 	.word	0x40007000
 8002030:	40023800 	.word	0x40023800
 8002034:	42470060 	.word	0x42470060

08002038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0cc      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800204c:	4b68      	ldr	r3, [pc, #416]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d90c      	bls.n	8002074 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b65      	ldr	r3, [pc, #404]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0b8      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d020      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800208c:	4b59      	ldr	r3, [pc, #356]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4a58      	ldr	r2, [pc, #352]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002096:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a4:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	4a52      	ldr	r2, [pc, #328]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b0:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	494d      	ldr	r1, [pc, #308]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d044      	beq.n	8002158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d119      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e07f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d003      	beq.n	80020f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f6:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e06f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002106:	4b3b      	ldr	r3, [pc, #236]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e067      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002116:	4b37      	ldr	r3, [pc, #220]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f023 0203 	bic.w	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4934      	ldr	r1, [pc, #208]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	4313      	orrs	r3, r2
 8002126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002128:	f7ff fa42 	bl	80015b0 <HAL_GetTick>
 800212c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	e00a      	b.n	8002146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002130:	f7ff fa3e 	bl	80015b0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e04f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 020c 	and.w	r2, r3, #12
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	429a      	cmp	r2, r3
 8002156:	d1eb      	bne.n	8002130 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002158:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d20c      	bcs.n	8002180 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e032      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4916      	ldr	r1, [pc, #88]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	490e      	ldr	r1, [pc, #56]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021be:	f000 f821 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80021c2:	4602      	mov	r2, r0
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	490a      	ldr	r1, [pc, #40]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	5ccb      	ldrb	r3, [r1, r3]
 80021d2:	fa22 f303 	lsr.w	r3, r2, r3
 80021d6:	4a09      	ldr	r2, [pc, #36]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f9a2 	bl	8001528 <HAL_InitTick>

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023c00 	.word	0x40023c00
 80021f4:	40023800 	.word	0x40023800
 80021f8:	08003070 	.word	0x08003070
 80021fc:	20000000 	.word	0x20000000
 8002200:	20000004 	.word	0x20000004

08002204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002204:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	2300      	movs	r3, #0
 8002216:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800221c:	4b67      	ldr	r3, [pc, #412]	; (80023bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b08      	cmp	r3, #8
 8002226:	d00d      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x40>
 8002228:	2b08      	cmp	r3, #8
 800222a:	f200 80bd 	bhi.w	80023a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0x34>
 8002232:	2b04      	cmp	r3, #4
 8002234:	d003      	beq.n	800223e <HAL_RCC_GetSysClockFreq+0x3a>
 8002236:	e0b7      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002238:	4b61      	ldr	r3, [pc, #388]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800223a:	60bb      	str	r3, [r7, #8]
       break;
 800223c:	e0b7      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800223e:	4b61      	ldr	r3, [pc, #388]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002240:	60bb      	str	r3, [r7, #8]
      break;
 8002242:	e0b4      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002244:	4b5d      	ldr	r3, [pc, #372]	; (80023bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800224c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800224e:	4b5b      	ldr	r3, [pc, #364]	; (80023bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d04d      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225a:	4b58      	ldr	r3, [pc, #352]	; (80023bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	099b      	lsrs	r3, r3, #6
 8002260:	461a      	mov	r2, r3
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	f240 10ff 	movw	r0, #511	; 0x1ff
 800226a:	f04f 0100 	mov.w	r1, #0
 800226e:	ea02 0800 	and.w	r8, r2, r0
 8002272:	ea03 0901 	and.w	r9, r3, r1
 8002276:	4640      	mov	r0, r8
 8002278:	4649      	mov	r1, r9
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	014b      	lsls	r3, r1, #5
 8002284:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002288:	0142      	lsls	r2, r0, #5
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	ebb0 0008 	subs.w	r0, r0, r8
 8002292:	eb61 0109 	sbc.w	r1, r1, r9
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	018b      	lsls	r3, r1, #6
 80022a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022a4:	0182      	lsls	r2, r0, #6
 80022a6:	1a12      	subs	r2, r2, r0
 80022a8:	eb63 0301 	sbc.w	r3, r3, r1
 80022ac:	f04f 0000 	mov.w	r0, #0
 80022b0:	f04f 0100 	mov.w	r1, #0
 80022b4:	00d9      	lsls	r1, r3, #3
 80022b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022ba:	00d0      	lsls	r0, r2, #3
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	eb12 0208 	adds.w	r2, r2, r8
 80022c4:	eb43 0309 	adc.w	r3, r3, r9
 80022c8:	f04f 0000 	mov.w	r0, #0
 80022cc:	f04f 0100 	mov.w	r1, #0
 80022d0:	0259      	lsls	r1, r3, #9
 80022d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80022d6:	0250      	lsls	r0, r2, #9
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	461a      	mov	r2, r3
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	f7fe fb64 	bl	80009b4 <__aeabi_uldivmod>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4613      	mov	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e04a      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f6:	4b31      	ldr	r3, [pc, #196]	; (80023bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	099b      	lsrs	r3, r3, #6
 80022fc:	461a      	mov	r2, r3
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002306:	f04f 0100 	mov.w	r1, #0
 800230a:	ea02 0400 	and.w	r4, r2, r0
 800230e:	ea03 0501 	and.w	r5, r3, r1
 8002312:	4620      	mov	r0, r4
 8002314:	4629      	mov	r1, r5
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	014b      	lsls	r3, r1, #5
 8002320:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002324:	0142      	lsls	r2, r0, #5
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	1b00      	subs	r0, r0, r4
 800232c:	eb61 0105 	sbc.w	r1, r1, r5
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	018b      	lsls	r3, r1, #6
 800233a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800233e:	0182      	lsls	r2, r0, #6
 8002340:	1a12      	subs	r2, r2, r0
 8002342:	eb63 0301 	sbc.w	r3, r3, r1
 8002346:	f04f 0000 	mov.w	r0, #0
 800234a:	f04f 0100 	mov.w	r1, #0
 800234e:	00d9      	lsls	r1, r3, #3
 8002350:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002354:	00d0      	lsls	r0, r2, #3
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	1912      	adds	r2, r2, r4
 800235c:	eb45 0303 	adc.w	r3, r5, r3
 8002360:	f04f 0000 	mov.w	r0, #0
 8002364:	f04f 0100 	mov.w	r1, #0
 8002368:	0299      	lsls	r1, r3, #10
 800236a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800236e:	0290      	lsls	r0, r2, #10
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4610      	mov	r0, r2
 8002376:	4619      	mov	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	461a      	mov	r2, r3
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	f7fe fb18 	bl	80009b4 <__aeabi_uldivmod>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4613      	mov	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	0c1b      	lsrs	r3, r3, #16
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	3301      	adds	r3, #1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a4:	60bb      	str	r3, [r7, #8]
      break;
 80023a6:	e002      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023aa:	60bb      	str	r3, [r7, #8]
      break;
 80023ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ae:	68bb      	ldr	r3, [r7, #8]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	00f42400 	.word	0x00f42400
 80023c4:	007a1200 	.word	0x007a1200

080023c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000000 	.word	0x20000000

080023e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023e4:	f7ff fff0 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	0a9b      	lsrs	r3, r3, #10
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	4903      	ldr	r1, [pc, #12]	; (8002404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f6:	5ccb      	ldrb	r3, [r1, r3]
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40023800 	.word	0x40023800
 8002404:	08003080 	.word	0x08003080

08002408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800240c:	f7ff ffdc 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	0b5b      	lsrs	r3, r3, #13
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	4903      	ldr	r1, [pc, #12]	; (800242c <HAL_RCC_GetPCLK2Freq+0x24>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40023800 	.word	0x40023800
 800242c:	08003080 	.word	0x08003080

08002430 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e07b      	b.n	800253a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	2b00      	cmp	r3, #0
 8002448:	d108      	bne.n	800245c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002452:	d009      	beq.n	8002468 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]
 800245a:	e005      	b.n	8002468 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe ff38 	bl	80012f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800249e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ec:	ea42 0103 	orr.w	r1, r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	0c1b      	lsrs	r3, r3, #16
 8002506:	f003 0104 	and.w	r1, r3, #4
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	f003 0210 	and.w	r2, r3, #16
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69da      	ldr	r2, [r3, #28]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002528:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b08c      	sub	sp, #48	; 0x30
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002550:	2301      	movs	r3, #1
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_SPI_TransmitReceive+0x26>
 8002564:	2302      	movs	r3, #2
 8002566:	e18a      	b.n	800287e <HAL_SPI_TransmitReceive+0x33c>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002570:	f7ff f81e 	bl	80015b0 <HAL_GetTick>
 8002574:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800257c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002586:	887b      	ldrh	r3, [r7, #2]
 8002588:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800258a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800258e:	2b01      	cmp	r3, #1
 8002590:	d00f      	beq.n	80025b2 <HAL_SPI_TransmitReceive+0x70>
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002598:	d107      	bne.n	80025aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d103      	bne.n	80025aa <HAL_SPI_TransmitReceive+0x68>
 80025a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d003      	beq.n	80025b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
 80025ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025b0:	e15b      	b.n	800286a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_SPI_TransmitReceive+0x82>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <HAL_SPI_TransmitReceive+0x82>
 80025be:	887b      	ldrh	r3, [r7, #2]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d103      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025ca:	e14e      	b.n	800286a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d003      	beq.n	80025e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2205      	movs	r2, #5
 80025dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	887a      	ldrh	r2, [r7, #2]
 80025f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	887a      	ldrh	r2, [r7, #2]
 8002602:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002620:	2b40      	cmp	r3, #64	; 0x40
 8002622:	d007      	beq.n	8002634 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002632:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800263c:	d178      	bne.n	8002730 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_SPI_TransmitReceive+0x10a>
 8002646:	8b7b      	ldrh	r3, [r7, #26]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d166      	bne.n	800271a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	881a      	ldrh	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	1c9a      	adds	r2, r3, #2
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002670:	e053      	b.n	800271a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b02      	cmp	r3, #2
 800267e:	d11b      	bne.n	80026b8 <HAL_SPI_TransmitReceive+0x176>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d016      	beq.n	80026b8 <HAL_SPI_TransmitReceive+0x176>
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	2b01      	cmp	r3, #1
 800268e:	d113      	bne.n	80026b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	881a      	ldrh	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	1c9a      	adds	r2, r3, #2
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d119      	bne.n	80026fa <HAL_SPI_TransmitReceive+0x1b8>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d014      	beq.n	80026fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026da:	b292      	uxth	r2, r2
 80026dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e2:	1c9a      	adds	r2, r3, #2
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026f6:	2301      	movs	r3, #1
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026fa:	f7fe ff59 	bl	80015b0 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002706:	429a      	cmp	r2, r3
 8002708:	d807      	bhi.n	800271a <HAL_SPI_TransmitReceive+0x1d8>
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d003      	beq.n	800271a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002718:	e0a7      	b.n	800286a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1a6      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x130>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1a1      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x130>
 800272e:	e07c      	b.n	800282a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_SPI_TransmitReceive+0x1fc>
 8002738:	8b7b      	ldrh	r3, [r7, #26]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d16b      	bne.n	8002816 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	330c      	adds	r3, #12
 8002748:	7812      	ldrb	r2, [r2, #0]
 800274a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002764:	e057      	b.n	8002816 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b02      	cmp	r3, #2
 8002772:	d11c      	bne.n	80027ae <HAL_SPI_TransmitReceive+0x26c>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d017      	beq.n	80027ae <HAL_SPI_TransmitReceive+0x26c>
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	2b01      	cmp	r3, #1
 8002782:	d114      	bne.n	80027ae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	330c      	adds	r3, #12
 800278e:	7812      	ldrb	r2, [r2, #0]
 8002790:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d119      	bne.n	80027f0 <HAL_SPI_TransmitReceive+0x2ae>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d014      	beq.n	80027f0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027ec:	2301      	movs	r3, #1
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027f0:	f7fe fede 	bl	80015b0 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d803      	bhi.n	8002808 <HAL_SPI_TransmitReceive+0x2c6>
 8002800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002806:	d102      	bne.n	800280e <HAL_SPI_TransmitReceive+0x2cc>
 8002808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280a:	2b00      	cmp	r3, #0
 800280c:	d103      	bne.n	8002816 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002814:	e029      	b.n	800286a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1a2      	bne.n	8002766 <HAL_SPI_TransmitReceive+0x224>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d19d      	bne.n	8002766 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800282a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f8b2 	bl	8002998 <SPI_EndRxTxTransaction>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d006      	beq.n	8002848 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002846:	e010      	b.n	800286a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10b      	bne.n	8002868 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	e000      	b.n	800286a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002868:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800287a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800287e:	4618      	mov	r0, r3
 8002880:	3730      	adds	r7, #48	; 0x30
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002898:	f7fe fe8a 	bl	80015b0 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	4413      	add	r3, r2
 80028a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028a8:	f7fe fe82 	bl	80015b0 <HAL_GetTick>
 80028ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028ae:	4b39      	ldr	r3, [pc, #228]	; (8002994 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	015b      	lsls	r3, r3, #5
 80028b4:	0d1b      	lsrs	r3, r3, #20
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	fb02 f303 	mul.w	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028be:	e054      	b.n	800296a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c6:	d050      	beq.n	800296a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028c8:	f7fe fe72 	bl	80015b0 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d902      	bls.n	80028de <SPI_WaitFlagStateUntilTimeout+0x56>
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d13d      	bne.n	800295a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028f6:	d111      	bne.n	800291c <SPI_WaitFlagStateUntilTimeout+0x94>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002900:	d004      	beq.n	800290c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290a:	d107      	bne.n	800291c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800291a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002924:	d10f      	bne.n	8002946 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002944:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e017      	b.n	800298a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	3b01      	subs	r3, #1
 8002968:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4013      	ands	r3, r2
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	429a      	cmp	r2, r3
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	429a      	cmp	r2, r3
 8002986:	d19b      	bne.n	80028c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3720      	adds	r7, #32
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20000000 	.word	0x20000000

08002998 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <SPI_EndRxTxTransaction+0x7c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1b      	ldr	r2, [pc, #108]	; (8002a18 <SPI_EndRxTxTransaction+0x80>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	0d5b      	lsrs	r3, r3, #21
 80029b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029b4:	fb02 f303 	mul.w	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029c2:	d112      	bne.n	80029ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2200      	movs	r2, #0
 80029cc:	2180      	movs	r1, #128	; 0x80
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f7ff ff5a 	bl	8002888 <SPI_WaitFlagStateUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d016      	beq.n	8002a08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	f043 0220 	orr.w	r2, r3, #32
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e00f      	b.n	8002a0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a00:	2b80      	cmp	r3, #128	; 0x80
 8002a02:	d0f2      	beq.n	80029ea <SPI_EndRxTxTransaction+0x52>
 8002a04:	e000      	b.n	8002a08 <SPI_EndRxTxTransaction+0x70>
        break;
 8002a06:	bf00      	nop
  }

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000000 	.word	0x20000000
 8002a18:	165e9f81 	.word	0x165e9f81

08002a1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e03f      	b.n	8002aae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe fca0 	bl	8001388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2224      	movs	r2, #36	; 0x24
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f905 	bl	8002c70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b08a      	sub	sp, #40	; 0x28
 8002aba:	af02      	add	r7, sp, #8
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	603b      	str	r3, [r7, #0]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	d17c      	bne.n	8002bd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_UART_Transmit+0x2c>
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e075      	b.n	8002bd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_UART_Transmit+0x3e>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e06e      	b.n	8002bd2 <HAL_UART_Transmit+0x11c>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2221      	movs	r2, #33	; 0x21
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b0a:	f7fe fd51 	bl	80015b0 <HAL_GetTick>
 8002b0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	88fa      	ldrh	r2, [r7, #6]
 8002b14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	88fa      	ldrh	r2, [r7, #6]
 8002b1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b24:	d108      	bne.n	8002b38 <HAL_UART_Transmit+0x82>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d104      	bne.n	8002b38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	e003      	b.n	8002b40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b48:	e02a      	b.n	8002ba0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2200      	movs	r2, #0
 8002b52:	2180      	movs	r1, #128	; 0x80
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f840 	bl	8002bda <UART_WaitOnFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e036      	b.n	8002bd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10b      	bne.n	8002b82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	e007      	b.n	8002b92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	781a      	ldrb	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1cf      	bne.n	8002b4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2140      	movs	r1, #64	; 0x40
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f810 	bl	8002bda <UART_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e006      	b.n	8002bd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e000      	b.n	8002bd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002bd0:	2302      	movs	r3, #2
  }
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3720      	adds	r7, #32
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	4613      	mov	r3, r2
 8002be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bea:	e02c      	b.n	8002c46 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf2:	d028      	beq.n	8002c46 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d007      	beq.n	8002c0a <UART_WaitOnFlagUntilTimeout+0x30>
 8002bfa:	f7fe fcd9 	bl	80015b0 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d21d      	bcs.n	8002c46 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c18:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0201 	bic.w	r2, r2, #1
 8002c28:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e00f      	b.n	8002c66 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	bf0c      	ite	eq
 8002c56:	2301      	moveq	r3, #1
 8002c58:	2300      	movne	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d0c3      	beq.n	8002bec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c74:	b09f      	sub	sp, #124	; 0x7c
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c86:	68d9      	ldr	r1, [r3, #12]
 8002c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	ea40 0301 	orr.w	r3, r0, r1
 8002c90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002cb4:	f021 010c 	bic.w	r1, r1, #12
 8002cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cbe:	430b      	orrs	r3, r1
 8002cc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cce:	6999      	ldr	r1, [r3, #24]
 8002cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	ea40 0301 	orr.w	r3, r0, r1
 8002cd8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4bc5      	ldr	r3, [pc, #788]	; (8002ff4 <UART_SetConfig+0x384>)
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d004      	beq.n	8002cee <UART_SetConfig+0x7e>
 8002ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4bc3      	ldr	r3, [pc, #780]	; (8002ff8 <UART_SetConfig+0x388>)
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d103      	bne.n	8002cf6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cee:	f7ff fb8b 	bl	8002408 <HAL_RCC_GetPCLK2Freq>
 8002cf2:	6778      	str	r0, [r7, #116]	; 0x74
 8002cf4:	e002      	b.n	8002cfc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cf6:	f7ff fb73 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8002cfa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d04:	f040 80b6 	bne.w	8002e74 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d0a:	461c      	mov	r4, r3
 8002d0c:	f04f 0500 	mov.w	r5, #0
 8002d10:	4622      	mov	r2, r4
 8002d12:	462b      	mov	r3, r5
 8002d14:	1891      	adds	r1, r2, r2
 8002d16:	6439      	str	r1, [r7, #64]	; 0x40
 8002d18:	415b      	adcs	r3, r3
 8002d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d20:	1912      	adds	r2, r2, r4
 8002d22:	eb45 0303 	adc.w	r3, r5, r3
 8002d26:	f04f 0000 	mov.w	r0, #0
 8002d2a:	f04f 0100 	mov.w	r1, #0
 8002d2e:	00d9      	lsls	r1, r3, #3
 8002d30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d34:	00d0      	lsls	r0, r2, #3
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	1911      	adds	r1, r2, r4
 8002d3c:	6639      	str	r1, [r7, #96]	; 0x60
 8002d3e:	416b      	adcs	r3, r5
 8002d40:	667b      	str	r3, [r7, #100]	; 0x64
 8002d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	461a      	mov	r2, r3
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	1891      	adds	r1, r2, r2
 8002d4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d50:	415b      	adcs	r3, r3
 8002d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002d5c:	f7fd fe2a 	bl	80009b4 <__aeabi_uldivmod>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4ba5      	ldr	r3, [pc, #660]	; (8002ffc <UART_SetConfig+0x38c>)
 8002d66:	fba3 2302 	umull	r2, r3, r3, r2
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	011e      	lsls	r6, r3, #4
 8002d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d70:	461c      	mov	r4, r3
 8002d72:	f04f 0500 	mov.w	r5, #0
 8002d76:	4622      	mov	r2, r4
 8002d78:	462b      	mov	r3, r5
 8002d7a:	1891      	adds	r1, r2, r2
 8002d7c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d7e:	415b      	adcs	r3, r3
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
 8002d82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d86:	1912      	adds	r2, r2, r4
 8002d88:	eb45 0303 	adc.w	r3, r5, r3
 8002d8c:	f04f 0000 	mov.w	r0, #0
 8002d90:	f04f 0100 	mov.w	r1, #0
 8002d94:	00d9      	lsls	r1, r3, #3
 8002d96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d9a:	00d0      	lsls	r0, r2, #3
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	1911      	adds	r1, r2, r4
 8002da2:	65b9      	str	r1, [r7, #88]	; 0x58
 8002da4:	416b      	adcs	r3, r5
 8002da6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	1891      	adds	r1, r2, r2
 8002db4:	62b9      	str	r1, [r7, #40]	; 0x28
 8002db6:	415b      	adcs	r3, r3
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dbe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002dc2:	f7fd fdf7 	bl	80009b4 <__aeabi_uldivmod>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4b8c      	ldr	r3, [pc, #560]	; (8002ffc <UART_SetConfig+0x38c>)
 8002dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd0:	095b      	lsrs	r3, r3, #5
 8002dd2:	2164      	movs	r1, #100	; 0x64
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	3332      	adds	r3, #50	; 0x32
 8002dde:	4a87      	ldr	r2, [pc, #540]	; (8002ffc <UART_SetConfig+0x38c>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dec:	441e      	add	r6, r3
 8002dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df0:	4618      	mov	r0, r3
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	1894      	adds	r4, r2, r2
 8002dfc:	623c      	str	r4, [r7, #32]
 8002dfe:	415b      	adcs	r3, r3
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
 8002e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e06:	1812      	adds	r2, r2, r0
 8002e08:	eb41 0303 	adc.w	r3, r1, r3
 8002e0c:	f04f 0400 	mov.w	r4, #0
 8002e10:	f04f 0500 	mov.w	r5, #0
 8002e14:	00dd      	lsls	r5, r3, #3
 8002e16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e1a:	00d4      	lsls	r4, r2, #3
 8002e1c:	4622      	mov	r2, r4
 8002e1e:	462b      	mov	r3, r5
 8002e20:	1814      	adds	r4, r2, r0
 8002e22:	653c      	str	r4, [r7, #80]	; 0x50
 8002e24:	414b      	adcs	r3, r1
 8002e26:	657b      	str	r3, [r7, #84]	; 0x54
 8002e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	1891      	adds	r1, r2, r2
 8002e34:	61b9      	str	r1, [r7, #24]
 8002e36:	415b      	adcs	r3, r3
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002e42:	f7fd fdb7 	bl	80009b4 <__aeabi_uldivmod>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4b6c      	ldr	r3, [pc, #432]	; (8002ffc <UART_SetConfig+0x38c>)
 8002e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	2164      	movs	r1, #100	; 0x64
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	3332      	adds	r3, #50	; 0x32
 8002e5e:	4a67      	ldr	r2, [pc, #412]	; (8002ffc <UART_SetConfig+0x38c>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	f003 0207 	and.w	r2, r3, #7
 8002e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4432      	add	r2, r6
 8002e70:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e72:	e0b9      	b.n	8002fe8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e76:	461c      	mov	r4, r3
 8002e78:	f04f 0500 	mov.w	r5, #0
 8002e7c:	4622      	mov	r2, r4
 8002e7e:	462b      	mov	r3, r5
 8002e80:	1891      	adds	r1, r2, r2
 8002e82:	6139      	str	r1, [r7, #16]
 8002e84:	415b      	adcs	r3, r3
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e8c:	1912      	adds	r2, r2, r4
 8002e8e:	eb45 0303 	adc.w	r3, r5, r3
 8002e92:	f04f 0000 	mov.w	r0, #0
 8002e96:	f04f 0100 	mov.w	r1, #0
 8002e9a:	00d9      	lsls	r1, r3, #3
 8002e9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ea0:	00d0      	lsls	r0, r2, #3
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	eb12 0804 	adds.w	r8, r2, r4
 8002eaa:	eb43 0905 	adc.w	r9, r3, r5
 8002eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f04f 0100 	mov.w	r1, #0
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	008b      	lsls	r3, r1, #2
 8002ec2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ec6:	0082      	lsls	r2, r0, #2
 8002ec8:	4640      	mov	r0, r8
 8002eca:	4649      	mov	r1, r9
 8002ecc:	f7fd fd72 	bl	80009b4 <__aeabi_uldivmod>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4b49      	ldr	r3, [pc, #292]	; (8002ffc <UART_SetConfig+0x38c>)
 8002ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	011e      	lsls	r6, r3, #4
 8002ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f04f 0100 	mov.w	r1, #0
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	1894      	adds	r4, r2, r2
 8002eec:	60bc      	str	r4, [r7, #8]
 8002eee:	415b      	adcs	r3, r3
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ef6:	1812      	adds	r2, r2, r0
 8002ef8:	eb41 0303 	adc.w	r3, r1, r3
 8002efc:	f04f 0400 	mov.w	r4, #0
 8002f00:	f04f 0500 	mov.w	r5, #0
 8002f04:	00dd      	lsls	r5, r3, #3
 8002f06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f0a:	00d4      	lsls	r4, r2, #3
 8002f0c:	4622      	mov	r2, r4
 8002f0e:	462b      	mov	r3, r5
 8002f10:	1814      	adds	r4, r2, r0
 8002f12:	64bc      	str	r4, [r7, #72]	; 0x48
 8002f14:	414b      	adcs	r3, r1
 8002f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f04f 0100 	mov.w	r1, #0
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	008b      	lsls	r3, r1, #2
 8002f2c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f30:	0082      	lsls	r2, r0, #2
 8002f32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002f36:	f7fd fd3d 	bl	80009b4 <__aeabi_uldivmod>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4b2f      	ldr	r3, [pc, #188]	; (8002ffc <UART_SetConfig+0x38c>)
 8002f40:	fba3 1302 	umull	r1, r3, r3, r2
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	2164      	movs	r1, #100	; 0x64
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	3332      	adds	r3, #50	; 0x32
 8002f52:	4a2a      	ldr	r2, [pc, #168]	; (8002ffc <UART_SetConfig+0x38c>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	095b      	lsrs	r3, r3, #5
 8002f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f5e:	441e      	add	r6, r3
 8002f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f62:	4618      	mov	r0, r3
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	1894      	adds	r4, r2, r2
 8002f6e:	603c      	str	r4, [r7, #0]
 8002f70:	415b      	adcs	r3, r3
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f78:	1812      	adds	r2, r2, r0
 8002f7a:	eb41 0303 	adc.w	r3, r1, r3
 8002f7e:	f04f 0400 	mov.w	r4, #0
 8002f82:	f04f 0500 	mov.w	r5, #0
 8002f86:	00dd      	lsls	r5, r3, #3
 8002f88:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f8c:	00d4      	lsls	r4, r2, #3
 8002f8e:	4622      	mov	r2, r4
 8002f90:	462b      	mov	r3, r5
 8002f92:	eb12 0a00 	adds.w	sl, r2, r0
 8002f96:	eb43 0b01 	adc.w	fp, r3, r1
 8002f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f04f 0100 	mov.w	r1, #0
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	008b      	lsls	r3, r1, #2
 8002fae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002fb2:	0082      	lsls	r2, r0, #2
 8002fb4:	4650      	mov	r0, sl
 8002fb6:	4659      	mov	r1, fp
 8002fb8:	f7fd fcfc 	bl	80009b4 <__aeabi_uldivmod>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <UART_SetConfig+0x38c>)
 8002fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2164      	movs	r1, #100	; 0x64
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	3332      	adds	r3, #50	; 0x32
 8002fd4:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <UART_SetConfig+0x38c>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	f003 020f 	and.w	r2, r3, #15
 8002fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4432      	add	r2, r6
 8002fe6:	609a      	str	r2, [r3, #8]
}
 8002fe8:	bf00      	nop
 8002fea:	377c      	adds	r7, #124	; 0x7c
 8002fec:	46bd      	mov	sp, r7
 8002fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40011000 	.word	0x40011000
 8002ff8:	40011400 	.word	0x40011400
 8002ffc:	51eb851f 	.word	0x51eb851f

08003000 <__libc_init_array>:
 8003000:	b570      	push	{r4, r5, r6, lr}
 8003002:	4d0d      	ldr	r5, [pc, #52]	; (8003038 <__libc_init_array+0x38>)
 8003004:	4c0d      	ldr	r4, [pc, #52]	; (800303c <__libc_init_array+0x3c>)
 8003006:	1b64      	subs	r4, r4, r5
 8003008:	10a4      	asrs	r4, r4, #2
 800300a:	2600      	movs	r6, #0
 800300c:	42a6      	cmp	r6, r4
 800300e:	d109      	bne.n	8003024 <__libc_init_array+0x24>
 8003010:	4d0b      	ldr	r5, [pc, #44]	; (8003040 <__libc_init_array+0x40>)
 8003012:	4c0c      	ldr	r4, [pc, #48]	; (8003044 <__libc_init_array+0x44>)
 8003014:	f000 f820 	bl	8003058 <_init>
 8003018:	1b64      	subs	r4, r4, r5
 800301a:	10a4      	asrs	r4, r4, #2
 800301c:	2600      	movs	r6, #0
 800301e:	42a6      	cmp	r6, r4
 8003020:	d105      	bne.n	800302e <__libc_init_array+0x2e>
 8003022:	bd70      	pop	{r4, r5, r6, pc}
 8003024:	f855 3b04 	ldr.w	r3, [r5], #4
 8003028:	4798      	blx	r3
 800302a:	3601      	adds	r6, #1
 800302c:	e7ee      	b.n	800300c <__libc_init_array+0xc>
 800302e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003032:	4798      	blx	r3
 8003034:	3601      	adds	r6, #1
 8003036:	e7f2      	b.n	800301e <__libc_init_array+0x1e>
 8003038:	08003090 	.word	0x08003090
 800303c:	08003090 	.word	0x08003090
 8003040:	08003090 	.word	0x08003090
 8003044:	08003094 	.word	0x08003094

08003048 <memset>:
 8003048:	4402      	add	r2, r0
 800304a:	4603      	mov	r3, r0
 800304c:	4293      	cmp	r3, r2
 800304e:	d100      	bne.n	8003052 <memset+0xa>
 8003050:	4770      	bx	lr
 8003052:	f803 1b01 	strb.w	r1, [r3], #1
 8003056:	e7f9      	b.n	800304c <memset+0x4>

08003058 <_init>:
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	bf00      	nop
 800305c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305e:	bc08      	pop	{r3}
 8003060:	469e      	mov	lr, r3
 8003062:	4770      	bx	lr

08003064 <_fini>:
 8003064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003066:	bf00      	nop
 8003068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306a:	bc08      	pop	{r3}
 800306c:	469e      	mov	lr, r3
 800306e:	4770      	bx	lr
